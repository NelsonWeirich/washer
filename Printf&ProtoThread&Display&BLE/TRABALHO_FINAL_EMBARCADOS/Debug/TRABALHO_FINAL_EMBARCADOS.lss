
TRABALHO_FINAL_EMBARCADOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e24  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000b0  20000000  00004e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c0  200000b0  00004ee0  000200b0  2**4
                  ALLOC
  3 .stack        00002000  20000570  000053a0  000200b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00055913  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000658f  00000000  00000000  00075a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b3e1  00000000  00000000  0007bfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000880  00000000  00000000  000873b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e00  00000000  00000000  00087c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000bee5  00000000  00000000  00088a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00018358  00000000  00000000  00094919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009274d  00000000  00000000  000acc71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d40  00000000  00000000  0013f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 25 00 20 99 2c 00 00 95 2c 00 00 95 2c 00 00     p%. .,...,...,..
	...
      2c:	95 2c 00 00 00 00 00 00 00 00 00 00 95 2c 00 00     .,...........,..
      3c:	95 2c 00 00 95 2c 00 00 95 2c 00 00 95 2c 00 00     .,...,...,...,..
      4c:	95 2c 00 00 95 2c 00 00 95 2c 00 00 49 1a 00 00     .,...,...,..I...
      5c:	95 2c 00 00 95 2c 00 00 41 20 00 00 51 20 00 00     .,...,..A ..Q ..
      6c:	61 20 00 00 71 20 00 00 81 20 00 00 91 20 00 00     a ..q ... ... ..
      7c:	95 2c 00 00 95 2c 00 00 95 2c 00 00 95 2c 00 00     .,...,...,...,..
      8c:	95 2c 00 00 95 2c 00 00 95 2c 00 00 95 2c 00 00     .,...,...,...,..
      9c:	95 2c 00 00 95 2c 00 00 95 2c 00 00 95 2c 00 00     .,...,...,...,..
      ac:	95 2c 00 00 00 00 00 00                             .,......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000b0 	.word	0x200000b0
      d4:	00000000 	.word	0x00000000
      d8:	00004e24 	.word	0x00004e24

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000b4 	.word	0x200000b4
     108:	00004e24 	.word	0x00004e24
     10c:	00004e24 	.word	0x00004e24
     110:	00000000 	.word	0x00000000

00000114 <initSensor_NivelAgua>:
/*! Store ADC driver state */
struct adc_module adc_instance;

void initSensor_NivelAgua(void) {
  //..
}
     114:	4770      	bx	lr
	...

00000118 <valorAtualSensor>:
//
// 	if(1700 <= valor_adc){
// 		return SENSOR_NIVEL_FULL; /*!< 2047 */
// 	}

  if(count2 > 250){
     118:	4b0c      	ldr	r3, [pc, #48]	; (14c <valorAtualSensor+0x34>)
     11a:	681b      	ldr	r3, [r3, #0]
     11c:	2bfa      	cmp	r3, #250	; 0xfa
     11e:	dd11      	ble.n	144 <valorAtualSensor+0x2c>
    if(count > SENSOR_NIVEL_FULL){
     120:	4b0b      	ldr	r3, [pc, #44]	; (150 <valorAtualSensor+0x38>)
     122:	681b      	ldr	r3, [r3, #0]
     124:	4a0b      	ldr	r2, [pc, #44]	; (154 <valorAtualSensor+0x3c>)
     126:	4293      	cmp	r3, r2
     128:	dd08      	ble.n	13c <valorAtualSensor+0x24>
      count = 0;
     12a:	2200      	movs	r2, #0
     12c:	4b08      	ldr	r3, [pc, #32]	; (150 <valorAtualSensor+0x38>)
     12e:	601a      	str	r2, [r3, #0]
    }else{
      count++;
    }
    count2 = 0;
     130:	2200      	movs	r2, #0
     132:	4b06      	ldr	r3, [pc, #24]	; (14c <valorAtualSensor+0x34>)
     134:	601a      	str	r2, [r3, #0]
  }else{
    count2++;
  }
  return count;
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <valorAtualSensor+0x38>)
     138:	6818      	ldr	r0, [r3, #0]
}
     13a:	4770      	bx	lr
      count++;
     13c:	3301      	adds	r3, #1
     13e:	4a04      	ldr	r2, [pc, #16]	; (150 <valorAtualSensor+0x38>)
     140:	6013      	str	r3, [r2, #0]
     142:	e7f5      	b.n	130 <valorAtualSensor+0x18>
    count2++;
     144:	3301      	adds	r3, #1
     146:	4a01      	ldr	r2, [pc, #4]	; (14c <valorAtualSensor+0x34>)
     148:	6013      	str	r3, [r2, #0]
     14a:	e7f4      	b.n	136 <valorAtualSensor+0x1e>
     14c:	200000d0 	.word	0x200000d0
     150:	200000cc 	.word	0x200000cc
     154:	000003ea 	.word	0x000003ea

00000158 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
     158:	b5f0      	push	{r4, r5, r6, r7, lr}
     15a:	b083      	sub	sp, #12
     15c:	466b      	mov	r3, sp
     15e:	1ddf      	adds	r7, r3, #7
     160:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     162:	4e0b      	ldr	r6, [pc, #44]	; (190 <ssd1306_write_command+0x38>)
     164:	4c0b      	ldr	r4, [pc, #44]	; (194 <ssd1306_write_command+0x3c>)
     166:	2201      	movs	r2, #1
     168:	0031      	movs	r1, r6
     16a:	0020      	movs	r0, r4
     16c:	4d0a      	ldr	r5, [pc, #40]	; (198 <ssd1306_write_command+0x40>)
     16e:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     170:	2280      	movs	r2, #128	; 0x80
     172:	05d2      	lsls	r2, r2, #23
     174:	4b09      	ldr	r3, [pc, #36]	; (19c <ssd1306_write_command+0x44>)
     176:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(SSD1306_DC_PIN, false);
	spi_write_buffer_wait(&ssd1306_master, &command, 1);
     178:	2201      	movs	r2, #1
     17a:	0039      	movs	r1, r7
     17c:	0020      	movs	r0, r4
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <ssd1306_write_command+0x48>)
     180:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     182:	2200      	movs	r2, #0
     184:	0031      	movs	r1, r6
     186:	0020      	movs	r0, r4
     188:	47a8      	blx	r5
}
     18a:	b003      	add	sp, #12
     18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	200003d4 	.word	0x200003d4
     194:	20000398 	.word	0x20000398
     198:	000007ad 	.word	0x000007ad
     19c:	41004480 	.word	0x41004480
     1a0:	000008a1 	.word	0x000008a1

000001a4 <ssd1306_init>:
{
     1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a6:	b091      	sub	sp, #68	; 0x44
	delay_init();
     1a8:	4b60      	ldr	r3, [pc, #384]	; (32c <ssd1306_init+0x188>)
     1aa:	4798      	blx	r3
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     1ac:	4c60      	ldr	r4, [pc, #384]	; (330 <ssd1306_init+0x18c>)
     1ae:	2331      	movs	r3, #49	; 0x31
     1b0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     1b2:	2300      	movs	r3, #0
     1b4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     1b6:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     1b8:	a902      	add	r1, sp, #8
     1ba:	2201      	movs	r2, #1
     1bc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     1be:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     1c0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     1c2:	2031      	movs	r0, #49	; 0x31
     1c4:	4b5b      	ldr	r3, [pc, #364]	; (334 <ssd1306_init+0x190>)
     1c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     1c8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     1ca:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     1cc:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     1ce:	2900      	cmp	r1, #0
     1d0:	d104      	bne.n	1dc <ssd1306_init+0x38>
		return &(ports[port_index]->Group[group_index]);
     1d2:	095a      	lsrs	r2, r3, #5
     1d4:	01d2      	lsls	r2, r2, #7
     1d6:	4958      	ldr	r1, [pc, #352]	; (338 <ssd1306_init+0x194>)
     1d8:	468c      	mov	ip, r1
     1da:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1dc:	261f      	movs	r6, #31
     1de:	4033      	ands	r3, r6
     1e0:	2501      	movs	r5, #1
     1e2:	0029      	movs	r1, r5
     1e4:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     1e6:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
     1e8:	ac02      	add	r4, sp, #8
     1ea:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     1ec:	2300      	movs	r3, #0
     1ee:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     1f0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     1f2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     1f4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     1f6:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
     1f8:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
     1fa:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     1fc:	2224      	movs	r2, #36	; 0x24
     1fe:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     200:	3a18      	subs	r2, #24
     202:	2100      	movs	r1, #0
     204:	a808      	add	r0, sp, #32
     206:	4b4d      	ldr	r3, [pc, #308]	; (33c <ssd1306_init+0x198>)
     208:	4798      	blx	r3
	config.mux_setting = SSD1306_SPI_PINMUX_SETTING;
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	025b      	lsls	r3, r3, #9
     20e:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SSD1306_SPI_PINMUX_PAD0;
     210:	4b4b      	ldr	r3, [pc, #300]	; (340 <ssd1306_init+0x19c>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SSD1306_SPI_PINMUX_PAD1;
     214:	2301      	movs	r3, #1
     216:	425b      	negs	r3, r3
     218:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SSD1306_SPI_PINMUX_PAD2;
     21a:	4b4a      	ldr	r3, [pc, #296]	; (344 <ssd1306_init+0x1a0>)
     21c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SSD1306_SPI_PINMUX_PAD3;
     21e:	4b4a      	ldr	r3, [pc, #296]	; (348 <ssd1306_init+0x1a4>)
     220:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SSD1306_CLOCK_SPEED;
     222:	4b4a      	ldr	r3, [pc, #296]	; (34c <ssd1306_init+0x1a8>)
     224:	61a3      	str	r3, [r4, #24]
	spi_init(&ssd1306_master, SSD1306_SPI, &config);
     226:	4f4a      	ldr	r7, [pc, #296]	; (350 <ssd1306_init+0x1ac>)
     228:	0022      	movs	r2, r4
     22a:	494a      	ldr	r1, [pc, #296]	; (354 <ssd1306_init+0x1b0>)
     22c:	0038      	movs	r0, r7
     22e:	4b4a      	ldr	r3, [pc, #296]	; (358 <ssd1306_init+0x1b4>)
     230:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     232:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     234:	0020      	movs	r0, r4
     236:	4b49      	ldr	r3, [pc, #292]	; (35c <ssd1306_init+0x1b8>)
     238:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     23a:	4006      	ands	r6, r0
     23c:	40b5      	lsls	r5, r6
     23e:	4b48      	ldr	r3, [pc, #288]	; (360 <ssd1306_init+0x1bc>)
     240:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     242:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
     244:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     246:	2b00      	cmp	r3, #0
     248:	d1fc      	bne.n	244 <ssd1306_init+0xa0>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     24a:	6823      	ldr	r3, [r4, #0]
     24c:	2202      	movs	r2, #2
     24e:	4313      	orrs	r3, r2
     250:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     252:	ac01      	add	r4, sp, #4
     254:	2301      	movs	r3, #1
     256:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     258:	2200      	movs	r2, #0
     25a:	70a2      	strb	r2, [r4, #2]
	pin.direction = PORT_PIN_DIR_OUTPUT;
     25c:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(SSD1306_DC_PIN, &pin);
     25e:	0021      	movs	r1, r4
     260:	203e      	movs	r0, #62	; 0x3e
     262:	4d34      	ldr	r5, [pc, #208]	; (334 <ssd1306_init+0x190>)
     264:	47a8      	blx	r5
	port_pin_set_config(SSD1306_RES_PIN, &pin);
     266:	0021      	movs	r1, r4
     268:	201b      	movs	r0, #27
     26a:	47a8      	blx	r5
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
	uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
     26c:	2000      	movs	r0, #0
     26e:	4b3d      	ldr	r3, [pc, #244]	; (364 <ssd1306_init+0x1c0>)
     270:	4798      	blx	r3
     272:	4936      	ldr	r1, [pc, #216]	; (34c <ssd1306_init+0x1a8>)
     274:	4b3c      	ldr	r3, [pc, #240]	; (368 <ssd1306_init+0x1c4>)
     276:	4798      	blx	r3
     278:	0083      	lsls	r3, r0, #2
     27a:	1818      	adds	r0, r3, r0
     27c:	0040      	lsls	r0, r0, #1
		port_base->OUTCLR.reg = pin_mask;
     27e:	2280      	movs	r2, #128	; 0x80
     280:	0512      	lsls	r2, r2, #20
     282:	4b2d      	ldr	r3, [pc, #180]	; (338 <ssd1306_init+0x194>)
     284:	615a      	str	r2, [r3, #20]
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     286:	2800      	cmp	r0, #0
     288:	d04a      	beq.n	320 <ssd1306_init+0x17c>
		SysTick->LOAD = n;
     28a:	4b38      	ldr	r3, [pc, #224]	; (36c <ssd1306_init+0x1c8>)
     28c:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     28e:	2200      	movs	r2, #0
     290:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     292:	0019      	movs	r1, r3
     294:	2280      	movs	r2, #128	; 0x80
     296:	0252      	lsls	r2, r2, #9
     298:	680b      	ldr	r3, [r1, #0]
     29a:	4213      	tst	r3, r2
     29c:	d0fc      	beq.n	298 <ssd1306_init+0xf4>
		port_base->OUTSET.reg = pin_mask;
     29e:	2280      	movs	r2, #128	; 0x80
     2a0:	0512      	lsls	r2, r2, #20
     2a2:	4b25      	ldr	r3, [pc, #148]	; (338 <ssd1306_init+0x194>)
     2a4:	619a      	str	r2, [r3, #24]
		SysTick->LOAD = n;
     2a6:	4b31      	ldr	r3, [pc, #196]	; (36c <ssd1306_init+0x1c8>)
     2a8:	6058      	str	r0, [r3, #4]
		SysTick->VAL = 0;
     2aa:	2200      	movs	r2, #0
     2ac:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     2ae:	0019      	movs	r1, r3
     2b0:	2280      	movs	r2, #128	; 0x80
     2b2:	0252      	lsls	r2, r2, #9
     2b4:	680b      	ldr	r3, [r1, #0]
     2b6:	4213      	tst	r3, r2
     2b8:	d0fc      	beq.n	2b4 <ssd1306_init+0x110>
     2ba:	2280      	movs	r2, #128	; 0x80
     2bc:	0512      	lsls	r2, r2, #20
     2be:	4b1e      	ldr	r3, [pc, #120]	; (338 <ssd1306_init+0x194>)
     2c0:	619a      	str	r2, [r3, #24]
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     2c2:	20a8      	movs	r0, #168	; 0xa8
     2c4:	4c2a      	ldr	r4, [pc, #168]	; (370 <ssd1306_init+0x1cc>)
     2c6:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
     2c8:	201f      	movs	r0, #31
     2ca:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     2cc:	20d3      	movs	r0, #211	; 0xd3
     2ce:	47a0      	blx	r4
	ssd1306_write_command(0x00);
     2d0:	2000      	movs	r0, #0
     2d2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
     2d4:	2040      	movs	r0, #64	; 0x40
     2d6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     2d8:	20a1      	movs	r0, #161	; 0xa1
     2da:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     2dc:	20c8      	movs	r0, #200	; 0xc8
     2de:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     2e0:	20da      	movs	r0, #218	; 0xda
     2e2:	47a0      	blx	r4
	ssd1306_write_command(0x02);
     2e4:	2002      	movs	r0, #2
     2e6:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     2e8:	2081      	movs	r0, #129	; 0x81
     2ea:	47a0      	blx	r4
	ssd1306_write_command(contrast);
     2ec:	208f      	movs	r0, #143	; 0x8f
     2ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     2f0:	20a4      	movs	r0, #164	; 0xa4
     2f2:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     2f4:	20a6      	movs	r0, #166	; 0xa6
     2f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     2f8:	20d5      	movs	r0, #213	; 0xd5
     2fa:	47a0      	blx	r4
	ssd1306_write_command(0x80);
     2fc:	2080      	movs	r0, #128	; 0x80
     2fe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     300:	208d      	movs	r0, #141	; 0x8d
     302:	47a0      	blx	r4
	ssd1306_write_command(0x14);
     304:	2014      	movs	r0, #20
     306:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     308:	20db      	movs	r0, #219	; 0xdb
     30a:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     30c:	2040      	movs	r0, #64	; 0x40
     30e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     310:	20d9      	movs	r0, #217	; 0xd9
     312:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
     314:	20f1      	movs	r0, #241	; 0xf1
     316:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     318:	20af      	movs	r0, #175	; 0xaf
     31a:	47a0      	blx	r4
}
     31c:	b011      	add	sp, #68	; 0x44
     31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     320:	2280      	movs	r2, #128	; 0x80
     322:	0512      	lsls	r2, r2, #20
     324:	4b04      	ldr	r3, [pc, #16]	; (338 <ssd1306_init+0x194>)
     326:	619a      	str	r2, [r3, #24]
     328:	e7c7      	b.n	2ba <ssd1306_init+0x116>
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	000003c1 	.word	0x000003c1
     330:	200003d4 	.word	0x200003d4
     334:	00001c39 	.word	0x00001c39
     338:	41004400 	.word	0x41004400
     33c:	000036e3 	.word	0x000036e3
     340:	00300002 	.word	0x00300002
     344:	00360003 	.word	0x00360003
     348:	00370003 	.word	0x00370003
     34c:	000f4240 	.word	0x000f4240
     350:	20000398 	.word	0x20000398
     354:	42001c00 	.word	0x42001c00
     358:	00000599 	.word	0x00000599
     35c:	00002011 	.word	0x00002011
     360:	e000e100 	.word	0xe000e100
     364:	00002a25 	.word	0x00002a25
     368:	0000351d 	.word	0x0000351d
     36c:	e000e010 	.word	0xe000e010
     370:	00000159 	.word	0x00000159

00000374 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     374:	b5f0      	push	{r4, r5, r6, r7, lr}
     376:	b083      	sub	sp, #12
     378:	466b      	mov	r3, sp
     37a:	1ddf      	adds	r7, r3, #7
     37c:	71d8      	strb	r0, [r3, #7]
	spi_select_slave(&ssd1306_master, &ssd1306_slave, true);
     37e:	4e0b      	ldr	r6, [pc, #44]	; (3ac <ssd1306_write_data+0x38>)
     380:	4c0b      	ldr	r4, [pc, #44]	; (3b0 <ssd1306_write_data+0x3c>)
     382:	2201      	movs	r2, #1
     384:	0031      	movs	r1, r6
     386:	0020      	movs	r0, r4
     388:	4d0a      	ldr	r5, [pc, #40]	; (3b4 <ssd1306_write_data+0x40>)
     38a:	47a8      	blx	r5
     38c:	2280      	movs	r2, #128	; 0x80
     38e:	05d2      	lsls	r2, r2, #23
     390:	4b09      	ldr	r3, [pc, #36]	; (3b8 <ssd1306_write_data+0x44>)
     392:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(SSD1306_DC_PIN, true);
	spi_write_buffer_wait(&ssd1306_master, &data, 1);
     394:	2201      	movs	r2, #1
     396:	0039      	movs	r1, r7
     398:	0020      	movs	r0, r4
     39a:	4b08      	ldr	r3, [pc, #32]	; (3bc <ssd1306_write_data+0x48>)
     39c:	4798      	blx	r3
	spi_select_slave(&ssd1306_master, &ssd1306_slave, false);
     39e:	2200      	movs	r2, #0
     3a0:	0031      	movs	r1, r6
     3a2:	0020      	movs	r0, r4
     3a4:	47a8      	blx	r5
}
     3a6:	b003      	add	sp, #12
     3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3aa:	46c0      	nop			; (mov r8, r8)
     3ac:	200003d4 	.word	0x200003d4
     3b0:	20000398 	.word	0x20000398
     3b4:	000007ad 	.word	0x000007ad
     3b8:	41004480 	.word	0x41004480
     3bc:	000008a1 	.word	0x000008a1

000003c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3c2:	2000      	movs	r0, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <delay_init+0x28>)
     3c6:	4798      	blx	r3
     3c8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3ca:	4c08      	ldr	r4, [pc, #32]	; (3ec <delay_init+0x2c>)
     3cc:	21fa      	movs	r1, #250	; 0xfa
     3ce:	0089      	lsls	r1, r1, #2
     3d0:	47a0      	blx	r4
     3d2:	4b07      	ldr	r3, [pc, #28]	; (3f0 <delay_init+0x30>)
     3d4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <delay_init+0x34>)
     3d8:	0028      	movs	r0, r5
     3da:	47a0      	blx	r4
     3dc:	4b06      	ldr	r3, [pc, #24]	; (3f8 <delay_init+0x38>)
     3de:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e0:	2205      	movs	r2, #5
     3e2:	4b06      	ldr	r3, [pc, #24]	; (3fc <delay_init+0x3c>)
     3e4:	601a      	str	r2, [r3, #0]
}
     3e6:	bd70      	pop	{r4, r5, r6, pc}
     3e8:	00002a25 	.word	0x00002a25
     3ec:	0000351d 	.word	0x0000351d
     3f0:	20000000 	.word	0x20000000
     3f4:	000f4240 	.word	0x000f4240
     3f8:	20000004 	.word	0x20000004
     3fc:	e000e010 	.word	0xe000e010

00000400 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     400:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     402:	4b08      	ldr	r3, [pc, #32]	; (424 <delay_cycles_ms+0x24>)
     404:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     406:	4a08      	ldr	r2, [pc, #32]	; (428 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     408:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	0249      	lsls	r1, r1, #9
	while (n--) {
     40e:	3801      	subs	r0, #1
     410:	d307      	bcc.n	422 <delay_cycles_ms+0x22>
	if (n > 0) {
     412:	2c00      	cmp	r4, #0
     414:	d0fb      	beq.n	40e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     416:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     418:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     41a:	6813      	ldr	r3, [r2, #0]
     41c:	420b      	tst	r3, r1
     41e:	d0fc      	beq.n	41a <delay_cycles_ms+0x1a>
     420:	e7f5      	b.n	40e <delay_cycles_ms+0xe>
	}
}
     422:	bd30      	pop	{r4, r5, pc}
     424:	20000000 	.word	0x20000000
     428:	e000e010 	.word	0xe000e010

0000042c <gfx_mono_ssd1306_put_page>:
	gfx_mono_ssd1306_put_page(data_buf, 0, 10, 32);
\endcode
 */
void gfx_mono_ssd1306_put_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
     42c:	b5f0      	push	{r4, r5, r6, r7, lr}
     42e:	b083      	sub	sp, #12
     430:	000c      	movs	r4, r1
     432:	0016      	movs	r6, r2
     434:	001d      	movs	r5, r3
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_framebuffer_put_page(data, page, column, width);
     436:	9001      	str	r0, [sp, #4]
     438:	4f0f      	ldr	r7, [pc, #60]	; (478 <gfx_mono_ssd1306_put_page+0x4c>)
     43a:	47b8      	blx	r7
	address &= 0x0F;
     43c:	270f      	movs	r7, #15
     43e:	403c      	ands	r4, r7
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     440:	20b0      	movs	r0, #176	; 0xb0
     442:	4320      	orrs	r0, r4
     444:	4c0d      	ldr	r4, [pc, #52]	; (47c <gfx_mono_ssd1306_put_page+0x50>)
     446:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     448:	0670      	lsls	r0, r6, #25
     44a:	0f40      	lsrs	r0, r0, #29
     44c:	2310      	movs	r3, #16
     44e:	4318      	orrs	r0, r3
     450:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     452:	4037      	ands	r7, r6
     454:	0038      	movs	r0, r7
     456:	47a0      	blx	r4
     458:	9b01      	ldr	r3, [sp, #4]
     45a:	001c      	movs	r4, r3
     45c:	3d01      	subs	r5, #1
     45e:	b2ed      	uxtb	r5, r5
     460:	3501      	adds	r5, #1
     462:	469c      	mov	ip, r3
     464:	4465      	add	r5, ip
#endif
	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	do {
		ssd1306_write_data(*data++);
     466:	4e06      	ldr	r6, [pc, #24]	; (480 <gfx_mono_ssd1306_put_page+0x54>)
     468:	7820      	ldrb	r0, [r4, #0]
     46a:	47b0      	blx	r6
     46c:	3401      	adds	r4, #1
	} while (--width);
     46e:	42ac      	cmp	r4, r5
     470:	d1fa      	bne.n	468 <gfx_mono_ssd1306_put_page+0x3c>
}
     472:	b003      	add	sp, #12
     474:	bdf0      	pop	{r4, r5, r6, r7, pc}
     476:	46c0      	nop			; (mov r8, r8)
     478:	0000118d 	.word	0x0000118d
     47c:	00000159 	.word	0x00000159
     480:	00000375 	.word	0x00000375

00000484 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
     484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     486:	0004      	movs	r4, r0
     488:	000f      	movs	r7, r1
     48a:	0015      	movs	r5, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     48c:	2b00      	cmp	r3, #0
     48e:	d103      	bne.n	498 <gfx_mono_ssd1306_put_byte+0x14>
     490:	4b0d      	ldr	r3, [pc, #52]	; (4c8 <gfx_mono_ssd1306_put_byte+0x44>)
     492:	4798      	blx	r3
     494:	42a8      	cmp	r0, r5
     496:	d015      	beq.n	4c4 <gfx_mono_ssd1306_put_byte+0x40>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     498:	002a      	movs	r2, r5
     49a:	0039      	movs	r1, r7
     49c:	0020      	movs	r0, r4
     49e:	4b0b      	ldr	r3, [pc, #44]	; (4cc <gfx_mono_ssd1306_put_byte+0x48>)
     4a0:	4798      	blx	r3
	address &= 0x0F;
     4a2:	260f      	movs	r6, #15
     4a4:	4034      	ands	r4, r6
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     4a6:	20b0      	movs	r0, #176	; 0xb0
     4a8:	4320      	orrs	r0, r4
     4aa:	4c09      	ldr	r4, [pc, #36]	; (4d0 <gfx_mono_ssd1306_put_byte+0x4c>)
     4ac:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
     4ae:	0678      	lsls	r0, r7, #25
     4b0:	0f40      	lsrs	r0, r0, #29
     4b2:	2310      	movs	r3, #16
     4b4:	4318      	orrs	r0, r3
     4b6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
     4b8:	0030      	movs	r0, r6
     4ba:	4038      	ands	r0, r7
     4bc:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
     4be:	0028      	movs	r0, r5
     4c0:	4b04      	ldr	r3, [pc, #16]	; (4d4 <gfx_mono_ssd1306_put_byte+0x50>)
     4c2:	4798      	blx	r3
}
     4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	000011c1 	.word	0x000011c1
     4cc:	000011b1 	.word	0x000011b1
     4d0:	00000159 	.word	0x00000159
     4d4:	00000375 	.word	0x00000375

000004d8 <gfx_mono_ssd1306_init>:
{
     4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	gfx_mono_set_framebuffer(framebuffer);
     4da:	480d      	ldr	r0, [pc, #52]	; (510 <gfx_mono_ssd1306_init+0x38>)
     4dc:	4b0d      	ldr	r3, [pc, #52]	; (514 <gfx_mono_ssd1306_init+0x3c>)
     4de:	4798      	blx	r3
	ssd1306_init();
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <gfx_mono_ssd1306_init+0x40>)
     4e2:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
     4e4:	2040      	movs	r0, #64	; 0x40
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <gfx_mono_ssd1306_init+0x44>)
     4e8:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     4ea:	2500      	movs	r5, #0
{
     4ec:	2600      	movs	r6, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     4ee:	4f0c      	ldr	r7, [pc, #48]	; (520 <gfx_mono_ssd1306_init+0x48>)
{
     4f0:	0034      	movs	r4, r6
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
     4f2:	2301      	movs	r3, #1
     4f4:	0032      	movs	r2, r6
     4f6:	0021      	movs	r1, r4
     4f8:	0028      	movs	r0, r5
     4fa:	47b8      	blx	r7
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     4fc:	3401      	adds	r4, #1
     4fe:	b2e4      	uxtb	r4, r4
     500:	2c80      	cmp	r4, #128	; 0x80
     502:	d1f6      	bne.n	4f2 <gfx_mono_ssd1306_init+0x1a>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     504:	3501      	adds	r5, #1
     506:	b2ed      	uxtb	r5, r5
     508:	2d04      	cmp	r5, #4
     50a:	d1f1      	bne.n	4f0 <gfx_mono_ssd1306_init+0x18>
}
     50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	200000d4 	.word	0x200000d4
     514:	00001181 	.word	0x00001181
     518:	000001a5 	.word	0x000001a5
     51c:	00000159 	.word	0x00000159
     520:	00000485 	.word	0x00000485

00000524 <gfx_mono_ssd1306_draw_pixel>:
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	46c6      	mov	lr, r8
     528:	b500      	push	{lr}
     52a:	0004      	movs	r4, r0
     52c:	0015      	movs	r5, r2
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     52e:	b243      	sxtb	r3, r0
     530:	2b00      	cmp	r3, #0
     532:	db01      	blt.n	538 <gfx_mono_ssd1306_draw_pixel+0x14>
     534:	291f      	cmp	r1, #31
     536:	d902      	bls.n	53e <gfx_mono_ssd1306_draw_pixel+0x1a>
}
     538:	bc04      	pop	{r2}
     53a:	4690      	mov	r8, r2
     53c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     53e:	08cf      	lsrs	r7, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
     540:	00fb      	lsls	r3, r7, #3
     542:	1ac9      	subs	r1, r1, r3
     544:	2601      	movs	r6, #1
     546:	408e      	lsls	r6, r1
     548:	b2f3      	uxtb	r3, r6
     54a:	4698      	mov	r8, r3
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     54c:	0001      	movs	r1, r0
     54e:	0038      	movs	r0, r7
     550:	4b0c      	ldr	r3, [pc, #48]	; (584 <gfx_mono_ssd1306_draw_pixel+0x60>)
     552:	4798      	blx	r3
     554:	0002      	movs	r2, r0
	switch (color) {
     556:	2d01      	cmp	r5, #1
     558:	d009      	beq.n	56e <gfx_mono_ssd1306_draw_pixel+0x4a>
     55a:	2d00      	cmp	r5, #0
     55c:	d00b      	beq.n	576 <gfx_mono_ssd1306_draw_pixel+0x52>
     55e:	2d02      	cmp	r5, #2
     560:	d00c      	beq.n	57c <gfx_mono_ssd1306_draw_pixel+0x58>
	gfx_mono_put_byte(page, x, pixel_value);
     562:	2300      	movs	r3, #0
     564:	0021      	movs	r1, r4
     566:	0038      	movs	r0, r7
     568:	4c07      	ldr	r4, [pc, #28]	; (588 <gfx_mono_ssd1306_draw_pixel+0x64>)
     56a:	47a0      	blx	r4
     56c:	e7e4      	b.n	538 <gfx_mono_ssd1306_draw_pixel+0x14>
		pixel_value |= pixel_mask;
     56e:	4643      	mov	r3, r8
     570:	4303      	orrs	r3, r0
     572:	b2da      	uxtb	r2, r3
		break;
     574:	e7f5      	b.n	562 <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value &= ~pixel_mask;
     576:	43b0      	bics	r0, r6
     578:	b2c2      	uxtb	r2, r0
		break;
     57a:	e7f2      	b.n	562 <gfx_mono_ssd1306_draw_pixel+0x3e>
		pixel_value ^= pixel_mask;
     57c:	4643      	mov	r3, r8
     57e:	4043      	eors	r3, r0
     580:	b2da      	uxtb	r2, r3
		break;
     582:	e7ee      	b.n	562 <gfx_mono_ssd1306_draw_pixel+0x3e>
     584:	000011c1 	.word	0x000011c1
     588:	00000485 	.word	0x00000485

0000058c <gfx_mono_ssd1306_get_byte>:
{
     58c:	b510      	push	{r4, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
     58e:	4b01      	ldr	r3, [pc, #4]	; (594 <gfx_mono_ssd1306_get_byte+0x8>)
     590:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
     592:	bd10      	pop	{r4, pc}
     594:	000011c1 	.word	0x000011c1

00000598 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     598:	b5f0      	push	{r4, r5, r6, r7, lr}
     59a:	b08b      	sub	sp, #44	; 0x2c
     59c:	0005      	movs	r5, r0
     59e:	000c      	movs	r4, r1
     5a0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     5a2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     5a4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     5a6:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     5a8:	079b      	lsls	r3, r3, #30
     5aa:	d501      	bpl.n	5b0 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     5ac:	b00b      	add	sp, #44	; 0x2c
     5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     5b0:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     5b2:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     5b4:	07db      	lsls	r3, r3, #31
     5b6:	d4f9      	bmi.n	5ac <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5b8:	0008      	movs	r0, r1
     5ba:	4b6f      	ldr	r3, [pc, #444]	; (778 <spi_init+0x1e0>)
     5bc:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5be:	4a6f      	ldr	r2, [pc, #444]	; (77c <spi_init+0x1e4>)
     5c0:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5c2:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5c4:	2301      	movs	r3, #1
     5c6:	40bb      	lsls	r3, r7
     5c8:	430b      	orrs	r3, r1
     5ca:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     5cc:	a909      	add	r1, sp, #36	; 0x24
     5ce:	2724      	movs	r7, #36	; 0x24
     5d0:	5df3      	ldrb	r3, [r6, r7]
     5d2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5d4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5d6:	b2c3      	uxtb	r3, r0
     5d8:	9301      	str	r3, [sp, #4]
     5da:	0018      	movs	r0, r3
     5dc:	4b68      	ldr	r3, [pc, #416]	; (780 <spi_init+0x1e8>)
     5de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5e0:	9801      	ldr	r0, [sp, #4]
     5e2:	4b68      	ldr	r3, [pc, #416]	; (784 <spi_init+0x1ec>)
     5e4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     5e6:	5df0      	ldrb	r0, [r6, r7]
     5e8:	2100      	movs	r1, #0
     5ea:	4b67      	ldr	r3, [pc, #412]	; (788 <spi_init+0x1f0>)
     5ec:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     5ee:	7833      	ldrb	r3, [r6, #0]
     5f0:	2b01      	cmp	r3, #1
     5f2:	d03f      	beq.n	674 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
     5f4:	7833      	ldrb	r3, [r6, #0]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d103      	bne.n	602 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     5fa:	6823      	ldr	r3, [r4, #0]
     5fc:	2208      	movs	r2, #8
     5fe:	4313      	orrs	r3, r2
     600:	6023      	str	r3, [r4, #0]
     602:	002b      	movs	r3, r5
     604:	330c      	adds	r3, #12
     606:	0029      	movs	r1, r5
     608:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     60a:	2200      	movs	r2, #0
     60c:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     60e:	428b      	cmp	r3, r1
     610:	d1fc      	bne.n	60c <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
     612:	2300      	movs	r3, #0
     614:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     616:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     618:	2400      	movs	r4, #0
     61a:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     61c:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     61e:	3336      	adds	r3, #54	; 0x36
     620:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     622:	3301      	adds	r3, #1
     624:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     626:	3301      	adds	r3, #1
     628:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     62a:	3b35      	subs	r3, #53	; 0x35
     62c:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     62e:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     630:	6828      	ldr	r0, [r5, #0]
     632:	4b51      	ldr	r3, [pc, #324]	; (778 <spi_init+0x1e0>)
     634:	4798      	blx	r3
     636:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     638:	4954      	ldr	r1, [pc, #336]	; (78c <spi_init+0x1f4>)
     63a:	4b55      	ldr	r3, [pc, #340]	; (790 <spi_init+0x1f8>)
     63c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     63e:	00bf      	lsls	r7, r7, #2
     640:	4b54      	ldr	r3, [pc, #336]	; (794 <spi_init+0x1fc>)
     642:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     644:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     646:	ab04      	add	r3, sp, #16
     648:	2280      	movs	r2, #128	; 0x80
     64a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     64c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     64e:	3a7f      	subs	r2, #127	; 0x7f
     650:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     652:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     654:	7833      	ldrb	r3, [r6, #0]
     656:	2b00      	cmp	r3, #0
     658:	d102      	bne.n	660 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     65a:	2200      	movs	r2, #0
     65c:	ab04      	add	r3, sp, #16
     65e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     660:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     662:	9305      	str	r3, [sp, #20]
     664:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     666:	9306      	str	r3, [sp, #24]
     668:	6b33      	ldr	r3, [r6, #48]	; 0x30
     66a:	9307      	str	r3, [sp, #28]
     66c:	6b73      	ldr	r3, [r6, #52]	; 0x34
     66e:	9308      	str	r3, [sp, #32]
     670:	2400      	movs	r4, #0
     672:	e00b      	b.n	68c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     674:	6823      	ldr	r3, [r4, #0]
     676:	220c      	movs	r2, #12
     678:	4313      	orrs	r3, r2
     67a:	6023      	str	r3, [r4, #0]
     67c:	e7ba      	b.n	5f4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     67e:	0038      	movs	r0, r7
     680:	4b45      	ldr	r3, [pc, #276]	; (798 <spi_init+0x200>)
     682:	4798      	blx	r3
     684:	e00a      	b.n	69c <spi_init+0x104>
     686:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     688:	2c04      	cmp	r4, #4
     68a:	d010      	beq.n	6ae <spi_init+0x116>
     68c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
     68e:	00a3      	lsls	r3, r4, #2
     690:	aa02      	add	r2, sp, #8
     692:	200c      	movs	r0, #12
     694:	1812      	adds	r2, r2, r0
     696:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
     698:	2800      	cmp	r0, #0
     69a:	d0f0      	beq.n	67e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
     69c:	1c43      	adds	r3, r0, #1
     69e:	d0f2      	beq.n	686 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     6a0:	a904      	add	r1, sp, #16
     6a2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     6a4:	0c00      	lsrs	r0, r0, #16
     6a6:	b2c0      	uxtb	r0, r0
     6a8:	4b3c      	ldr	r3, [pc, #240]	; (79c <spi_init+0x204>)
     6aa:	4798      	blx	r3
     6ac:	e7eb      	b.n	686 <spi_init+0xee>
	module->mode             = config->mode;
     6ae:	7833      	ldrb	r3, [r6, #0]
     6b0:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
     6b2:	7c33      	ldrb	r3, [r6, #16]
     6b4:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
     6b6:	7cb3      	ldrb	r3, [r6, #18]
     6b8:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     6ba:	7d33      	ldrb	r3, [r6, #20]
     6bc:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
     6be:	2200      	movs	r2, #0
     6c0:	ab02      	add	r3, sp, #8
     6c2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     6c4:	7833      	ldrb	r3, [r6, #0]
     6c6:	2b01      	cmp	r3, #1
     6c8:	d012      	beq.n	6f0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
     6ca:	7833      	ldrb	r3, [r6, #0]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d126      	bne.n	71e <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
     6d0:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     6d2:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
     6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     6d6:	7ff1      	ldrb	r1, [r6, #31]
     6d8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     6da:	7fb4      	ldrb	r4, [r6, #30]
     6dc:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
     6de:	4319      	orrs	r1, r3
     6e0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     6e2:	2320      	movs	r3, #32
     6e4:	5cf3      	ldrb	r3, [r6, r3]
     6e6:	2b00      	cmp	r3, #0
     6e8:	d01b      	beq.n	722 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     6ea:	2340      	movs	r3, #64	; 0x40
     6ec:	431a      	orrs	r2, r3
     6ee:	e018      	b.n	722 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6f0:	6828      	ldr	r0, [r5, #0]
     6f2:	4b21      	ldr	r3, [pc, #132]	; (778 <spi_init+0x1e0>)
     6f4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6f6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     6f8:	b2c0      	uxtb	r0, r0
     6fa:	4b29      	ldr	r3, [pc, #164]	; (7a0 <spi_init+0x208>)
     6fc:	4798      	blx	r3
     6fe:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     700:	ab02      	add	r3, sp, #8
     702:	1d9a      	adds	r2, r3, #6
     704:	69b0      	ldr	r0, [r6, #24]
     706:	4b27      	ldr	r3, [pc, #156]	; (7a4 <spi_init+0x20c>)
     708:	4798      	blx	r3
     70a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     70c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     70e:	2b00      	cmp	r3, #0
     710:	d000      	beq.n	714 <spi_init+0x17c>
     712:	e74b      	b.n	5ac <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
     714:	ab02      	add	r3, sp, #8
     716:	3306      	adds	r3, #6
     718:	781b      	ldrb	r3, [r3, #0]
     71a:	733b      	strb	r3, [r7, #12]
     71c:	e7d5      	b.n	6ca <spi_init+0x132>
	uint32_t ctrlb = 0;
     71e:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     720:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     722:	6873      	ldr	r3, [r6, #4]
     724:	68b1      	ldr	r1, [r6, #8]
     726:	430b      	orrs	r3, r1
     728:	68f1      	ldr	r1, [r6, #12]
     72a:	430b      	orrs	r3, r1
     72c:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     72e:	7c31      	ldrb	r1, [r6, #16]
     730:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     732:	7c71      	ldrb	r1, [r6, #17]
     734:	2900      	cmp	r1, #0
     736:	d103      	bne.n	740 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     738:	491b      	ldr	r1, [pc, #108]	; (7a8 <spi_init+0x210>)
     73a:	7889      	ldrb	r1, [r1, #2]
     73c:	0789      	lsls	r1, r1, #30
     73e:	d501      	bpl.n	744 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     740:	2180      	movs	r1, #128	; 0x80
     742:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     744:	7cb1      	ldrb	r1, [r6, #18]
     746:	2900      	cmp	r1, #0
     748:	d002      	beq.n	750 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     74a:	2180      	movs	r1, #128	; 0x80
     74c:	0289      	lsls	r1, r1, #10
     74e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     750:	7cf1      	ldrb	r1, [r6, #19]
     752:	2900      	cmp	r1, #0
     754:	d002      	beq.n	75c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     756:	2180      	movs	r1, #128	; 0x80
     758:	0089      	lsls	r1, r1, #2
     75a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     75c:	7d31      	ldrb	r1, [r6, #20]
     75e:	2900      	cmp	r1, #0
     760:	d002      	beq.n	768 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     762:	2180      	movs	r1, #128	; 0x80
     764:	0189      	lsls	r1, r1, #6
     766:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     768:	6839      	ldr	r1, [r7, #0]
     76a:	430b      	orrs	r3, r1
     76c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
     76e:	687b      	ldr	r3, [r7, #4]
     770:	431a      	orrs	r2, r3
     772:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
     774:	2000      	movs	r0, #0
     776:	e719      	b.n	5ac <spi_init+0x14>
     778:	00001f99 	.word	0x00001f99
     77c:	40000400 	.word	0x40000400
     780:	00002b3d 	.word	0x00002b3d
     784:	00002ab1 	.word	0x00002ab1
     788:	00001dd5 	.word	0x00001dd5
     78c:	00000ab1 	.word	0x00000ab1
     790:	00001fd5 	.word	0x00001fd5
     794:	2000053c 	.word	0x2000053c
     798:	00001e21 	.word	0x00001e21
     79c:	00002c35 	.word	0x00002c35
     7a0:	00002b59 	.word	0x00002b59
     7a4:	00001d17 	.word	0x00001d17
     7a8:	41002000 	.word	0x41002000

000007ac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     7ac:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     7ae:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     7b0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     7b2:	2c01      	cmp	r4, #1
     7b4:	d001      	beq.n	7ba <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     7b6:	0018      	movs	r0, r3
     7b8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     7ba:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     7bc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     7be:	2c00      	cmp	r4, #0
     7c0:	d1f9      	bne.n	7b6 <spi_select_slave+0xa>
		if (select) {
     7c2:	2a00      	cmp	r2, #0
     7c4:	d058      	beq.n	878 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     7c6:	784b      	ldrb	r3, [r1, #1]
     7c8:	2b00      	cmp	r3, #0
     7ca:	d044      	beq.n	856 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     7cc:	6803      	ldr	r3, [r0, #0]
     7ce:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     7d0:	07db      	lsls	r3, r3, #31
     7d2:	d410      	bmi.n	7f6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     7d4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     7d6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7d8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7da:	2900      	cmp	r1, #0
     7dc:	d104      	bne.n	7e8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     7de:	0953      	lsrs	r3, r2, #5
     7e0:	01db      	lsls	r3, r3, #7
     7e2:	492e      	ldr	r1, [pc, #184]	; (89c <spi_select_slave+0xf0>)
     7e4:	468c      	mov	ip, r1
     7e6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7e8:	211f      	movs	r1, #31
     7ea:	4011      	ands	r1, r2
     7ec:	2201      	movs	r2, #1
     7ee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     7f0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     7f2:	2305      	movs	r3, #5
     7f4:	e7df      	b.n	7b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     7f6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     7f8:	09d4      	lsrs	r4, r2, #7
		return NULL;
     7fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7fc:	2c00      	cmp	r4, #0
     7fe:	d104      	bne.n	80a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     800:	0953      	lsrs	r3, r2, #5
     802:	01db      	lsls	r3, r3, #7
     804:	4c25      	ldr	r4, [pc, #148]	; (89c <spi_select_slave+0xf0>)
     806:	46a4      	mov	ip, r4
     808:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     80a:	241f      	movs	r4, #31
     80c:	4014      	ands	r4, r2
     80e:	2201      	movs	r2, #1
     810:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
     812:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     814:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     816:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     818:	07d2      	lsls	r2, r2, #31
     81a:	d501      	bpl.n	820 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     81c:	788a      	ldrb	r2, [r1, #2]
     81e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     820:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     822:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     824:	2a00      	cmp	r2, #0
     826:	d1c6      	bne.n	7b6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     828:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     82a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     82c:	7e13      	ldrb	r3, [r2, #24]
     82e:	420b      	tst	r3, r1
     830:	d0fc      	beq.n	82c <spi_select_slave+0x80>
     832:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     834:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     836:	0749      	lsls	r1, r1, #29
     838:	d5bd      	bpl.n	7b6 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     83a:	8b53      	ldrh	r3, [r2, #26]
     83c:	075b      	lsls	r3, r3, #29
     83e:	d501      	bpl.n	844 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     840:	2304      	movs	r3, #4
     842:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     844:	7983      	ldrb	r3, [r0, #6]
     846:	2b01      	cmp	r3, #1
     848:	d002      	beq.n	850 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     84a:	6a93      	ldr	r3, [r2, #40]	; 0x28
     84c:	2300      	movs	r3, #0
     84e:	e7b2      	b.n	7b6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     850:	6a93      	ldr	r3, [r2, #40]	; 0x28
     852:	2300      	movs	r3, #0
     854:	e7af      	b.n	7b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     856:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     858:	09d1      	lsrs	r1, r2, #7
		return NULL;
     85a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     85c:	2900      	cmp	r1, #0
     85e:	d104      	bne.n	86a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     860:	0953      	lsrs	r3, r2, #5
     862:	01db      	lsls	r3, r3, #7
     864:	490d      	ldr	r1, [pc, #52]	; (89c <spi_select_slave+0xf0>)
     866:	468c      	mov	ip, r1
     868:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     86a:	211f      	movs	r1, #31
     86c:	4011      	ands	r1, r2
     86e:	2201      	movs	r2, #1
     870:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     872:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     874:	2300      	movs	r3, #0
     876:	e79e      	b.n	7b6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     878:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     87a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     87c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     87e:	2900      	cmp	r1, #0
     880:	d104      	bne.n	88c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     882:	0953      	lsrs	r3, r2, #5
     884:	01db      	lsls	r3, r3, #7
     886:	4905      	ldr	r1, [pc, #20]	; (89c <spi_select_slave+0xf0>)
     888:	468c      	mov	ip, r1
     88a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     88c:	211f      	movs	r1, #31
     88e:	4011      	ands	r1, r2
     890:	2201      	movs	r2, #1
     892:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     894:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     896:	2300      	movs	r3, #0
     898:	e78d      	b.n	7b6 <spi_select_slave+0xa>
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	41004400 	.word	0x41004400

000008a0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a2:	46de      	mov	lr, fp
     8a4:	4657      	mov	r7, sl
     8a6:	464e      	mov	r6, r9
     8a8:	4645      	mov	r5, r8
     8aa:	b5e0      	push	{r5, r6, r7, lr}
     8ac:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     8ae:	2338      	movs	r3, #56	; 0x38
     8b0:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     8b2:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
     8b4:	2c05      	cmp	r4, #5
     8b6:	d002      	beq.n	8be <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     8b8:	3312      	adds	r3, #18
	if (length == 0) {
     8ba:	2a00      	cmp	r2, #0
     8bc:	d107      	bne.n	8ce <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
     8be:	0018      	movs	r0, r3
     8c0:	b003      	add	sp, #12
     8c2:	bc3c      	pop	{r2, r3, r4, r5}
     8c4:	4690      	mov	r8, r2
     8c6:	4699      	mov	r9, r3
     8c8:	46a2      	mov	sl, r4
     8ca:	46ab      	mov	fp, r5
     8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     8ce:	7943      	ldrb	r3, [r0, #5]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d103      	bne.n	8dc <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8d4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     8d6:	7e1c      	ldrb	r4, [r3, #24]
     8d8:	07a4      	lsls	r4, r4, #30
     8da:	d40a      	bmi.n	8f2 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
     8dc:	4693      	mov	fp, r2
     8de:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
     8e0:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
     8e2:	2502      	movs	r5, #2
     8e4:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
     8e6:	3502      	adds	r5, #2
     8e8:	46a8      	mov	r8, r5
     8ea:	3a01      	subs	r2, #1
     8ec:	b292      	uxth	r2, r2
     8ee:	468a      	mov	sl, r1
     8f0:	e023      	b.n	93a <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     8f2:	2402      	movs	r4, #2
     8f4:	761c      	strb	r4, [r3, #24]
     8f6:	e7f1      	b.n	8dc <spi_write_buffer_wait+0x3c>
     8f8:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
     8fa:	4661      	mov	r1, ip
     8fc:	420d      	tst	r5, r1
     8fe:	d12e      	bne.n	95e <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     900:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
     902:	421d      	tst	r5, r3
     904:	d100      	bne.n	908 <spi_write_buffer_wait+0x68>
     906:	e0c2      	b.n	a8e <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
     908:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     90a:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
     90c:	421d      	tst	r5, r3
     90e:	d0fc      	beq.n	90a <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
     910:	1c67      	adds	r7, r4, #1
     912:	b2bf      	uxth	r7, r7
     914:	4651      	mov	r1, sl
     916:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     918:	7981      	ldrb	r1, [r0, #6]
     91a:	2901      	cmp	r1, #1
     91c:	d023      	beq.n	966 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
     91e:	b2ad      	uxth	r5, r5
     920:	003c      	movs	r4, r7
     922:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
     924:	421f      	tst	r7, r3
     926:	d002      	beq.n	92e <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     928:	05ed      	lsls	r5, r5, #23
     92a:	0ded      	lsrs	r5, r5, #23
     92c:	62b5      	str	r5, [r6, #40]	; 0x28
     92e:	1e55      	subs	r5, r2, #1
     930:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
     932:	79c6      	ldrb	r6, [r0, #7]
     934:	2e00      	cmp	r6, #0
     936:	d11d      	bne.n	974 <spi_write_buffer_wait+0xd4>
     938:	002a      	movs	r2, r5
	while (length--) {
     93a:	4d5a      	ldr	r5, [pc, #360]	; (aa4 <spi_write_buffer_wait+0x204>)
     93c:	42aa      	cmp	r2, r5
     93e:	d070      	beq.n	a22 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
     940:	7945      	ldrb	r5, [r0, #5]
     942:	2d00      	cmp	r5, #0
     944:	d1e0      	bne.n	908 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
     946:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     948:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
     94a:	421d      	tst	r5, r3
     94c:	d1d4      	bne.n	8f8 <spi_write_buffer_wait+0x58>
     94e:	4d56      	ldr	r5, [pc, #344]	; (aa8 <spi_write_buffer_wait+0x208>)
     950:	7e37      	ldrb	r7, [r6, #24]
     952:	421f      	tst	r7, r3
     954:	d1d0      	bne.n	8f8 <spi_write_buffer_wait+0x58>
     956:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     958:	2d00      	cmp	r5, #0
     95a:	d1f9      	bne.n	950 <spi_write_buffer_wait+0xb0>
     95c:	e7cc      	b.n	8f8 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     95e:	2302      	movs	r3, #2
     960:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
     962:	3302      	adds	r3, #2
     964:	e7ab      	b.n	8be <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
     966:	3402      	adds	r4, #2
     968:	b2a4      	uxth	r4, r4
     96a:	4651      	mov	r1, sl
     96c:	5dcf      	ldrb	r7, [r1, r7]
     96e:	023f      	lsls	r7, r7, #8
     970:	433d      	orrs	r5, r7
     972:	e7d6      	b.n	922 <spi_write_buffer_wait+0x82>
     974:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
     976:	7945      	ldrb	r5, [r0, #5]
     978:	2d00      	cmp	r5, #0
     97a:	d137      	bne.n	9ec <spi_write_buffer_wait+0x14c>
     97c:	4d4b      	ldr	r5, [pc, #300]	; (aac <spi_write_buffer_wait+0x20c>)
     97e:	9101      	str	r1, [sp, #4]
     980:	e012      	b.n	9a8 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
     982:	3402      	adds	r4, #2
     984:	b2a4      	uxth	r4, r4
     986:	4649      	mov	r1, r9
     988:	9f01      	ldr	r7, [sp, #4]
     98a:	5c79      	ldrb	r1, [r7, r1]
     98c:	0209      	lsls	r1, r1, #8
     98e:	9f00      	ldr	r7, [sp, #0]
     990:	430f      	orrs	r7, r1
     992:	e01b      	b.n	9cc <spi_write_buffer_wait+0x12c>
						length--;
     994:	3a01      	subs	r2, #1
     996:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
     998:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     99a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
     99c:	4641      	mov	r1, r8
     99e:	420f      	tst	r7, r1
     9a0:	d11b      	bne.n	9da <spi_write_buffer_wait+0x13a>
     9a2:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     9a4:	2d00      	cmp	r5, #0
     9a6:	d018      	beq.n	9da <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
     9a8:	2a00      	cmp	r2, #0
     9aa:	d0f5      	beq.n	998 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
     9ac:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9ae:	7e37      	ldrb	r7, [r6, #24]
     9b0:	421f      	tst	r7, r3
     9b2:	d0f1      	beq.n	998 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
     9b4:	1c67      	adds	r7, r4, #1
     9b6:	b2b9      	uxth	r1, r7
     9b8:	4689      	mov	r9, r1
     9ba:	9901      	ldr	r1, [sp, #4]
     9bc:	5d09      	ldrb	r1, [r1, r4]
     9be:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9c0:	7981      	ldrb	r1, [r0, #6]
     9c2:	2901      	cmp	r1, #1
     9c4:	d0dd      	beq.n	982 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
     9c6:	4669      	mov	r1, sp
     9c8:	880f      	ldrh	r7, [r1, #0]
     9ca:	464c      	mov	r4, r9
     9cc:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
     9ce:	4219      	tst	r1, r3
     9d0:	d0e0      	beq.n	994 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     9d2:	05ff      	lsls	r7, r7, #23
     9d4:	0dff      	lsrs	r7, r7, #23
     9d6:	62b7      	str	r7, [r6, #40]	; 0x28
     9d8:	e7dc      	b.n	994 <spi_write_buffer_wait+0xf4>
     9da:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     9dc:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
     9de:	4667      	mov	r7, ip
     9e0:	423d      	tst	r5, r7
     9e2:	d118      	bne.n	a16 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9e4:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
     9e6:	4646      	mov	r6, r8
     9e8:	4235      	tst	r5, r6
     9ea:	d052      	beq.n	a92 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
     9ec:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9ee:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
     9f0:	4647      	mov	r7, r8
     9f2:	423d      	tst	r5, r7
     9f4:	d0fb      	beq.n	9ee <spi_write_buffer_wait+0x14e>
     9f6:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
     9f8:	423d      	tst	r5, r7
     9fa:	d007      	beq.n	a0c <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9fc:	8b75      	ldrh	r5, [r6, #26]
     9fe:	423d      	tst	r5, r7
     a00:	d000      	beq.n	a04 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     a02:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a04:	7985      	ldrb	r5, [r0, #6]
     a06:	2d01      	cmp	r5, #1
     a08:	d009      	beq.n	a1e <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a0a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
     a0c:	465d      	mov	r5, fp
     a0e:	3d01      	subs	r5, #1
     a10:	b2ad      	uxth	r5, r5
     a12:	46ab      	mov	fp, r5
     a14:	e769      	b.n	8ea <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a16:	2302      	movs	r3, #2
     a18:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
     a1a:	3302      	adds	r3, #2
     a1c:	e74f      	b.n	8be <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a1e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
     a20:	e7f4      	b.n	a0c <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
     a22:	7943      	ldrb	r3, [r0, #5]
     a24:	2b01      	cmp	r3, #1
     a26:	d00b      	beq.n	a40 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
     a28:	2b00      	cmp	r3, #0
     a2a:	d134      	bne.n	a96 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
     a2c:	79c2      	ldrb	r2, [r0, #7]
     a2e:	2a00      	cmp	r2, #0
     a30:	d100      	bne.n	a34 <spi_write_buffer_wait+0x194>
     a32:	e744      	b.n	8be <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
     a34:	2404      	movs	r4, #4
			while (flush_length) {
     a36:	465b      	mov	r3, fp
     a38:	465d      	mov	r5, fp
     a3a:	2b00      	cmp	r3, #0
     a3c:	d119      	bne.n	a72 <spi_write_buffer_wait+0x1d2>
     a3e:	e73e      	b.n	8be <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
     a40:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
     a42:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     a44:	7e0b      	ldrb	r3, [r1, #24]
     a46:	4213      	tst	r3, r2
     a48:	d0fc      	beq.n	a44 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
     a4a:	2300      	movs	r3, #0
     a4c:	e737      	b.n	8be <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a4e:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
     a50:	4223      	tst	r3, r4
     a52:	d022      	beq.n	a9a <spi_write_buffer_wait+0x1fa>
     a54:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
     a56:	4223      	tst	r3, r4
     a58:	d007      	beq.n	a6a <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a5a:	8b4b      	ldrh	r3, [r1, #26]
     a5c:	4223      	tst	r3, r4
     a5e:	d000      	beq.n	a62 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     a60:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a62:	7983      	ldrb	r3, [r0, #6]
     a64:	2b01      	cmp	r3, #1
     a66:	d010      	beq.n	a8a <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
     a6a:	3d01      	subs	r5, #1
     a6c:	b2ad      	uxth	r5, r5
			while (flush_length) {
     a6e:	2d00      	cmp	r5, #0
     a70:	d015      	beq.n	a9e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
     a72:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a74:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
     a76:	4223      	tst	r3, r4
     a78:	d1e9      	bne.n	a4e <spi_write_buffer_wait+0x1ae>
     a7a:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <spi_write_buffer_wait+0x208>)
     a7c:	7e0a      	ldrb	r2, [r1, #24]
     a7e:	4222      	tst	r2, r4
     a80:	d1e5      	bne.n	a4e <spi_write_buffer_wait+0x1ae>
     a82:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     a84:	2b00      	cmp	r3, #0
     a86:	d1f9      	bne.n	a7c <spi_write_buffer_wait+0x1dc>
     a88:	e7e1      	b.n	a4e <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     a8c:	e7ed      	b.n	a6a <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
     a8e:	2312      	movs	r3, #18
     a90:	e715      	b.n	8be <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
     a92:	2312      	movs	r3, #18
     a94:	e713      	b.n	8be <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
     a96:	2300      	movs	r3, #0
     a98:	e711      	b.n	8be <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
     a9a:	2312      	movs	r3, #18
     a9c:	e70f      	b.n	8be <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
     a9e:	2300      	movs	r3, #0
     aa0:	e70d      	b.n	8be <spi_write_buffer_wait+0x1e>
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	0000ffff 	.word	0x0000ffff
     aa8:	00002710 	.word	0x00002710
     aac:	00002711 	.word	0x00002711

00000ab0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
     ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
     ab2:	0080      	lsls	r0, r0, #2
     ab4:	4b85      	ldr	r3, [pc, #532]	; (ccc <_spi_interrupt_handler+0x21c>)
     ab6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ab8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     aba:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
     abc:	5ce3      	ldrb	r3, [r4, r3]
     abe:	2236      	movs	r2, #54	; 0x36
     ac0:	5ca7      	ldrb	r7, [r4, r2]
     ac2:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
     ac4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
     ac6:	7db5      	ldrb	r5, [r6, #22]
     ac8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
     aca:	07eb      	lsls	r3, r5, #31
     acc:	d52e      	bpl.n	b2c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     ace:	7963      	ldrb	r3, [r4, #5]
     ad0:	2b01      	cmp	r3, #1
     ad2:	d025      	beq.n	b20 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ad4:	2b00      	cmp	r3, #0
     ad6:	d129      	bne.n	b2c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
     ad8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
     ada:	2b00      	cmp	r3, #0
     adc:	d026      	beq.n	b2c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     ade:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     ae0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     ae2:	7813      	ldrb	r3, [r2, #0]
     ae4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
     ae6:	1c50      	adds	r0, r2, #1
     ae8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     aea:	79a0      	ldrb	r0, [r4, #6]
     aec:	2801      	cmp	r0, #1
     aee:	d100      	bne.n	af2 <_spi_interrupt_handler+0x42>
     af0:	e069      	b.n	bc6 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
     af2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
     af4:	05db      	lsls	r3, r3, #23
     af6:	0ddb      	lsrs	r3, r3, #23
     af8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
     afa:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     afc:	3b01      	subs	r3, #1
     afe:	b29b      	uxth	r3, r3
     b00:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
     b02:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
     b04:	b29b      	uxth	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	d110      	bne.n	b2c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     b0a:	3301      	adds	r3, #1
     b0c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
     b0e:	7a63      	ldrb	r3, [r4, #9]
     b10:	2b01      	cmp	r3, #1
     b12:	d10b      	bne.n	b2c <_spi_interrupt_handler+0x7c>
     b14:	79e3      	ldrb	r3, [r4, #7]
     b16:	2b00      	cmp	r3, #0
     b18:	d108      	bne.n	b2c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     b1a:	3302      	adds	r3, #2
     b1c:	75b3      	strb	r3, [r6, #22]
     b1e:	e005      	b.n	b2c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
     b20:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     b22:	2b00      	cmp	r3, #0
     b24:	d03e      	beq.n	ba4 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
     b26:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
     b28:	2b00      	cmp	r3, #0
     b2a:	d1d8      	bne.n	ade <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
     b2c:	076b      	lsls	r3, r5, #29
     b2e:	d511      	bpl.n	b54 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b30:	8b73      	ldrh	r3, [r6, #26]
     b32:	075b      	lsls	r3, r3, #29
     b34:	d551      	bpl.n	bda <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
     b36:	7a63      	ldrb	r3, [r4, #9]
     b38:	2b01      	cmp	r3, #1
     b3a:	d008      	beq.n	b4e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
     b3c:	221e      	movs	r2, #30
     b3e:	2338      	movs	r3, #56	; 0x38
     b40:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
     b42:	3b35      	subs	r3, #53	; 0x35
     b44:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
     b46:	3302      	adds	r3, #2
     b48:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
     b4a:	073b      	lsls	r3, r7, #28
     b4c:	d441      	bmi.n	bd2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
     b4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     b50:	2304      	movs	r3, #4
     b52:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
     b54:	07ab      	lsls	r3, r5, #30
     b56:	d515      	bpl.n	b84 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
     b58:	7963      	ldrb	r3, [r4, #5]
     b5a:	2b00      	cmp	r3, #0
     b5c:	d10e      	bne.n	b7c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
     b5e:	3307      	adds	r3, #7
     b60:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     b62:	3b05      	subs	r3, #5
     b64:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
     b66:	3301      	adds	r3, #1
     b68:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
     b6a:	2300      	movs	r3, #0
     b6c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
     b6e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
     b70:	3338      	adds	r3, #56	; 0x38
     b72:	2200      	movs	r2, #0
     b74:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
     b76:	06fb      	lsls	r3, r7, #27
     b78:	d500      	bpl.n	b7c <_spi_interrupt_handler+0xcc>
     b7a:	e07f      	b.n	c7c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
     b7c:	7963      	ldrb	r3, [r4, #5]
     b7e:	2b01      	cmp	r3, #1
     b80:	d100      	bne.n	b84 <_spi_interrupt_handler+0xd4>
     b82:	e07f      	b.n	c84 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
     b84:	072b      	lsls	r3, r5, #28
     b86:	d508      	bpl.n	b9a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
     b88:	7963      	ldrb	r3, [r4, #5]
     b8a:	2b00      	cmp	r3, #0
     b8c:	d105      	bne.n	b9a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b8e:	3308      	adds	r3, #8
     b90:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
     b92:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
     b94:	06bb      	lsls	r3, r7, #26
     b96:	d500      	bpl.n	b9a <_spi_interrupt_handler+0xea>
     b98:	e08a      	b.n	cb0 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
     b9a:	b26d      	sxtb	r5, r5
     b9c:	2d00      	cmp	r5, #0
     b9e:	da00      	bge.n	ba2 <_spi_interrupt_handler+0xf2>
     ba0:	e08a      	b.n	cb8 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
     ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
     ba4:	4b4a      	ldr	r3, [pc, #296]	; (cd0 <_spi_interrupt_handler+0x220>)
     ba6:	881b      	ldrh	r3, [r3, #0]
     ba8:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     baa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     bac:	3b01      	subs	r3, #1
     bae:	b29b      	uxth	r3, r3
     bb0:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
     bb2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     bb4:	b29b      	uxth	r3, r3
     bb6:	2b00      	cmp	r3, #0
     bb8:	d101      	bne.n	bbe <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
     bba:	3301      	adds	r3, #1
     bbc:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
     bbe:	7963      	ldrb	r3, [r4, #5]
		if (0
     bc0:	2b01      	cmp	r3, #1
     bc2:	d0b0      	beq.n	b26 <_spi_interrupt_handler+0x76>
     bc4:	e786      	b.n	ad4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
     bc6:	7850      	ldrb	r0, [r2, #1]
     bc8:	0200      	lsls	r0, r0, #8
     bca:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
     bcc:	3202      	adds	r2, #2
     bce:	62e2      	str	r2, [r4, #44]	; 0x2c
     bd0:	e790      	b.n	af4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
     bd2:	0020      	movs	r0, r4
     bd4:	69a3      	ldr	r3, [r4, #24]
     bd6:	4798      	blx	r3
     bd8:	e7b9      	b.n	b4e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
     bda:	7a63      	ldrb	r3, [r4, #9]
     bdc:	2b01      	cmp	r3, #1
     bde:	d027      	beq.n	c30 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     be0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
     be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     be4:	05db      	lsls	r3, r3, #23
     be6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
     be8:	b2da      	uxtb	r2, r3
     bea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     bec:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
     bee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     bf0:	1c51      	adds	r1, r2, #1
     bf2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bf4:	79a1      	ldrb	r1, [r4, #6]
     bf6:	2901      	cmp	r1, #1
     bf8:	d033      	beq.n	c62 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
     bfa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     bfc:	3b01      	subs	r3, #1
     bfe:	b29b      	uxth	r3, r3
     c00:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
     c02:	8e23      	ldrh	r3, [r4, #48]	; 0x30
     c04:	b29b      	uxth	r3, r3
     c06:	2b00      	cmp	r3, #0
     c08:	d1a4      	bne.n	b54 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
     c0a:	2200      	movs	r2, #0
     c0c:	3338      	adds	r3, #56	; 0x38
     c0e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     c10:	3b34      	subs	r3, #52	; 0x34
     c12:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
     c14:	7a63      	ldrb	r3, [r4, #9]
     c16:	2b02      	cmp	r3, #2
     c18:	d029      	beq.n	c6e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
     c1a:	7a63      	ldrb	r3, [r4, #9]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d000      	beq.n	c22 <_spi_interrupt_handler+0x172>
     c20:	e798      	b.n	b54 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
     c22:	07bb      	lsls	r3, r7, #30
     c24:	d400      	bmi.n	c28 <_spi_interrupt_handler+0x178>
     c26:	e795      	b.n	b54 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
     c28:	0020      	movs	r0, r4
     c2a:	6923      	ldr	r3, [r4, #16]
     c2c:	4798      	blx	r3
     c2e:	e791      	b.n	b54 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
     c30:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
     c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
     c34:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c36:	3b01      	subs	r3, #1
     c38:	b29b      	uxth	r3, r3
     c3a:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
     c3c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
     c3e:	b29b      	uxth	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	d000      	beq.n	c46 <_spi_interrupt_handler+0x196>
     c44:	e786      	b.n	b54 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
     c46:	3304      	adds	r3, #4
     c48:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
     c4a:	2200      	movs	r2, #0
     c4c:	3334      	adds	r3, #52	; 0x34
     c4e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
     c50:	3b35      	subs	r3, #53	; 0x35
     c52:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
     c54:	07fb      	lsls	r3, r7, #31
     c56:	d400      	bmi.n	c5a <_spi_interrupt_handler+0x1aa>
     c58:	e77c      	b.n	b54 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
     c5a:	0020      	movs	r0, r4
     c5c:	68e3      	ldr	r3, [r4, #12]
     c5e:	4798      	blx	r3
     c60:	e778      	b.n	b54 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
     c62:	0a1b      	lsrs	r3, r3, #8
     c64:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
     c66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     c68:	3301      	adds	r3, #1
     c6a:	62a3      	str	r3, [r4, #40]	; 0x28
     c6c:	e7c5      	b.n	bfa <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
     c6e:	077b      	lsls	r3, r7, #29
     c70:	d400      	bmi.n	c74 <_spi_interrupt_handler+0x1c4>
     c72:	e76f      	b.n	b54 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
     c74:	0020      	movs	r0, r4
     c76:	6963      	ldr	r3, [r4, #20]
     c78:	4798      	blx	r3
     c7a:	e76b      	b.n	b54 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
     c7c:	0020      	movs	r0, r4
     c7e:	69e3      	ldr	r3, [r4, #28]
     c80:	4798      	blx	r3
     c82:	e77b      	b.n	b7c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     c84:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
     c86:	2b01      	cmp	r3, #1
     c88:	d000      	beq.n	c8c <_spi_interrupt_handler+0x1dc>
     c8a:	e786      	b.n	b9a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
     c8c:	79e3      	ldrb	r3, [r4, #7]
     c8e:	2b00      	cmp	r3, #0
     c90:	d000      	beq.n	c94 <_spi_interrupt_handler+0x1e4>
     c92:	e782      	b.n	b9a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     c94:	3302      	adds	r3, #2
     c96:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
     c98:	3301      	adds	r3, #1
     c9a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
     c9c:	2200      	movs	r2, #0
     c9e:	3335      	adds	r3, #53	; 0x35
     ca0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
     ca2:	07fb      	lsls	r3, r7, #31
     ca4:	d400      	bmi.n	ca8 <_spi_interrupt_handler+0x1f8>
     ca6:	e76d      	b.n	b84 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
     ca8:	0020      	movs	r0, r4
     caa:	68e3      	ldr	r3, [r4, #12]
     cac:	4798      	blx	r3
     cae:	e769      	b.n	b84 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
     cb0:	0020      	movs	r0, r4
     cb2:	6a23      	ldr	r3, [r4, #32]
     cb4:	4798      	blx	r3
     cb6:	e770      	b.n	b9a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     cb8:	2380      	movs	r3, #128	; 0x80
     cba:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
     cbc:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
     cbe:	067b      	lsls	r3, r7, #25
     cc0:	d400      	bmi.n	cc4 <_spi_interrupt_handler+0x214>
     cc2:	e76e      	b.n	ba2 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
     cc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
     cc6:	0020      	movs	r0, r4
     cc8:	4798      	blx	r3
}
     cca:	e76a      	b.n	ba2 <_spi_interrupt_handler+0xf2>
     ccc:	2000053c 	.word	0x2000053c
     cd0:	200003d8 	.word	0x200003d8

00000cd4 <init_OLED_display>:
 *  Inicializa o display com tudo e seta os spinners.
 *
 * \param spinners um ponteiro da estrutura gfx_mono_spinctrl_spincollection
 *
 */
void init_OLED_display(struct gfx_mono_spinctrl_spincollection *spinners){
     cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd6:	b087      	sub	sp, #28
     cd8:	9005      	str	r0, [sp, #20]

	//Inicializa o GFX
	gfx_mono_init();
     cda:	4b18      	ldr	r3, [pc, #96]	; (d3c <init_OLED_display+0x68>)
     cdc:	4798      	blx	r3

	// Initialize spinners
	gfx_mono_spinctrl_init(&modo, SPINTYPE_STRING, spinner_modo,
     cde:	4f18      	ldr	r7, [pc, #96]	; (d40 <init_OLED_display+0x6c>)
     ce0:	2500      	movs	r5, #0
     ce2:	9502      	str	r5, [sp, #8]
     ce4:	2602      	movs	r6, #2
     ce6:	9601      	str	r6, [sp, #4]
     ce8:	9500      	str	r5, [sp, #0]
     cea:	4b16      	ldr	r3, [pc, #88]	; (d44 <init_OLED_display+0x70>)
     cec:	4a16      	ldr	r2, [pc, #88]	; (d48 <init_OLED_display+0x74>)
     cee:	2100      	movs	r1, #0
     cf0:	0038      	movs	r0, r7
     cf2:	4c16      	ldr	r4, [pc, #88]	; (d4c <init_OLED_display+0x78>)
     cf4:	47a0      	blx	r4
	spinner_choices_modo, 0, 2, 0); //Titulo do modo, com as 3 opcoes do modo.
	gfx_mono_spinctrl_init(&agua, SPINTYPE_STRING, spinner_agua,
     cf6:	9502      	str	r5, [sp, #8]
     cf8:	9601      	str	r6, [sp, #4]
     cfa:	9500      	str	r5, [sp, #0]
     cfc:	4b14      	ldr	r3, [pc, #80]	; (d50 <init_OLED_display+0x7c>)
     cfe:	4a15      	ldr	r2, [pc, #84]	; (d54 <init_OLED_display+0x80>)
     d00:	2100      	movs	r1, #0
     d02:	4815      	ldr	r0, [pc, #84]	; (d58 <init_OLED_display+0x84>)
     d04:	47a0      	blx	r4
	spinner_choices_agua, 0, 2, 0); //Titulo do modo, com as 3 opcoes do modo.
	gfx_mono_spinctrl_init(&secar, SPINTYPE_STRING, spinner_secar,
     d06:	9502      	str	r5, [sp, #8]
     d08:	9601      	str	r6, [sp, #4]
     d0a:	9500      	str	r5, [sp, #0]
     d0c:	4b13      	ldr	r3, [pc, #76]	; (d5c <init_OLED_display+0x88>)
     d0e:	4a14      	ldr	r2, [pc, #80]	; (d60 <init_OLED_display+0x8c>)
     d10:	2100      	movs	r1, #0
     d12:	4814      	ldr	r0, [pc, #80]	; (d64 <init_OLED_display+0x90>)
     d14:	47a0      	blx	r4
	spinner_choices_secar, 0, 2, 0); //Titulo do modo, com as 3 opcoes do modo.

	// Initialize spincollection
	gfx_mono_spinctrl_spincollection_init(spinners);
     d16:	9c05      	ldr	r4, [sp, #20]
     d18:	0020      	movs	r0, r4
     d1a:	4b13      	ldr	r3, [pc, #76]	; (d68 <init_OLED_display+0x94>)
     d1c:	4798      	blx	r3
	//gfx_mono_spinctrl_spincollection_init(&agua_collection);
	//gfx_mono_spinctrl_spincollection_init(&secar_collection);

	// Add spinners to spincollection
	gfx_mono_spinctrl_spincollection_add_spinner(&modo, spinners);
     d1e:	0021      	movs	r1, r4
     d20:	0038      	movs	r0, r7
     d22:	4f12      	ldr	r7, [pc, #72]	; (d6c <init_OLED_display+0x98>)
     d24:	47b8      	blx	r7
	gfx_mono_spinctrl_spincollection_add_spinner(&agua, spinners);
     d26:	0021      	movs	r1, r4
     d28:	480b      	ldr	r0, [pc, #44]	; (d58 <init_OLED_display+0x84>)
     d2a:	47b8      	blx	r7
	gfx_mono_spinctrl_spincollection_add_spinner(&secar, spinners);
     d2c:	0021      	movs	r1, r4
     d2e:	480d      	ldr	r0, [pc, #52]	; (d64 <init_OLED_display+0x90>)
     d30:	47b8      	blx	r7

	// Show spincollection on screen
	gfx_mono_spinctrl_spincollection_show(spinners);
     d32:	0020      	movs	r0, r4
     d34:	4b0e      	ldr	r3, [pc, #56]	; (d70 <init_OLED_display+0x9c>)
     d36:	4798      	blx	r3

}
     d38:	b007      	add	sp, #28
     d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3c:	000004d9 	.word	0x000004d9
     d40:	200003fc 	.word	0x200003fc
     d44:	20000014 	.word	0x20000014
     d48:	00004990 	.word	0x00004990
     d4c:	0000152d 	.word	0x0000152d
     d50:	20000008 	.word	0x20000008
     d54:	00004988 	.word	0x00004988
     d58:	200003dc 	.word	0x200003dc
     d5c:	20000020 	.word	0x20000020
     d60:	00004998 	.word	0x00004998
     d64:	2000041c 	.word	0x2000041c
     d68:	0000155d 	.word	0x0000155d
     d6c:	0000156b 	.word	0x0000156b
     d70:	000015a1 	.word	0x000015a1

00000d74 <mostraMenuDisplay>:

/*! \brief Mostra o menu no display
 *  \param spinners um ponteiro da estrutura gfx_mono_spinctrl_spincollection
 */
void mostraMenuDisplay (struct gfx_mono_spinctrl_spincollection *spinners){
     d74:	b510      	push	{r4, lr}
	// Show spincollection on screen
	gfx_mono_spinctrl_spincollection_show(spinners);
     d76:	4b01      	ldr	r3, [pc, #4]	; (d7c <mostraMenuDisplay+0x8>)
     d78:	4798      	blx	r3
}
     d7a:	bd10      	pop	{r4, pc}
     d7c:	000015a1 	.word	0x000015a1

00000d80 <clearDisplay>:

/*! \brief Limpa display
 *  Reinicia o display. Portanto, apaga a tela atual.
 */
void clearDisplay (void){
     d80:	b510      	push	{r4, lr}
		gfx_mono_init();
     d82:	4b01      	ldr	r3, [pc, #4]	; (d88 <clearDisplay+0x8>)
     d84:	4798      	blx	r3
}
     d86:	bd10      	pop	{r4, pc}
     d88:	000004d9 	.word	0x000004d9

00000d8c <clearLine>:

/*! \brief Limpa uma linha do display
 *  \param Y uma variável do tipo gfx_coord_t
 *  \param X uma variável do tipo gfx_coord_t
 */
void clearLine (gfx_coord_t Y, gfx_coord_t X){
     d8c:	b510      	push	{r4, lr}
     d8e:	0002      	movs	r2, r0
	gfx_mono_draw_string("                      ", X, Y, &sysfont);
     d90:	4b02      	ldr	r3, [pc, #8]	; (d9c <clearLine+0x10>)
     d92:	4803      	ldr	r0, [pc, #12]	; (da0 <clearLine+0x14>)
     d94:	4c03      	ldr	r4, [pc, #12]	; (da4 <clearLine+0x18>)
     d96:	47a0      	blx	r4
}
     d98:	bd10      	pop	{r4, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	2000003c 	.word	0x2000003c
     da0:	000048c0 	.word	0x000048c0
     da4:	00001955 	.word	0x00001955

00000da8 <printString>:

void printString (const char* string, gfx_coord_t X, gfx_coord_t Y){
     da8:	b570      	push	{r4, r5, r6, lr}
     daa:	0005      	movs	r5, r0
     dac:	000e      	movs	r6, r1
     dae:	0014      	movs	r4, r2
    clearLine(Y, 0);
     db0:	2100      	movs	r1, #0
     db2:	0010      	movs	r0, r2
     db4:	4b04      	ldr	r3, [pc, #16]	; (dc8 <printString+0x20>)
     db6:	4798      	blx	r3
	gfx_mono_draw_string(string, X, Y, &sysfont);
     db8:	4b04      	ldr	r3, [pc, #16]	; (dcc <printString+0x24>)
     dba:	0022      	movs	r2, r4
     dbc:	0031      	movs	r1, r6
     dbe:	0028      	movs	r0, r5
     dc0:	4c03      	ldr	r4, [pc, #12]	; (dd0 <printString+0x28>)
     dc2:	47a0      	blx	r4
}
     dc4:	bd70      	pop	{r4, r5, r6, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	00000d8d 	.word	0x00000d8d
     dcc:	2000003c 	.word	0x2000003c
     dd0:	00001955 	.word	0x00001955

00000dd4 <concatString>:

void concatString (const char* string, gfx_coord_t X, gfx_coord_t Y){
     dd4:	b510      	push	{r4, lr}
	//clearLine(Y, X);
	gfx_mono_draw_string(string, X, Y, &sysfont);
     dd6:	4b02      	ldr	r3, [pc, #8]	; (de0 <concatString+0xc>)
     dd8:	4c02      	ldr	r4, [pc, #8]	; (de4 <concatString+0x10>)
     dda:	47a0      	blx	r4
}
     ddc:	bd10      	pop	{r4, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	2000003c 	.word	0x2000003c
     de4:	00001955 	.word	0x00001955

00000de8 <printExecutionSate>:

/*! \brief Imprime o estado em execução
 * Imprime o subestado atual de acordo com o parâmetro de entrada.
 * \param exec_state uma variável do estado em execução
 */
void printExecutionSate(EXECUTANDO_t exec_state){
     de8:	b510      	push	{r4, lr}
	//Controla os subestados. Vai de subestado em subestado.
	switch(exec_state){
     dea:	2807      	cmp	r0, #7
     dec:	d833      	bhi.n	e56 <printExecutionSate+0x6e>
     dee:	0080      	lsls	r0, r0, #2
     df0:	4b1c      	ldr	r3, [pc, #112]	; (e64 <printExecutionSate+0x7c>)
     df2:	581b      	ldr	r3, [r3, r0]
     df4:	469f      	mov	pc, r3

		case FAZENDO_NADA:
			concatString("        ", 70, 10);
     df6:	220a      	movs	r2, #10
     df8:	2146      	movs	r1, #70	; 0x46
     dfa:	481b      	ldr	r0, [pc, #108]	; (e68 <printExecutionSate+0x80>)
     dfc:	4b1b      	ldr	r3, [pc, #108]	; (e6c <printExecutionSate+0x84>)
     dfe:	4798      	blx	r3

		default:
		concatString("ERRO", 70, 10);  //Usado para imprimir o subestado atual.
		break;
	}
}
     e00:	bd10      	pop	{r4, pc}
			concatString("ENCHER   ", 70, 10);
     e02:	220a      	movs	r2, #10
     e04:	2146      	movs	r1, #70	; 0x46
     e06:	481a      	ldr	r0, [pc, #104]	; (e70 <printExecutionSate+0x88>)
     e08:	4b18      	ldr	r3, [pc, #96]	; (e6c <printExecutionSate+0x84>)
     e0a:	4798      	blx	r3
		break;
     e0c:	e7f8      	b.n	e00 <printExecutionSate+0x18>
			concatString("BATER   ", 70, 10);
     e0e:	220a      	movs	r2, #10
     e10:	2146      	movs	r1, #70	; 0x46
     e12:	4818      	ldr	r0, [pc, #96]	; (e74 <printExecutionSate+0x8c>)
     e14:	4b15      	ldr	r3, [pc, #84]	; (e6c <printExecutionSate+0x84>)
     e16:	4798      	blx	r3
		break;
     e18:	e7f2      	b.n	e00 <printExecutionSate+0x18>
			concatString("MOLHO   ", 70, 10);
     e1a:	220a      	movs	r2, #10
     e1c:	2146      	movs	r1, #70	; 0x46
     e1e:	4816      	ldr	r0, [pc, #88]	; (e78 <printExecutionSate+0x90>)
     e20:	4b12      	ldr	r3, [pc, #72]	; (e6c <printExecutionSate+0x84>)
     e22:	4798      	blx	r3
		break;
     e24:	e7ec      	b.n	e00 <printExecutionSate+0x18>
			concatString("ENXAGUE ", 70, 10);
     e26:	220a      	movs	r2, #10
     e28:	2146      	movs	r1, #70	; 0x46
     e2a:	4814      	ldr	r0, [pc, #80]	; (e7c <printExecutionSate+0x94>)
     e2c:	4b0f      	ldr	r3, [pc, #60]	; (e6c <printExecutionSate+0x84>)
     e2e:	4798      	blx	r3
		break;
     e30:	e7e6      	b.n	e00 <printExecutionSate+0x18>
			concatString("ESVAZIAR", 70, 10);
     e32:	220a      	movs	r2, #10
     e34:	2146      	movs	r1, #70	; 0x46
     e36:	4812      	ldr	r0, [pc, #72]	; (e80 <printExecutionSate+0x98>)
     e38:	4b0c      	ldr	r3, [pc, #48]	; (e6c <printExecutionSate+0x84>)
     e3a:	4798      	blx	r3
		break;
     e3c:	e7e0      	b.n	e00 <printExecutionSate+0x18>
			concatString("CENTRFUG", 70, 10);
     e3e:	220a      	movs	r2, #10
     e40:	2146      	movs	r1, #70	; 0x46
     e42:	4810      	ldr	r0, [pc, #64]	; (e84 <printExecutionSate+0x9c>)
     e44:	4b09      	ldr	r3, [pc, #36]	; (e6c <printExecutionSate+0x84>)
     e46:	4798      	blx	r3
		break;
     e48:	e7da      	b.n	e00 <printExecutionSate+0x18>
			concatString("SECANDO ", 70, 10);
     e4a:	220a      	movs	r2, #10
     e4c:	2146      	movs	r1, #70	; 0x46
     e4e:	480e      	ldr	r0, [pc, #56]	; (e88 <printExecutionSate+0xa0>)
     e50:	4b06      	ldr	r3, [pc, #24]	; (e6c <printExecutionSate+0x84>)
     e52:	4798      	blx	r3
		break;
     e54:	e7d4      	b.n	e00 <printExecutionSate+0x18>
		concatString("ERRO", 70, 10);  //Usado para imprimir o subestado atual.
     e56:	220a      	movs	r2, #10
     e58:	2146      	movs	r1, #70	; 0x46
     e5a:	480c      	ldr	r0, [pc, #48]	; (e8c <printExecutionSate+0xa4>)
     e5c:	4b03      	ldr	r3, [pc, #12]	; (e6c <printExecutionSate+0x84>)
     e5e:	4798      	blx	r3
}
     e60:	e7ce      	b.n	e00 <printExecutionSate+0x18>
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	000048a0 	.word	0x000048a0
     e68:	000048d8 	.word	0x000048d8
     e6c:	00000dd5 	.word	0x00000dd5
     e70:	000048e4 	.word	0x000048e4
     e74:	000048f0 	.word	0x000048f0
     e78:	000048fc 	.word	0x000048fc
     e7c:	00004908 	.word	0x00004908
     e80:	00004914 	.word	0x00004914
     e84:	00004920 	.word	0x00004920
     e88:	0000492c 	.word	0x0000492c
     e8c:	00004938 	.word	0x00004938

00000e90 <inicializa_btn>:
	inicializa_btn();
	inicializa_led();
}

/*! Inicializa os botões. */
void inicializa_btn(void){
     e90:	b570      	push	{r4, r5, r6, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
     e92:	4c07      	ldr	r4, [pc, #28]	; (eb0 <inicializa_btn+0x20>)
     e94:	2300      	movs	r3, #0
     e96:	7023      	strb	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     e98:	2201      	movs	r2, #1
     e9a:	7062      	strb	r2, [r4, #1]
	config->powersave  = false;
     e9c:	70a3      	strb	r3, [r4, #2]
	port_get_config_defaults(&config_port_pin);
	//Seta como entrada e pull-UP
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	//Seta os btn do modo configurado.
	port_pin_set_config(BUTTON_1_PIN, &config_port_pin);
     e9e:	0021      	movs	r1, r4
     ea0:	201c      	movs	r0, #28
     ea2:	4d04      	ldr	r5, [pc, #16]	; (eb4 <inicializa_btn+0x24>)
     ea4:	47a8      	blx	r5
	port_pin_set_config(BUTTON_2_PIN, &config_port_pin);
     ea6:	0021      	movs	r1, r4
     ea8:	2002      	movs	r0, #2
     eaa:	47a8      	blx	r5
}
     eac:	bd70      	pop	{r4, r5, r6, pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	2000043c 	.word	0x2000043c
     eb4:	00001c39 	.word	0x00001c39

00000eb8 <inicializa_led>:

/*! Inicializa os leds. */
void inicializa_led(void){
     eb8:	b570      	push	{r4, r5, r6, lr}
	config->input_pull = PORT_PIN_PULL_UP;
     eba:	4c0a      	ldr	r4, [pc, #40]	; (ee4 <inicializa_led+0x2c>)
     ebc:	2301      	movs	r3, #1
     ebe:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     ec0:	2200      	movs	r2, #0
     ec2:	70a2      	strb	r2, [r4, #2]
	//Apaga a config.
	port_get_config_defaults(&config_port_pin);
	//Seta como saida.
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     ec4:	7023      	strb	r3, [r4, #0]
	//Seta os leds.
	port_pin_set_config(LED_1_PIN, &config_port_pin);
     ec6:	0021      	movs	r1, r4
     ec8:	200c      	movs	r0, #12
     eca:	4e07      	ldr	r6, [pc, #28]	; (ee8 <inicializa_led+0x30>)
     ecc:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     ece:	4d07      	ldr	r5, [pc, #28]	; (eec <inicializa_led+0x34>)
     ed0:	2380      	movs	r3, #128	; 0x80
     ed2:	015b      	lsls	r3, r3, #5
     ed4:	616b      	str	r3, [r5, #20]
	LED_OFF(LED_1_PIN);
	port_pin_set_config(LED_3_PIN, &config_port_pin);
     ed6:	0021      	movs	r1, r4
     ed8:	200f      	movs	r0, #15
     eda:	47b0      	blx	r6
     edc:	2380      	movs	r3, #128	; 0x80
     ede:	021b      	lsls	r3, r3, #8
     ee0:	616b      	str	r3, [r5, #20]
	LED_OFF(LED_3_PIN);
}
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	2000043c 	.word	0x2000043c
     ee8:	00001c39 	.word	0x00001c39
     eec:	41004400 	.word	0x41004400

00000ef0 <init_OLED_btnLed>:
void init_OLED_btnLed(void){
     ef0:	b510      	push	{r4, lr}
	inicializa_btn();
     ef2:	4b02      	ldr	r3, [pc, #8]	; (efc <init_OLED_btnLed+0xc>)
     ef4:	4798      	blx	r3
	inicializa_led();
     ef6:	4b02      	ldr	r3, [pc, #8]	; (f00 <init_OLED_btnLed+0x10>)
     ef8:	4798      	blx	r3
}
     efa:	bd10      	pop	{r4, pc}
     efc:	00000e91 	.word	0x00000e91
     f00:	00000eb9 	.word	0x00000eb9

00000f04 <inicializa_exeternal_btn>:
	inicializa_exeternal_btn();
	inicializa_external_led();
}

/*! Inicializa os botões externos. */
void inicializa_exeternal_btn(void){
     f04:	b510      	push	{r4, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
     f06:	4905      	ldr	r1, [pc, #20]	; (f1c <inicializa_exeternal_btn+0x18>)
     f08:	2300      	movs	r3, #0
     f0a:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     f0c:	2201      	movs	r2, #1
     f0e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     f10:	708b      	strb	r3, [r1, #2]
	port_get_config_defaults(&config_port_pin);
	//Seta como entrada e pull-UP
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
	//Seta os btn do modo configurado.
	port_pin_set_config(BTN_TAMPA_PIN, &config_port_pin);
     f12:	2026      	movs	r0, #38	; 0x26
     f14:	4b02      	ldr	r3, [pc, #8]	; (f20 <inicializa_exeternal_btn+0x1c>)
     f16:	4798      	blx	r3
}
     f18:	bd10      	pop	{r4, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	2000043c 	.word	0x2000043c
     f20:	00001c39 	.word	0x00001c39

00000f24 <inicializa_external_led>:

/*! Inicializa os LEDs externos. */
void inicializa_external_led(void){
     f24:	b570      	push	{r4, r5, r6, lr}
	config->input_pull = PORT_PIN_PULL_UP;
     f26:	4c10      	ldr	r4, [pc, #64]	; (f68 <inicializa_external_led+0x44>)
     f28:	2301      	movs	r3, #1
     f2a:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     f2c:	2200      	movs	r2, #0
     f2e:	70a2      	strb	r2, [r4, #2]
	//Apaga a config.
	port_get_config_defaults(&config_port_pin);
	//Seta como saida.
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     f30:	7023      	strb	r3, [r4, #0]
	//Seta os leds.
	port_pin_set_config(LED_MOTOR_PIN, &config_port_pin);
     f32:	0021      	movs	r1, r4
     f34:	2014      	movs	r0, #20
     f36:	4d0d      	ldr	r5, [pc, #52]	; (f6c <inicializa_external_led+0x48>)
     f38:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
     f3a:	4e0d      	ldr	r6, [pc, #52]	; (f70 <inicializa_external_led+0x4c>)
     f3c:	2380      	movs	r3, #128	; 0x80
     f3e:	035b      	lsls	r3, r3, #13
     f40:	6173      	str	r3, [r6, #20]
	LED_OFF(LED_MOTOR_PIN);
	port_pin_set_config(LED_SECADOR_PIN, &config_port_pin);
     f42:	0021      	movs	r1, r4
     f44:	2015      	movs	r0, #21
     f46:	47a8      	blx	r5
     f48:	2380      	movs	r3, #128	; 0x80
     f4a:	039b      	lsls	r3, r3, #14
     f4c:	6173      	str	r3, [r6, #20]
	LED_OFF(LED_SECADOR_PIN);
	port_pin_set_config(LED_VALVULA_PIN, &config_port_pin);
     f4e:	0021      	movs	r1, r4
     f50:	2025      	movs	r0, #37	; 0x25
     f52:	47a8      	blx	r5
     f54:	4e07      	ldr	r6, [pc, #28]	; (f74 <inicializa_external_led+0x50>)
     f56:	2320      	movs	r3, #32
     f58:	6173      	str	r3, [r6, #20]
	LED_OFF(LED_VALVULA_PIN);
	port_pin_set_config(LED_BOMBA_PIN, &config_port_pin);
     f5a:	0021      	movs	r1, r4
     f5c:	202f      	movs	r0, #47	; 0x2f
     f5e:	47a8      	blx	r5
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	021b      	lsls	r3, r3, #8
     f64:	6173      	str	r3, [r6, #20]
	LED_OFF(LED_BOMBA_PIN);
}
     f66:	bd70      	pop	{r4, r5, r6, pc}
     f68:	2000043c 	.word	0x2000043c
     f6c:	00001c39 	.word	0x00001c39
     f70:	41004400 	.word	0x41004400
     f74:	41004480 	.word	0x41004480

00000f78 <init_external_btnLed>:
void init_external_btnLed(void){
     f78:	b510      	push	{r4, lr}
	inicializa_exeternal_btn();
     f7a:	4b02      	ldr	r3, [pc, #8]	; (f84 <init_external_btnLed+0xc>)
     f7c:	4798      	blx	r3
	inicializa_external_led();
     f7e:	4b02      	ldr	r3, [pc, #8]	; (f88 <init_external_btnLed+0x10>)
     f80:	4798      	blx	r3
}
     f82:	bd10      	pop	{r4, pc}
     f84:	00000f05 	.word	0x00000f05
     f88:	00000f25 	.word	0x00000f25

00000f8c <isBTN_UP>:
	if (port_index < PORT_INST_NUM) {
     f8c:	09c2      	lsrs	r2, r0, #7
		return NULL;
     f8e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     f90:	2a00      	cmp	r2, #0
     f92:	d104      	bne.n	f9e <isBTN_UP+0x12>
		return &(ports[port_index]->Group[group_index]);
     f94:	0943      	lsrs	r3, r0, #5
     f96:	01db      	lsls	r3, r3, #7
     f98:	4a05      	ldr	r2, [pc, #20]	; (fb0 <isBTN_UP+0x24>)
     f9a:	4694      	mov	ip, r2
     f9c:	4463      	add	r3, ip
	return (port_base->IN.reg & pin_mask);
     f9e:	6a1b      	ldr	r3, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     fa0:	221f      	movs	r2, #31
     fa2:	4002      	ands	r2, r0
     fa4:	2001      	movs	r0, #1
     fa6:	4090      	lsls	r0, r2
	return (port_base->IN.reg & pin_mask);
     fa8:	4018      	ands	r0, r3
     faa:	1e43      	subs	r3, r0, #1
     fac:	4198      	sbcs	r0, r3
 *  \param btn o identificador do pino do botão.
 *  \return 1 caso botão não pressionado.
 */
int isBTN_UP(uint8_t btn){
	return (port_pin_get_input_level(btn));
}
     fae:	4770      	bx	lr
     fb0:	41004400 	.word	0x41004400

00000fb4 <isBTN_DOWN>:
	if (port_index < PORT_INST_NUM) {
     fb4:	09c2      	lsrs	r2, r0, #7
		return NULL;
     fb6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     fb8:	2a00      	cmp	r2, #0
     fba:	d104      	bne.n	fc6 <isBTN_DOWN+0x12>
		return &(ports[port_index]->Group[group_index]);
     fbc:	0943      	lsrs	r3, r0, #5
     fbe:	01db      	lsls	r3, r3, #7
     fc0:	4a05      	ldr	r2, [pc, #20]	; (fd8 <isBTN_DOWN+0x24>)
     fc2:	4694      	mov	ip, r2
     fc4:	4463      	add	r3, ip
     fc6:	6a1b      	ldr	r3, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     fc8:	221f      	movs	r2, #31
     fca:	4002      	ands	r2, r0
     fcc:	2001      	movs	r0, #1
     fce:	4090      	lsls	r0, r2
	return (port_base->IN.reg & pin_mask);
     fd0:	4018      	ands	r0, r3
/*! \brief Testa se botão pressionado.
 *  \param btn o identificador do pino do botão.
 *  \return 1 caso botão pressionado.
 */
int isBTN_DOWN(uint8_t btn){
	return (!port_pin_get_input_level(btn));
     fd2:	4243      	negs	r3, r0
     fd4:	4158      	adcs	r0, r3
}
     fd6:	4770      	bx	lr
     fd8:	41004400 	.word	0x41004400

00000fdc <usart_read_callback>:
/*! Armazena os dados recebidos em um buffer */
volatile uint8_t rx_buffer[MAX_RX_BUFFER_LENGTH];

/*! Funções de callback. */
void usart_read_callback(struct usart_module *const usart_module)
{
     fdc:	b510      	push	{r4, lr}
	usart_write_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
     fde:	2264      	movs	r2, #100	; 0x64
     fe0:	4902      	ldr	r1, [pc, #8]	; (fec <usart_read_callback+0x10>)
     fe2:	4803      	ldr	r0, [pc, #12]	; (ff0 <usart_read_callback+0x14>)
     fe4:	4b03      	ldr	r3, [pc, #12]	; (ff4 <usart_read_callback+0x18>)
     fe6:	4798      	blx	r3
}
     fe8:	bd10      	pop	{r4, pc}
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	20000474 	.word	0x20000474
     ff0:	20000440 	.word	0x20000440
     ff4:	00002525 	.word	0x00002525

00000ff8 <usart_write_callback>:

void usart_write_callback(struct usart_module *const usart_module)
{
     ff8:	b510      	push	{r4, lr}
	usart_read_buffer_job(&usart_instance, (uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
     ffa:	2264      	movs	r2, #100	; 0x64
     ffc:	4902      	ldr	r1, [pc, #8]	; (1008 <usart_write_callback+0x10>)
     ffe:	4803      	ldr	r0, [pc, #12]	; (100c <usart_write_callback+0x14>)
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <usart_write_callback+0x18>)
    1002:	4798      	blx	r3
}
    1004:	bd10      	pop	{r4, pc}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	20000474 	.word	0x20000474
    100c:	20000440 	.word	0x20000440
    1010:	00002545 	.word	0x00002545

00001014 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1014:	b570      	push	{r4, r5, r6, lr}
    1016:	b082      	sub	sp, #8
    1018:	0005      	movs	r5, r0
    101a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    101c:	2200      	movs	r2, #0
    101e:	466b      	mov	r3, sp
    1020:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1022:	4c06      	ldr	r4, [pc, #24]	; (103c <usart_serial_getchar+0x28>)
    1024:	466b      	mov	r3, sp
    1026:	1d99      	adds	r1, r3, #6
    1028:	0028      	movs	r0, r5
    102a:	47a0      	blx	r4
    102c:	2800      	cmp	r0, #0
    102e:	d1f9      	bne.n	1024 <usart_serial_getchar+0x10>

	*c = temp;
    1030:	466b      	mov	r3, sp
    1032:	3306      	adds	r3, #6
    1034:	881b      	ldrh	r3, [r3, #0]
    1036:	7033      	strb	r3, [r6, #0]
}
    1038:	b002      	add	sp, #8
    103a:	bd70      	pop	{r4, r5, r6, pc}
    103c:	00002411 	.word	0x00002411

00001040 <usart_serial_putchar>:
{
    1040:	b570      	push	{r4, r5, r6, lr}
    1042:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1044:	b28c      	uxth	r4, r1
    1046:	4e03      	ldr	r6, [pc, #12]	; (1054 <usart_serial_putchar+0x14>)
    1048:	0021      	movs	r1, r4
    104a:	0028      	movs	r0, r5
    104c:	47b0      	blx	r6
    104e:	2800      	cmp	r0, #0
    1050:	d1fa      	bne.n	1048 <usart_serial_putchar+0x8>
}
    1052:	bd70      	pop	{r4, r5, r6, pc}
    1054:	000023e5 	.word	0x000023e5

00001058 <configure_usart>:

void configure_usart(void)
{
    1058:	b5f0      	push	{r4, r5, r6, r7, lr}
    105a:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    105c:	2380      	movs	r3, #128	; 0x80
    105e:	05db      	lsls	r3, r3, #23
    1060:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1062:	2300      	movs	r3, #0
    1064:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1066:	22ff      	movs	r2, #255	; 0xff
    1068:	4669      	mov	r1, sp
    106a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    106c:	2200      	movs	r2, #0
    106e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1070:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1072:	2196      	movs	r1, #150	; 0x96
    1074:	0189      	lsls	r1, r1, #6
    1076:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1078:	2401      	movs	r4, #1
    107a:	2124      	movs	r1, #36	; 0x24
    107c:	4668      	mov	r0, sp
    107e:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1080:	3101      	adds	r1, #1
    1082:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1084:	3101      	adds	r1, #1
    1086:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1088:	3101      	adds	r1, #1
    108a:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    108c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    108e:	3105      	adds	r1, #5
    1090:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1092:	3101      	adds	r1, #1
    1094:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1096:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1098:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    109a:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    109c:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    109e:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    10a0:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    10a2:	2313      	movs	r3, #19
    10a4:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    10a6:	7742      	strb	r2, [r0, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	//Seta os pinos.
	config_usart.baudrate    = 9600;
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    10a8:	2380      	movs	r3, #128	; 0x80
    10aa:	035b      	lsls	r3, r3, #13
    10ac:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    10ae:	4b19      	ldr	r3, [pc, #100]	; (1114 <configure_usart+0xbc>)
    10b0:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    10b2:	4b19      	ldr	r3, [pc, #100]	; (1118 <configure_usart+0xc0>)
    10b4:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    10b6:	2301      	movs	r3, #1
    10b8:	425b      	negs	r3, r3
    10ba:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    10bc:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    10be:	4d17      	ldr	r5, [pc, #92]	; (111c <configure_usart+0xc4>)
    10c0:	4b17      	ldr	r3, [pc, #92]	; (1120 <configure_usart+0xc8>)
    10c2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    10c4:	4a17      	ldr	r2, [pc, #92]	; (1124 <configure_usart+0xcc>)
    10c6:	4b18      	ldr	r3, [pc, #96]	; (1128 <configure_usart+0xd0>)
    10c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    10ca:	4a18      	ldr	r2, [pc, #96]	; (112c <configure_usart+0xd4>)
    10cc:	4b18      	ldr	r3, [pc, #96]	; (1130 <configure_usart+0xd8>)
    10ce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    10d0:	466a      	mov	r2, sp
    10d2:	4918      	ldr	r1, [pc, #96]	; (1134 <configure_usart+0xdc>)
    10d4:	0028      	movs	r0, r5
    10d6:	4b18      	ldr	r3, [pc, #96]	; (1138 <configure_usart+0xe0>)
    10d8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    10da:	4f18      	ldr	r7, [pc, #96]	; (113c <configure_usart+0xe4>)
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	6898      	ldr	r0, [r3, #8]
    10e0:	2100      	movs	r1, #0
    10e2:	4e17      	ldr	r6, [pc, #92]	; (1140 <configure_usart+0xe8>)
    10e4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    10e6:	683b      	ldr	r3, [r7, #0]
    10e8:	6858      	ldr	r0, [r3, #4]
    10ea:	2100      	movs	r1, #0
    10ec:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    10ee:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    10f0:	0030      	movs	r0, r6
    10f2:	4b14      	ldr	r3, [pc, #80]	; (1144 <configure_usart+0xec>)
    10f4:	4798      	blx	r3
    10f6:	231f      	movs	r3, #31
    10f8:	4018      	ands	r0, r3
    10fa:	4084      	lsls	r4, r0
    10fc:	4b12      	ldr	r3, [pc, #72]	; (1148 <configure_usart+0xf0>)
    10fe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1100:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1102:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1104:	2b00      	cmp	r3, #0
    1106:	d1fc      	bne.n	1102 <configure_usart+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1108:	6833      	ldr	r3, [r6, #0]
    110a:	2202      	movs	r2, #2
    110c:	4313      	orrs	r3, r2
    110e:	6033      	str	r3, [r6, #0]
	//Seta o printf. Ele vai usar as nossas interruption.
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);

	//Habilita.
	usart_enable(&usart_instance);
}
    1110:	b011      	add	sp, #68	; 0x44
    1112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1114:	00160002 	.word	0x00160002
    1118:	00170002 	.word	0x00170002
    111c:	20000440 	.word	0x20000440
    1120:	20000538 	.word	0x20000538
    1124:	00001041 	.word	0x00001041
    1128:	20000534 	.word	0x20000534
    112c:	00001015 	.word	0x00001015
    1130:	20000530 	.word	0x20000530
    1134:	42001400 	.word	0x42001400
    1138:	000020a1 	.word	0x000020a1
    113c:	2000004c 	.word	0x2000004c
    1140:	000037c9 	.word	0x000037c9
    1144:	00002011 	.word	0x00002011
    1148:	e000e100 	.word	0xe000e100

0000114c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    114c:	b570      	push	{r4, r5, r6, lr}
	//Setar o callBack
	usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
    114e:	4c08      	ldr	r4, [pc, #32]	; (1170 <configure_usart_callbacks+0x24>)
    1150:	2200      	movs	r2, #0
    1152:	4908      	ldr	r1, [pc, #32]	; (1174 <configure_usart_callbacks+0x28>)
    1154:	0020      	movs	r0, r4
    1156:	4d08      	ldr	r5, [pc, #32]	; (1178 <configure_usart_callbacks+0x2c>)
    1158:	47a8      	blx	r5
	usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    115a:	2201      	movs	r2, #1
    115c:	4907      	ldr	r1, [pc, #28]	; (117c <configure_usart_callbacks+0x30>)
    115e:	0020      	movs	r0, r4
    1160:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1162:	2231      	movs	r2, #49	; 0x31
    1164:	5ca3      	ldrb	r3, [r4, r2]
    1166:	2103      	movs	r1, #3
    1168:	430b      	orrs	r3, r1
    116a:	54a3      	strb	r3, [r4, r2]


	//Habilita o callback.
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    116c:	bd70      	pop	{r4, r5, r6, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	20000440 	.word	0x20000440
    1174:	00000ff9 	.word	0x00000ff9
    1178:	0000250d 	.word	0x0000250d
    117c:	00000fdd 	.word	0x00000fdd

00001180 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    1180:	4b01      	ldr	r3, [pc, #4]	; (1188 <gfx_mono_set_framebuffer+0x8>)
    1182:	6018      	str	r0, [r3, #0]
}
    1184:	4770      	bx	lr
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	200002d4 	.word	0x200002d4

0000118c <gfx_mono_framebuffer_put_page>:
	gfx_mono_framebuffer_put_page(data_buf, 0, 10, 32);
\endcode
 */
void gfx_mono_framebuffer_put_page(gfx_mono_color_t *data, gfx_coord_t page,
		gfx_coord_t column, gfx_coord_t width)
{
    118c:	b530      	push	{r4, r5, lr}
	gfx_mono_color_t *data_pt = data;
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
    118e:	01c9      	lsls	r1, r1, #7
    1190:	1889      	adds	r1, r1, r2
	gfx_coord_t *framebuffer_pt = fbpointer +
    1192:	4a06      	ldr	r2, [pc, #24]	; (11ac <gfx_mono_framebuffer_put_page+0x20>)
    1194:	6812      	ldr	r2, [r2, #0]
    1196:	1852      	adds	r2, r2, r1
    1198:	3b01      	subs	r3, #1
    119a:	b2db      	uxtb	r3, r3
    119c:	3301      	adds	r3, #1
    119e:	2400      	movs	r4, #0

	do {
		*framebuffer_pt++ = *data_pt++;
    11a0:	5d05      	ldrb	r5, [r0, r4]
    11a2:	5515      	strb	r5, [r2, r4]
    11a4:	3401      	adds	r4, #1
	} while (--width > 0);
    11a6:	429c      	cmp	r4, r3
    11a8:	d1fa      	bne.n	11a0 <gfx_mono_framebuffer_put_page+0x14>
}
    11aa:	bd30      	pop	{r4, r5, pc}
    11ac:	200002d4 	.word	0x200002d4

000011b0 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    11b0:	4b02      	ldr	r3, [pc, #8]	; (11bc <gfx_mono_framebuffer_put_byte+0xc>)
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	01c0      	lsls	r0, r0, #7
    11b6:	1818      	adds	r0, r3, r0
    11b8:	5442      	strb	r2, [r0, r1]
}
    11ba:	4770      	bx	lr
    11bc:	200002d4 	.word	0x200002d4

000011c0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <gfx_mono_framebuffer_get_byte+0xc>)
    11c2:	681b      	ldr	r3, [r3, #0]
    11c4:	01c0      	lsls	r0, r0, #7
    11c6:	1818      	adds	r0, r3, r0
    11c8:	5c40      	ldrb	r0, [r0, r1]
}
    11ca:	4770      	bx	lr
    11cc:	200002d4 	.word	0x200002d4

000011d0 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
    11d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d2:	46ce      	mov	lr, r9
    11d4:	4647      	mov	r7, r8
    11d6:	b580      	push	{r7, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
    11d8:	1884      	adds	r4, r0, r2
    11da:	2c80      	cmp	r4, #128	; 0x80
    11dc:	dd03      	ble.n	11e6 <gfx_mono_generic_draw_horizontal_line+0x16>
		length = GFX_MONO_LCD_WIDTH - x;
    11de:	2280      	movs	r2, #128	; 0x80
    11e0:	4252      	negs	r2, r2
    11e2:	1a12      	subs	r2, r2, r0
    11e4:	b2d2      	uxtb	r2, r2
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
    11e6:	2a00      	cmp	r2, #0
    11e8:	d037      	beq.n	125a <gfx_mono_generic_draw_horizontal_line+0x8a>
	page = y / 8;
    11ea:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
    11ec:	00ec      	lsls	r4, r5, #3
    11ee:	1b09      	subs	r1, r1, r4
    11f0:	2701      	movs	r7, #1
    11f2:	408f      	lsls	r7, r1
    11f4:	0039      	movs	r1, r7
    11f6:	b2ff      	uxtb	r7, r7
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
    11f8:	2b01      	cmp	r3, #1
    11fa:	d019      	beq.n	1230 <gfx_mono_generic_draw_horizontal_line+0x60>
    11fc:	2b00      	cmp	r3, #0
    11fe:	d030      	beq.n	1262 <gfx_mono_generic_draw_horizontal_line+0x92>
    1200:	2b02      	cmp	r3, #2
    1202:	d12a      	bne.n	125a <gfx_mono_generic_draw_horizontal_line+0x8a>
    1204:	3801      	subs	r0, #1
    1206:	b2c6      	uxtb	r6, r0
    1208:	1992      	adds	r2, r2, r6
    120a:	b2d4      	uxtb	r4, r2
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
    120c:	4b20      	ldr	r3, [pc, #128]	; (1290 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    120e:	4699      	mov	r9, r3
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
    1210:	4b20      	ldr	r3, [pc, #128]	; (1294 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    1212:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    1214:	0021      	movs	r1, r4
    1216:	0028      	movs	r0, r5
    1218:	47c8      	blx	r9
			temp ^= pixelmask;
    121a:	4078      	eors	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    121c:	b2c2      	uxtb	r2, r0
    121e:	2300      	movs	r3, #0
    1220:	0021      	movs	r1, r4
    1222:	0028      	movs	r0, r5
    1224:	47c0      	blx	r8
    1226:	3c01      	subs	r4, #1
    1228:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    122a:	42b4      	cmp	r4, r6
    122c:	d1f2      	bne.n	1214 <gfx_mono_generic_draw_horizontal_line+0x44>
    122e:	e014      	b.n	125a <gfx_mono_generic_draw_horizontal_line+0x8a>
    1230:	3801      	subs	r0, #1
    1232:	b2c6      	uxtb	r6, r0
    1234:	1992      	adds	r2, r2, r6
    1236:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    1238:	4b15      	ldr	r3, [pc, #84]	; (1290 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    123a:	4699      	mov	r9, r3
			gfx_mono_put_byte(page, x + length, temp);
    123c:	4b15      	ldr	r3, [pc, #84]	; (1294 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    123e:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    1240:	0021      	movs	r1, r4
    1242:	0028      	movs	r0, r5
    1244:	47c8      	blx	r9
			temp |= pixelmask;
    1246:	4338      	orrs	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    1248:	b2c2      	uxtb	r2, r0
    124a:	2300      	movs	r3, #0
    124c:	0021      	movs	r1, r4
    124e:	0028      	movs	r0, r5
    1250:	47c0      	blx	r8
    1252:	3c01      	subs	r4, #1
    1254:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    1256:	42b4      	cmp	r4, r6
    1258:	d1f2      	bne.n	1240 <gfx_mono_generic_draw_horizontal_line+0x70>
		break;

	default:
		break;
	}
}
    125a:	bc0c      	pop	{r2, r3}
    125c:	4690      	mov	r8, r2
    125e:	4699      	mov	r9, r3
    1260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1262:	3801      	subs	r0, #1
    1264:	b2c6      	uxtb	r6, r0
    1266:	1992      	adds	r2, r2, r6
    1268:	b2d4      	uxtb	r4, r2
			temp = gfx_mono_get_byte(page, x + length);
    126a:	4b09      	ldr	r3, [pc, #36]	; (1290 <gfx_mono_generic_draw_horizontal_line+0xc0>)
    126c:	4699      	mov	r9, r3
			temp &= ~pixelmask;
    126e:	43cf      	mvns	r7, r1
			gfx_mono_put_byte(page, x + length, temp);
    1270:	4b08      	ldr	r3, [pc, #32]	; (1294 <gfx_mono_generic_draw_horizontal_line+0xc4>)
    1272:	4698      	mov	r8, r3
			temp = gfx_mono_get_byte(page, x + length);
    1274:	0021      	movs	r1, r4
    1276:	0028      	movs	r0, r5
    1278:	47c8      	blx	r9
			temp &= ~pixelmask;
    127a:	4038      	ands	r0, r7
			gfx_mono_put_byte(page, x + length, temp);
    127c:	b2c2      	uxtb	r2, r0
    127e:	2300      	movs	r3, #0
    1280:	0021      	movs	r1, r4
    1282:	0028      	movs	r0, r5
    1284:	47c0      	blx	r8
    1286:	3c01      	subs	r4, #1
    1288:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
    128a:	42b4      	cmp	r4, r6
    128c:	d1f2      	bne.n	1274 <gfx_mono_generic_draw_horizontal_line+0xa4>
    128e:	e7e4      	b.n	125a <gfx_mono_generic_draw_horizontal_line+0x8a>
    1290:	0000058d 	.word	0x0000058d
    1294:	00000485 	.word	0x00000485

00001298 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1298:	b5f0      	push	{r4, r5, r6, r7, lr}
    129a:	b083      	sub	sp, #12
    129c:	9000      	str	r0, [sp, #0]
    129e:	9201      	str	r2, [sp, #4]
    12a0:	aa08      	add	r2, sp, #32
    12a2:	7817      	ldrb	r7, [r2, #0]
	if (height == 0) {
    12a4:	2b00      	cmp	r3, #0
    12a6:	d00d      	beq.n	12c4 <gfx_mono_generic_draw_filled_rect+0x2c>
    12a8:	3901      	subs	r1, #1
    12aa:	b2ce      	uxtb	r6, r1
    12ac:	199b      	adds	r3, r3, r6
    12ae:	b2dc      	uxtb	r4, r3
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    12b0:	4d05      	ldr	r5, [pc, #20]	; (12c8 <gfx_mono_generic_draw_filled_rect+0x30>)
    12b2:	003b      	movs	r3, r7
    12b4:	9a01      	ldr	r2, [sp, #4]
    12b6:	0021      	movs	r1, r4
    12b8:	9800      	ldr	r0, [sp, #0]
    12ba:	47a8      	blx	r5
    12bc:	3c01      	subs	r4, #1
    12be:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
    12c0:	42b4      	cmp	r4, r6
    12c2:	d1f6      	bne.n	12b2 <gfx_mono_generic_draw_filled_rect+0x1a>
	}
}
    12c4:	b003      	add	sp, #12
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c8:	000011d1 	.word	0x000011d1

000012cc <gfx_mono_generic_put_bitmap>:
 * placing a bitmap at x = 10, y = 10 will put the bitmap at x = 10, y = 8
 *
 */
void gfx_mono_generic_put_bitmap(struct gfx_mono_bitmap *bitmap, gfx_coord_t x,
		gfx_coord_t y)
{
    12cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12ce:	46de      	mov	lr, fp
    12d0:	4657      	mov	r7, sl
    12d2:	464e      	mov	r6, r9
    12d4:	4645      	mov	r5, r8
    12d6:	b5e0      	push	{r5, r6, r7, lr}
    12d8:	b083      	sub	sp, #12
    12da:	0005      	movs	r5, r0
    12dc:	000f      	movs	r7, r1
	gfx_coord_t num_pages = bitmap->height / 8;
    12de:	7843      	ldrb	r3, [r0, #1]
    12e0:	08db      	lsrs	r3, r3, #3
    12e2:	469b      	mov	fp, r3
	gfx_coord_t page = y / 8;
    12e4:	08d6      	lsrs	r6, r2, #3
	gfx_coord_t column;
	gfx_coord_t i;
	gfx_mono_color_t temp;

	switch (bitmap->type) {
    12e6:	7883      	ldrb	r3, [r0, #2]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d009      	beq.n	1300 <gfx_mono_generic_put_bitmap+0x34>
    12ec:	2b01      	cmp	r3, #1
    12ee:	d11f      	bne.n	1330 <gfx_mono_generic_put_bitmap+0x64>
	case GFX_MONO_BITMAP_PROGMEM:
		for (i = 0; i < num_pages; i++) {
    12f0:	2300      	movs	r3, #0
    12f2:	4698      	mov	r8, r3
    12f4:	465b      	mov	r3, fp
    12f6:	2b00      	cmp	r3, #0
    12f8:	d01a      	beq.n	1330 <gfx_mono_generic_put_bitmap+0x64>
			for (column = 0; column < bitmap->width; column++) {
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
						+ (i * bitmap->width)
						+ column);
				gfx_mono_put_byte(i + page, column + x, temp);
    12fa:	4b20      	ldr	r3, [pc, #128]	; (137c <gfx_mono_generic_put_bitmap+0xb0>)
    12fc:	469a      	mov	sl, r3
    12fe:	e038      	b.n	1372 <gfx_mono_generic_put_bitmap+0xa6>
			}
		}
		break;

	case GFX_MONO_BITMAP_RAM:
		for (i = 0; i < num_pages; i++) {
    1300:	465b      	mov	r3, fp
    1302:	2b00      	cmp	r3, #0
    1304:	d014      	beq.n	1330 <gfx_mono_generic_put_bitmap+0x64>
    1306:	465b      	mov	r3, fp
    1308:	199b      	adds	r3, r3, r6
    130a:	b2db      	uxtb	r3, r3
    130c:	4699      	mov	r9, r3
    130e:	2400      	movs	r4, #0
			gfx_mono_put_page(bitmap->data.pixmap
    1310:	4b1b      	ldr	r3, [pc, #108]	; (1380 <gfx_mono_generic_put_bitmap+0xb4>)
    1312:	4698      	mov	r8, r3
    1314:	782b      	ldrb	r3, [r5, #0]
    1316:	0018      	movs	r0, r3
    1318:	4360      	muls	r0, r4
    131a:	686a      	ldr	r2, [r5, #4]
    131c:	4694      	mov	ip, r2
    131e:	4460      	add	r0, ip
    1320:	003a      	movs	r2, r7
    1322:	0031      	movs	r1, r6
    1324:	47c0      	blx	r8
    1326:	3401      	adds	r4, #1
    1328:	3601      	adds	r6, #1
    132a:	b2f6      	uxtb	r6, r6
		for (i = 0; i < num_pages; i++) {
    132c:	45b1      	cmp	r9, r6
    132e:	d1f1      	bne.n	1314 <gfx_mono_generic_put_bitmap+0x48>
		break;

	default:
		break;
	}
}
    1330:	b003      	add	sp, #12
    1332:	bc3c      	pop	{r2, r3, r4, r5}
    1334:	4690      	mov	r8, r2
    1336:	4699      	mov	r9, r3
    1338:	46a2      	mov	sl, r4
    133a:	46ab      	mov	fp, r5
    133c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp = PROGMEM_READ_BYTE(bitmap->data.progmem
    133e:	4642      	mov	r2, r8
    1340:	4353      	muls	r3, r2
    1342:	686a      	ldr	r2, [r5, #4]
    1344:	1912      	adds	r2, r2, r4
				gfx_mono_put_byte(i + page, column + x, temp);
    1346:	5cd2      	ldrb	r2, [r2, r3]
    1348:	1939      	adds	r1, r7, r4
    134a:	b2c9      	uxtb	r1, r1
    134c:	2300      	movs	r3, #0
    134e:	0030      	movs	r0, r6
    1350:	47d0      	blx	sl
			for (column = 0; column < bitmap->width; column++) {
    1352:	3401      	adds	r4, #1
    1354:	b2e4      	uxtb	r4, r4
    1356:	782b      	ldrb	r3, [r5, #0]
    1358:	42a3      	cmp	r3, r4
    135a:	d8f0      	bhi.n	133e <gfx_mono_generic_put_bitmap+0x72>
    135c:	2301      	movs	r3, #1
    135e:	469c      	mov	ip, r3
    1360:	44e0      	add	r8, ip
    1362:	3601      	adds	r6, #1
    1364:	b2f6      	uxtb	r6, r6
		for (i = 0; i < num_pages; i++) {
    1366:	4643      	mov	r3, r8
    1368:	466a      	mov	r2, sp
    136a:	71d3      	strb	r3, [r2, #7]
    136c:	79d3      	ldrb	r3, [r2, #7]
    136e:	455b      	cmp	r3, fp
    1370:	d2de      	bcs.n	1330 <gfx_mono_generic_put_bitmap+0x64>
			for (column = 0; column < bitmap->width; column++) {
    1372:	782b      	ldrb	r3, [r5, #0]
    1374:	2400      	movs	r4, #0
    1376:	2b00      	cmp	r3, #0
    1378:	d1e1      	bne.n	133e <gfx_mono_generic_put_bitmap+0x72>
    137a:	e7ef      	b.n	135c <gfx_mono_generic_put_bitmap+0x90>
    137c:	00000485 	.word	0x00000485
    1380:	0000042d 	.word	0x0000042d

00001384 <gfx_mono_spinctrl_draw_indicator>:
 * \param[in] *spinner initialized gfx_mono_spinctrl struct
 * \param[in] draw     true on draw, false on delete
 */
static void gfx_mono_spinctrl_draw_indicator(struct gfx_mono_spinctrl *spinner,
		bool draw)
{
    1384:	b510      	push	{r4, lr}
    1386:	b082      	sub	sp, #8
	if (draw) {
    1388:	2900      	cmp	r1, #0
    138a:	d109      	bne.n	13a0 <gfx_mono_spinctrl_draw_indicator+0x1c>
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator, 0,
				spinner->y);
	} else {
		gfx_mono_draw_filled_rect(0, spinner->y,
    138c:	7d81      	ldrb	r1, [r0, #22]
    138e:	2300      	movs	r3, #0
    1390:	9300      	str	r3, [sp, #0]
    1392:	3308      	adds	r3, #8
    1394:	2204      	movs	r2, #4
    1396:	2000      	movs	r0, #0
    1398:	4c04      	ldr	r4, [pc, #16]	; (13ac <gfx_mono_spinctrl_draw_indicator+0x28>)
    139a:	47a0      	blx	r4
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
				GFX_PIXEL_CLR);
	}
}
    139c:	b002      	add	sp, #8
    139e:	bd10      	pop	{r4, pc}
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator, 0,
    13a0:	7d82      	ldrb	r2, [r0, #22]
    13a2:	2100      	movs	r1, #0
    13a4:	4802      	ldr	r0, [pc, #8]	; (13b0 <gfx_mono_spinctrl_draw_indicator+0x2c>)
    13a6:	4b03      	ldr	r3, [pc, #12]	; (13b4 <gfx_mono_spinctrl_draw_indicator+0x30>)
    13a8:	4798      	blx	r3
    13aa:	e7f7      	b.n	139c <gfx_mono_spinctrl_draw_indicator+0x18>
    13ac:	00001299 	.word	0x00001299
    13b0:	2000002c 	.word	0x2000002c
    13b4:	000012cd 	.word	0x000012cd

000013b8 <gfx_mono_spinctrl_draw_button>:
 *
 * \param[in] draw       true on draw, false on delete
 * \param[in] indicator  true on draw indicator, false on delete
 */
static void gfx_mono_spinctrl_draw_button(bool draw, bool indicator)
{
    13b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ba:	b089      	sub	sp, #36	; 0x24
    13bc:	0006      	movs	r6, r0
    13be:	000d      	movs	r5, r1
	uint8_t height;
	uint8_t offset;
	char string_buf[22];

	/* Clear bottom line */
	gfx_mono_draw_filled_rect(0,
    13c0:	2300      	movs	r3, #0
    13c2:	9300      	str	r3, [sp, #0]
    13c4:	3307      	adds	r3, #7
    13c6:	2280      	movs	r2, #128	; 0x80
    13c8:	2118      	movs	r1, #24
    13ca:	2000      	movs	r0, #0
    13cc:	4c1e      	ldr	r4, [pc, #120]	; (1448 <gfx_mono_spinctrl_draw_button+0x90>)
    13ce:	47a0      	blx	r4
			(SYSFONT_HEIGHT + 1) *
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
			GFX_MONO_LCD_WIDTH, SYSFONT_HEIGHT, GFX_PIXEL_CLR);

	snprintf(string_buf, sizeof(string_buf), "OK");
    13d0:	a802      	add	r0, sp, #8
    13d2:	4b1e      	ldr	r3, [pc, #120]	; (144c <gfx_mono_spinctrl_draw_button+0x94>)
    13d4:	881a      	ldrh	r2, [r3, #0]
    13d6:	8002      	strh	r2, [r0, #0]
    13d8:	789b      	ldrb	r3, [r3, #2]
    13da:	7083      	strb	r3, [r0, #2]
	gfx_mono_get_string_bounding_box(string_buf, &sysfont, &width, &height);
    13dc:	241f      	movs	r4, #31
    13de:	446c      	add	r4, sp
    13e0:	231e      	movs	r3, #30
    13e2:	446b      	add	r3, sp
    13e4:	0022      	movs	r2, r4
    13e6:	491a      	ldr	r1, [pc, #104]	; (1450 <gfx_mono_spinctrl_draw_button+0x98>)
    13e8:	4f1a      	ldr	r7, [pc, #104]	; (1454 <gfx_mono_spinctrl_draw_button+0x9c>)
    13ea:	47b8      	blx	r7
	offset = (GFX_MONO_LCD_WIDTH - width) / 2;
    13ec:	7820      	ldrb	r0, [r4, #0]
    13ee:	2480      	movs	r4, #128	; 0x80
    13f0:	1a20      	subs	r0, r4, r0
    13f2:	0fc4      	lsrs	r4, r0, #31
    13f4:	1824      	adds	r4, r4, r0
    13f6:	1064      	asrs	r4, r4, #1
    13f8:	b2e4      	uxtb	r4, r4

	if (draw) {
    13fa:	2e00      	cmp	r6, #0
    13fc:	d018      	beq.n	1430 <gfx_mono_spinctrl_draw_button+0x78>
		/* Draw OK button in the middle of the last line */
		gfx_mono_draw_string(string_buf, offset,
    13fe:	4b14      	ldr	r3, [pc, #80]	; (1450 <gfx_mono_spinctrl_draw_button+0x98>)
    1400:	2218      	movs	r2, #24
    1402:	0021      	movs	r1, r4
    1404:	a802      	add	r0, sp, #8
    1406:	4e14      	ldr	r6, [pc, #80]	; (1458 <gfx_mono_spinctrl_draw_button+0xa0>)
    1408:	47b0      	blx	r6
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION,
				&sysfont);
		if (indicator) {
    140a:	2d00      	cmp	r5, #0
    140c:	d006      	beq.n	141c <gfx_mono_spinctrl_draw_button+0x64>
			/* Draw indicator arrow in front of button */
			gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_indicator,
    140e:	1f21      	subs	r1, r4, #4
    1410:	b2c9      	uxtb	r1, r1
    1412:	2218      	movs	r2, #24
    1414:	4811      	ldr	r0, [pc, #68]	; (145c <gfx_mono_spinctrl_draw_button+0xa4>)
    1416:	4b12      	ldr	r3, [pc, #72]	; (1460 <gfx_mono_spinctrl_draw_button+0xa8>)
    1418:	4798      	blx	r3
    141a:	e012      	b.n	1442 <gfx_mono_spinctrl_draw_button+0x8a>
					offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
					(SYSFONT_HEIGHT + 1) *
					GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION);
		} else {
			/* Delete indicator */
			gfx_mono_draw_filled_rect(offset -
    141c:	1f20      	subs	r0, r4, #4
    141e:	b2c0      	uxtb	r0, r0
    1420:	2300      	movs	r3, #0
    1422:	9300      	str	r3, [sp, #0]
    1424:	3308      	adds	r3, #8
    1426:	2204      	movs	r2, #4
    1428:	2118      	movs	r1, #24
    142a:	4c07      	ldr	r4, [pc, #28]	; (1448 <gfx_mono_spinctrl_draw_button+0x90>)
    142c:	47a0      	blx	r4
    142e:	e008      	b.n	1442 <gfx_mono_spinctrl_draw_button+0x8a>
					GFX_MONO_SPINCTRL_INDICATOR_HEIGHT,
					GFX_PIXEL_CLR);
		}
	} else {
		/* Delete OK button */
		gfx_mono_draw_filled_rect(
    1430:	1f20      	subs	r0, r4, #4
    1432:	b2c0      	uxtb	r0, r0
    1434:	2300      	movs	r3, #0
    1436:	9300      	str	r3, [sp, #0]
    1438:	3307      	adds	r3, #7
    143a:	2214      	movs	r2, #20
    143c:	2118      	movs	r1, #24
    143e:	4c02      	ldr	r4, [pc, #8]	; (1448 <gfx_mono_spinctrl_draw_button+0x90>)
    1440:	47a0      	blx	r4
				offset - GFX_MONO_SPINCTRL_INDICATOR_WIDTH,
				(SYSFONT_HEIGHT + 1) *
				GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION, 20,
				SYSFONT_HEIGHT, GFX_PIXEL_CLR);
	}
}
    1442:	b009      	add	sp, #36	; 0x24
    1444:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1446:	46c0      	nop			; (mov r8, r8)
    1448:	00001299 	.word	0x00001299
    144c:	000049a4 	.word	0x000049a4
    1450:	2000003c 	.word	0x2000003c
    1454:	000019f9 	.word	0x000019f9
    1458:	00001955 	.word	0x00001955
    145c:	2000002c 	.word	0x2000002c
    1460:	000012cd 	.word	0x000012cd

00001464 <gfx_mono_spinctrl_draw>:
 *
 * \param[in] spinner  pointer to initialized gfx_mono_spinctrl struct
 * \param[in] redraw   true if title of spinner should be drawn
 */
void gfx_mono_spinctrl_draw(struct gfx_mono_spinctrl *spinner, bool redraw)
{
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	b086      	sub	sp, #24
    1468:	0004      	movs	r4, r0
	char string_buf[GFX_MONO_SPINCTRL_INT_SPINNER_WIDTH];
	uint8_t index;
	uint8_t offset;

	if (redraw) {
    146a:	2900      	cmp	r1, #0
    146c:	d10e      	bne.n	148c <gfx_mono_spinctrl_draw+0x28>
		gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)spinner->title,
				GFX_MONO_SPINCTRL_INDICATOR_WIDTH + 1,
				spinner->y, &sysfont);
	}

	if (spinner->in_focus) {
    146e:	7de3      	ldrb	r3, [r4, #23]
    1470:	2b00      	cmp	r3, #0
    1472:	d01a      	beq.n	14aa <gfx_mono_spinctrl_draw+0x46>
		gfx_mono_put_bitmap(&gfx_mono_spinctrl_bitmap_spin_indicator,
    1474:	7da2      	ldrb	r2, [r4, #22]
    1476:	217c      	movs	r1, #124	; 0x7c
    1478:	4824      	ldr	r0, [pc, #144]	; (150c <gfx_mono_spinctrl_draw+0xa8>)
    147a:	4b25      	ldr	r3, [pc, #148]	; (1510 <gfx_mono_spinctrl_draw+0xac>)
    147c:	4798      	blx	r3
		gfx_mono_spinctrl_draw_spin_indicator(spinner, true);
	} else {
		gfx_mono_spinctrl_draw_spin_indicator(spinner, false);
	}

	if (spinner->datatype == SPINTYPE_INTEGER) {
    147e:	7923      	ldrb	r3, [r4, #4]
    1480:	2b01      	cmp	r3, #1
    1482:	d01b      	beq.n	14bc <gfx_mono_spinctrl_draw+0x58>
				GFX_MONO_SPINCTRL_SPIN_INDICATOR_WIDTH,
				SYSFONT_HEIGHT,
				GFX_PIXEL_CLR);
		/* Draw integer data */
		gfx_mono_draw_string(string_buf, offset, spinner->y, &sysfont);
	} else if (spinner->datatype == SPINTYPE_STRING) {
    1484:	2b00      	cmp	r3, #0
    1486:	d02f      	beq.n	14e8 <gfx_mono_spinctrl_draw+0x84>
		/* Draw string data */
		gfx_mono_draw_progmem_string(
				(char PROGMEM_PTR_T)spinner->strings.data[index], offset,
				spinner->y, &sysfont);
	}
}
    1488:	b006      	add	sp, #24
    148a:	bd70      	pop	{r4, r5, r6, pc}
		gfx_mono_draw_filled_rect(0, spinner->y, GFX_MONO_LCD_WIDTH,
    148c:	7d81      	ldrb	r1, [r0, #22]
    148e:	2300      	movs	r3, #0
    1490:	9300      	str	r3, [sp, #0]
    1492:	3307      	adds	r3, #7
    1494:	2280      	movs	r2, #128	; 0x80
    1496:	2000      	movs	r0, #0
    1498:	4d1e      	ldr	r5, [pc, #120]	; (1514 <gfx_mono_spinctrl_draw+0xb0>)
    149a:	47a8      	blx	r5
		gfx_mono_draw_progmem_string((char PROGMEM_PTR_T)spinner->title,
    149c:	7da2      	ldrb	r2, [r4, #22]
    149e:	4b1e      	ldr	r3, [pc, #120]	; (1518 <gfx_mono_spinctrl_draw+0xb4>)
    14a0:	2105      	movs	r1, #5
    14a2:	6820      	ldr	r0, [r4, #0]
    14a4:	4d1d      	ldr	r5, [pc, #116]	; (151c <gfx_mono_spinctrl_draw+0xb8>)
    14a6:	47a8      	blx	r5
    14a8:	e7e1      	b.n	146e <gfx_mono_spinctrl_draw+0xa>
		gfx_mono_draw_filled_rect(GFX_MONO_LCD_WIDTH -
    14aa:	7da1      	ldrb	r1, [r4, #22]
    14ac:	2300      	movs	r3, #0
    14ae:	9300      	str	r3, [sp, #0]
    14b0:	3308      	adds	r3, #8
    14b2:	2204      	movs	r2, #4
    14b4:	207c      	movs	r0, #124	; 0x7c
    14b6:	4d17      	ldr	r5, [pc, #92]	; (1514 <gfx_mono_spinctrl_draw+0xb0>)
    14b8:	47a8      	blx	r5
    14ba:	e7e0      	b.n	147e <gfx_mono_spinctrl_draw+0x1a>
		snprintf(string_buf, sizeof(string_buf), "%d",
    14bc:	2208      	movs	r2, #8
    14be:	5ea3      	ldrsh	r3, [r4, r2]
    14c0:	4a17      	ldr	r2, [pc, #92]	; (1520 <gfx_mono_spinctrl_draw+0xbc>)
    14c2:	2109      	movs	r1, #9
    14c4:	a803      	add	r0, sp, #12
    14c6:	4d17      	ldr	r5, [pc, #92]	; (1524 <gfx_mono_spinctrl_draw+0xc0>)
    14c8:	47a8      	blx	r5
		gfx_mono_draw_filled_rect(offset, spinner->y,
    14ca:	7da1      	ldrb	r1, [r4, #22]
    14cc:	2300      	movs	r3, #0
    14ce:	9300      	str	r3, [sp, #0]
    14d0:	3307      	adds	r3, #7
    14d2:	2232      	movs	r2, #50	; 0x32
    14d4:	204a      	movs	r0, #74	; 0x4a
    14d6:	4d0f      	ldr	r5, [pc, #60]	; (1514 <gfx_mono_spinctrl_draw+0xb0>)
    14d8:	47a8      	blx	r5
		gfx_mono_draw_string(string_buf, offset, spinner->y, &sysfont);
    14da:	7da2      	ldrb	r2, [r4, #22]
    14dc:	4b0e      	ldr	r3, [pc, #56]	; (1518 <gfx_mono_spinctrl_draw+0xb4>)
    14de:	214a      	movs	r1, #74	; 0x4a
    14e0:	a803      	add	r0, sp, #12
    14e2:	4c11      	ldr	r4, [pc, #68]	; (1528 <gfx_mono_spinctrl_draw+0xc4>)
    14e4:	47a0      	blx	r4
    14e6:	e7cf      	b.n	1488 <gfx_mono_spinctrl_draw+0x24>
		index = spinner->strings.index;
    14e8:	7b25      	ldrb	r5, [r4, #12]
		gfx_mono_draw_filled_rect(offset, spinner->y,
    14ea:	7da1      	ldrb	r1, [r4, #22]
    14ec:	9300      	str	r3, [sp, #0]
    14ee:	3307      	adds	r3, #7
    14f0:	2232      	movs	r2, #50	; 0x32
    14f2:	204a      	movs	r0, #74	; 0x4a
    14f4:	4e07      	ldr	r6, [pc, #28]	; (1514 <gfx_mono_spinctrl_draw+0xb0>)
    14f6:	47b0      	blx	r6
		gfx_mono_draw_progmem_string(
    14f8:	7da2      	ldrb	r2, [r4, #22]
    14fa:	68a3      	ldr	r3, [r4, #8]
    14fc:	00ad      	lsls	r5, r5, #2
    14fe:	58e8      	ldr	r0, [r5, r3]
    1500:	4b05      	ldr	r3, [pc, #20]	; (1518 <gfx_mono_spinctrl_draw+0xb4>)
    1502:	214a      	movs	r1, #74	; 0x4a
    1504:	4c05      	ldr	r4, [pc, #20]	; (151c <gfx_mono_spinctrl_draw+0xb8>)
    1506:	47a0      	blx	r4
}
    1508:	e7be      	b.n	1488 <gfx_mono_spinctrl_draw+0x24>
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	20000034 	.word	0x20000034
    1510:	000012cd 	.word	0x000012cd
    1514:	00001299 	.word	0x00001299
    1518:	2000003c 	.word	0x2000003c
    151c:	000019a5 	.word	0x000019a5
    1520:	000049a0 	.word	0x000049a0
    1524:	00003935 	.word	0x00003935
    1528:	00001955 	.word	0x00001955

0000152c <gfx_mono_spinctrl_init>:
void gfx_mono_spinctrl_init(struct gfx_mono_spinctrl *spinner,
		gfx_mono_spinctrl_type_t datatype, PROGMEM_STRING_T title,
		PROGMEM_STRING_T *data, int16_t lower_limit,
		int16_t upper_limit,
		gfx_coord_t y)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	ac04      	add	r4, sp, #16
    1530:	2500      	movs	r5, #0
    1532:	5f64      	ldrsh	r4, [r4, r5]
    1534:	ad05      	add	r5, sp, #20
    1536:	2600      	movs	r6, #0
    1538:	5fae      	ldrsh	r6, [r5, r6]
    153a:	ad06      	add	r5, sp, #24
    153c:	782d      	ldrb	r5, [r5, #0]
	/* Initialization of spinner parameters */
	spinner->title = title;
    153e:	6002      	str	r2, [r0, #0]
	spinner->datatype = datatype;
    1540:	7101      	strb	r1, [r0, #4]
	spinner->lower_limit = lower_limit;
    1542:	8244      	strh	r4, [r0, #18]
	spinner->upper_limit = upper_limit;
    1544:	8286      	strh	r6, [r0, #20]
	spinner->y = y;
    1546:	7585      	strb	r5, [r0, #22]
	spinner->in_focus = false;
    1548:	2200      	movs	r2, #0
    154a:	75c2      	strb	r2, [r0, #23]
	spinner->last_saved_value = spinner->lower_limit;
    154c:	8204      	strh	r4, [r0, #16]

	if (datatype == SPINTYPE_STRING) {
    154e:	2900      	cmp	r1, #0
    1550:	d001      	beq.n	1556 <gfx_mono_spinctrl_init+0x2a>
		spinner->strings.data = data;
		spinner->strings.index = lower_limit;
	} else {
		spinner->integer_data = lower_limit;
    1552:	8104      	strh	r4, [r0, #8]
	}
}
    1554:	bd70      	pop	{r4, r5, r6, pc}
		spinner->strings.data = data;
    1556:	6083      	str	r3, [r0, #8]
		spinner->strings.index = lower_limit;
    1558:	7304      	strb	r4, [r0, #12]
    155a:	e7fb      	b.n	1554 <gfx_mono_spinctrl_init+0x28>

0000155c <gfx_mono_spinctrl_spincollection_init>:
 * \param[out] collection pointer to gfx_mono_spinctrl_spincollection to Initialize
 */
void gfx_mono_spinctrl_spincollection_init(struct
		gfx_mono_spinctrl_spincollection *collection)
{
	collection->active_spinner = false;
    155c:	2300      	movs	r3, #0
    155e:	7303      	strb	r3, [r0, #12]
	collection->current_selection = 0;
    1560:	7243      	strb	r3, [r0, #9]
	collection->number_of_spinners = 0;
    1562:	7203      	strb	r3, [r0, #8]
	collection->init = true;
    1564:	3301      	adds	r3, #1
    1566:	7343      	strb	r3, [r0, #13]
}
    1568:	4770      	bx	lr

0000156a <gfx_mono_spinctrl_spincollection_add_spinner>:
 *
 */
void gfx_mono_spinctrl_spincollection_add_spinner(struct
		gfx_mono_spinctrl *spinner,
		struct gfx_mono_spinctrl_spincollection *spinners)
{
    156a:	b510      	push	{r4, lr}
	uint8_t i;
	struct gfx_mono_spinctrl *lastspinner;

	/* Do not add more spinner elements than maximum number of spinners */
	if (spinners->number_of_spinners >=
    156c:	7a0b      	ldrb	r3, [r1, #8]
    156e:	2b02      	cmp	r3, #2
    1570:	d809      	bhi.n	1586 <gfx_mono_spinctrl_spincollection_add_spinner+0x1c>
			GFX_MONO_SPINCTRL_MAX_ELEMENTS_IN_SPINCOLLECTION) {
		return;
	}

	/* Place new spinner below previous spinners on screen */
	spinner->y = (SYSFONT_HEIGHT + 1) * spinners->number_of_spinners;
    1572:	00db      	lsls	r3, r3, #3
    1574:	7583      	strb	r3, [r0, #22]

	/* Add pointer to the spinner in spincollection if empty */
	if (spinners->number_of_spinners == 0) {
    1576:	7a0c      	ldrb	r4, [r1, #8]
    1578:	2c00      	cmp	r4, #0
    157a:	d105      	bne.n	1588 <gfx_mono_spinctrl_spincollection_add_spinner+0x1e>
		spinners->collection = spinner;
    157c:	6008      	str	r0, [r1, #0]
		 * spinner */
		spinner->prev = lastspinner;
	}

	/* Set added spinner as last spinner in collection */
	spinners->collection_last = spinner;
    157e:	6048      	str	r0, [r1, #4]
	/* Update number of spinners in collection */
	spinners->number_of_spinners++;
    1580:	7a0b      	ldrb	r3, [r1, #8]
    1582:	3301      	adds	r3, #1
    1584:	720b      	strb	r3, [r1, #8]
}
    1586:	bd10      	pop	{r4, pc}
		lastspinner = spinners->collection;
    1588:	680a      	ldr	r2, [r1, #0]
		for (i = 1; i < spinners->number_of_spinners; i++) {
    158a:	2c01      	cmp	r4, #1
    158c:	d905      	bls.n	159a <gfx_mono_spinctrl_spincollection_add_spinner+0x30>
    158e:	2301      	movs	r3, #1
			lastspinner = lastspinner->next;
    1590:	6992      	ldr	r2, [r2, #24]
		for (i = 1; i < spinners->number_of_spinners; i++) {
    1592:	3301      	adds	r3, #1
    1594:	b2db      	uxtb	r3, r3
    1596:	429c      	cmp	r4, r3
    1598:	d1fa      	bne.n	1590 <gfx_mono_spinctrl_spincollection_add_spinner+0x26>
		lastspinner->next = spinner;
    159a:	6190      	str	r0, [r2, #24]
		spinner->prev = lastspinner;
    159c:	61c2      	str	r2, [r0, #28]
    159e:	e7ee      	b.n	157e <gfx_mono_spinctrl_spincollection_add_spinner+0x14>

000015a0 <gfx_mono_spinctrl_spincollection_show>:
 *
 * \param[in] spinners pointer to initialized spincollection to display
 */
void gfx_mono_spinctrl_spincollection_show(struct
		gfx_mono_spinctrl_spincollection *spinners)
{
    15a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15a2:	b083      	sub	sp, #12
    15a4:	0006      	movs	r6, r0
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Clear screen */
	gfx_mono_draw_filled_rect(0, 0, GFX_MONO_LCD_WIDTH, GFX_MONO_LCD_HEIGHT,
    15a6:	2300      	movs	r3, #0
    15a8:	9300      	str	r3, [sp, #0]
    15aa:	3320      	adds	r3, #32
    15ac:	2280      	movs	r2, #128	; 0x80
    15ae:	2100      	movs	r1, #0
    15b0:	2000      	movs	r0, #0
    15b2:	4c0d      	ldr	r4, [pc, #52]	; (15e8 <gfx_mono_spinctrl_spincollection_show+0x48>)
    15b4:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	/* Make sure there are spinners in the collection */
	if (spinners->number_of_spinners == 0) {
    15b6:	7a33      	ldrb	r3, [r6, #8]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d013      	beq.n	15e4 <gfx_mono_spinctrl_spincollection_show+0x44>
		return;
	}

	/* Draw spinners on screen */
	iterator = spinners->collection;
    15bc:	6835      	ldr	r5, [r6, #0]
    15be:	2400      	movs	r4, #0
	for (i = 0; i < spinners->number_of_spinners; i++) {
		gfx_mono_spinctrl_draw(iterator, true);
    15c0:	4f0a      	ldr	r7, [pc, #40]	; (15ec <gfx_mono_spinctrl_spincollection_show+0x4c>)
    15c2:	2101      	movs	r1, #1
    15c4:	0028      	movs	r0, r5
    15c6:	47b8      	blx	r7
		iterator = iterator->next;
    15c8:	69ad      	ldr	r5, [r5, #24]
	for (i = 0; i < spinners->number_of_spinners; i++) {
    15ca:	3401      	adds	r4, #1
    15cc:	b2e4      	uxtb	r4, r4
    15ce:	7a33      	ldrb	r3, [r6, #8]
    15d0:	42a3      	cmp	r3, r4
    15d2:	d8f6      	bhi.n	15c2 <gfx_mono_spinctrl_spincollection_show+0x22>
	}
	/* Draw OK button at bottom of screen */
	gfx_mono_spinctrl_draw_button(true, false);
    15d4:	2100      	movs	r1, #0
    15d6:	2001      	movs	r0, #1
    15d8:	4b05      	ldr	r3, [pc, #20]	; (15f0 <gfx_mono_spinctrl_spincollection_show+0x50>)
    15da:	4798      	blx	r3
	/* Draw indicator arrow in front of first spinner */
	gfx_mono_spinctrl_draw_indicator(spinners->collection, true);
    15dc:	6830      	ldr	r0, [r6, #0]
    15de:	2101      	movs	r1, #1
    15e0:	4b04      	ldr	r3, [pc, #16]	; (15f4 <gfx_mono_spinctrl_spincollection_show+0x54>)
    15e2:	4798      	blx	r3
}
    15e4:	b003      	add	sp, #12
    15e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15e8:	00001299 	.word	0x00001299
    15ec:	00001465 	.word	0x00001465
    15f0:	000013b9 	.word	0x000013b9
    15f4:	00001385 	.word	0x00001385

000015f8 <gfx_mono_spinctrl_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE spinner spinning
 * \retval GFX_MONO_SPINCTRL_EVENT_BACK spinner deselected
 */
int16_t gfx_mono_spinctrl_process_key(struct gfx_mono_spinctrl *spinner,
		uint8_t keycode)
{
    15f8:	b510      	push	{r4, lr}
    15fa:	0004      	movs	r4, r0
	switch (keycode) {
    15fc:	290d      	cmp	r1, #13
    15fe:	d061      	beq.n	16c4 <gfx_mono_spinctrl_process_key+0xcc>
    1600:	d91a      	bls.n	1638 <gfx_mono_spinctrl_process_key+0x40>
    1602:	2926      	cmp	r1, #38	; 0x26
    1604:	d039      	beq.n	167a <gfx_mono_spinctrl_process_key+0x82>
    1606:	2928      	cmp	r1, #40	; 0x28
    1608:	d000      	beq.n	160c <gfx_mono_spinctrl_process_key+0x14>
    160a:	e081      	b.n	1710 <gfx_mono_spinctrl_process_key+0x118>
	case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
		if (spinner->in_focus) {
    160c:	7dc3      	ldrb	r3, [r0, #23]
			/* Update spinner on display */
			gfx_mono_spinctrl_draw(spinner, false);
		}

		/* Nothing selected yet */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    160e:	20ff      	movs	r0, #255	; 0xff
		if (spinner->in_focus) {
    1610:	2b00      	cmp	r3, #0
    1612:	d022      	beq.n	165a <gfx_mono_spinctrl_process_key+0x62>
	if (spinner->datatype == SPINTYPE_INTEGER) {
    1614:	7923      	ldrb	r3, [r4, #4]
    1616:	2b01      	cmp	r3, #1
    1618:	d020      	beq.n	165c <gfx_mono_spinctrl_process_key+0x64>
	} else if (spinner->datatype == SPINTYPE_STRING) {
    161a:	2b00      	cmp	r3, #0
    161c:	d106      	bne.n	162c <gfx_mono_spinctrl_process_key+0x34>
		if (spinner->strings.index > (spinner->lower_limit)) {
    161e:	7b23      	ldrb	r3, [r4, #12]
    1620:	2112      	movs	r1, #18
    1622:	5e62      	ldrsh	r2, [r4, r1]
    1624:	4293      	cmp	r3, r2
    1626:	dc25      	bgt.n	1674 <gfx_mono_spinctrl_process_key+0x7c>
			spinner->strings.index = spinner->upper_limit;
    1628:	8aa3      	ldrh	r3, [r4, #20]
    162a:	7323      	strb	r3, [r4, #12]
			gfx_mono_spinctrl_draw(spinner, false);
    162c:	2100      	movs	r1, #0
    162e:	0020      	movs	r0, r4
    1630:	4b38      	ldr	r3, [pc, #224]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    1632:	4798      	blx	r3
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1634:	20ff      	movs	r0, #255	; 0xff
    1636:	e010      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
	switch (keycode) {
    1638:	2908      	cmp	r1, #8
    163a:	d000      	beq.n	163e <gfx_mono_spinctrl_process_key+0x46>
    163c:	e068      	b.n	1710 <gfx_mono_spinctrl_process_key+0x118>
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
		}

	case GFX_MONO_SPINCTRL_KEYCODE_BACK:
		/* User pressed "back" key, */
		spinner->in_focus = false;
    163e:	2300      	movs	r3, #0
    1640:	75c3      	strb	r3, [r0, #23]
		/* Spinner choice aborted, show last saved value instead */
		if (spinner->datatype == SPINTYPE_INTEGER) {
    1642:	7903      	ldrb	r3, [r0, #4]
    1644:	2b01      	cmp	r3, #1
    1646:	d060      	beq.n	170a <gfx_mono_spinctrl_process_key+0x112>
			spinner->integer_data = spinner->last_saved_value;
		} else if (spinner->datatype == SPINTYPE_STRING) {
    1648:	2b00      	cmp	r3, #0
    164a:	d101      	bne.n	1650 <gfx_mono_spinctrl_process_key+0x58>
			spinner->strings.index = spinner->last_saved_value;
    164c:	8a03      	ldrh	r3, [r0, #16]
    164e:	7303      	strb	r3, [r0, #12]
		}

		gfx_mono_spinctrl_draw(spinner, false);
    1650:	2100      	movs	r1, #0
    1652:	0020      	movs	r0, r4
    1654:	4b2f      	ldr	r3, [pc, #188]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    1656:	4798      	blx	r3
		return GFX_MONO_SPINCTRL_EVENT_BACK;
    1658:	20fe      	movs	r0, #254	; 0xfe

	default:
		/* Unknown key event */
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	}
}
    165a:	bd10      	pop	{r4, pc}
		if (spinner->integer_data > spinner->lower_limit) {
    165c:	2208      	movs	r2, #8
    165e:	5ea3      	ldrsh	r3, [r4, r2]
    1660:	2112      	movs	r1, #18
    1662:	5e62      	ldrsh	r2, [r4, r1]
    1664:	429a      	cmp	r2, r3
    1666:	da02      	bge.n	166e <gfx_mono_spinctrl_process_key+0x76>
			spinner->integer_data--;
    1668:	3b01      	subs	r3, #1
    166a:	8123      	strh	r3, [r4, #8]
    166c:	e7de      	b.n	162c <gfx_mono_spinctrl_process_key+0x34>
			spinner->integer_data = spinner->upper_limit;
    166e:	8aa3      	ldrh	r3, [r4, #20]
    1670:	8123      	strh	r3, [r4, #8]
    1672:	e7db      	b.n	162c <gfx_mono_spinctrl_process_key+0x34>
			spinner->strings.index--;
    1674:	3b01      	subs	r3, #1
    1676:	7323      	strb	r3, [r4, #12]
    1678:	e7d8      	b.n	162c <gfx_mono_spinctrl_process_key+0x34>
		if (spinner->in_focus) {
    167a:	7dc3      	ldrb	r3, [r0, #23]
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    167c:	20ff      	movs	r0, #255	; 0xff
		if (spinner->in_focus) {
    167e:	2b00      	cmp	r3, #0
    1680:	d0eb      	beq.n	165a <gfx_mono_spinctrl_process_key+0x62>
	if (spinner->datatype == SPINTYPE_INTEGER) {
    1682:	7923      	ldrb	r3, [r4, #4]
    1684:	2b01      	cmp	r3, #1
    1686:	d00e      	beq.n	16a6 <gfx_mono_spinctrl_process_key+0xae>
	} else if (spinner->datatype == SPINTYPE_STRING) {
    1688:	2b00      	cmp	r3, #0
    168a:	d106      	bne.n	169a <gfx_mono_spinctrl_process_key+0xa2>
		if (spinner->strings.index < spinner->upper_limit) {
    168c:	7b23      	ldrb	r3, [r4, #12]
    168e:	2114      	movs	r1, #20
    1690:	5e62      	ldrsh	r2, [r4, r1]
    1692:	4293      	cmp	r3, r2
    1694:	db13      	blt.n	16be <gfx_mono_spinctrl_process_key+0xc6>
			(spinner->strings.index) = spinner->lower_limit;
    1696:	8a63      	ldrh	r3, [r4, #18]
    1698:	7323      	strb	r3, [r4, #12]
			gfx_mono_spinctrl_draw(spinner, false);
    169a:	2100      	movs	r1, #0
    169c:	0020      	movs	r0, r4
    169e:	4b1d      	ldr	r3, [pc, #116]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    16a0:	4798      	blx	r3
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    16a2:	20ff      	movs	r0, #255	; 0xff
    16a4:	e7d9      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
		if (spinner->integer_data < spinner->upper_limit) {
    16a6:	2208      	movs	r2, #8
    16a8:	5ea3      	ldrsh	r3, [r4, r2]
    16aa:	2114      	movs	r1, #20
    16ac:	5e62      	ldrsh	r2, [r4, r1]
    16ae:	429a      	cmp	r2, r3
    16b0:	dd02      	ble.n	16b8 <gfx_mono_spinctrl_process_key+0xc0>
			spinner->integer_data++;
    16b2:	3301      	adds	r3, #1
    16b4:	8123      	strh	r3, [r4, #8]
    16b6:	e7f0      	b.n	169a <gfx_mono_spinctrl_process_key+0xa2>
			spinner->integer_data = spinner->lower_limit;
    16b8:	8a63      	ldrh	r3, [r4, #18]
    16ba:	8123      	strh	r3, [r4, #8]
    16bc:	e7ed      	b.n	169a <gfx_mono_spinctrl_process_key+0xa2>
			spinner->strings.index++;
    16be:	3301      	adds	r3, #1
    16c0:	7323      	strb	r3, [r4, #12]
    16c2:	e7ea      	b.n	169a <gfx_mono_spinctrl_process_key+0xa2>
		if (spinner->in_focus) {
    16c4:	7dc3      	ldrb	r3, [r0, #23]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d018      	beq.n	16fc <gfx_mono_spinctrl_process_key+0x104>
			if (spinner->datatype == SPINTYPE_INTEGER) {
    16ca:	7903      	ldrb	r3, [r0, #4]
    16cc:	2b01      	cmp	r3, #1
    16ce:	d004      	beq.n	16da <gfx_mono_spinctrl_process_key+0xe2>
			} else if (spinner->datatype == SPINTYPE_STRING) {
    16d0:	2b00      	cmp	r3, #0
    16d2:	d00b      	beq.n	16ec <gfx_mono_spinctrl_process_key+0xf4>
		spinner->in_focus = false;
    16d4:	2300      	movs	r3, #0
    16d6:	75c3      	strb	r3, [r0, #23]
    16d8:	e7ba      	b.n	1650 <gfx_mono_spinctrl_process_key+0x58>
				spinner->in_focus = false;
    16da:	2300      	movs	r3, #0
    16dc:	75c3      	strb	r3, [r0, #23]
				gfx_mono_spinctrl_draw(spinner, false);
    16de:	2100      	movs	r1, #0
    16e0:	4b0c      	ldr	r3, [pc, #48]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    16e2:	4798      	blx	r3
					= spinner->integer_data;
    16e4:	2308      	movs	r3, #8
    16e6:	5ee0      	ldrsh	r0, [r4, r3]
    16e8:	8220      	strh	r0, [r4, #16]
				return spinner->integer_data;
    16ea:	e7b6      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
				spinner->in_focus = false;
    16ec:	75c3      	strb	r3, [r0, #23]
				gfx_mono_spinctrl_draw(spinner, false);
    16ee:	2100      	movs	r1, #0
    16f0:	4b08      	ldr	r3, [pc, #32]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    16f2:	4798      	blx	r3
					= spinner->strings.index;
    16f4:	7b20      	ldrb	r0, [r4, #12]
    16f6:	8220      	strh	r0, [r4, #16]
				return spinner->strings.index;
    16f8:	b200      	sxth	r0, r0
    16fa:	e7ae      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
			spinner->in_focus = true;
    16fc:	2301      	movs	r3, #1
    16fe:	75c3      	strb	r3, [r0, #23]
			gfx_mono_spinctrl_draw(spinner, false);
    1700:	2100      	movs	r1, #0
    1702:	4b04      	ldr	r3, [pc, #16]	; (1714 <gfx_mono_spinctrl_process_key+0x11c>)
    1704:	4798      	blx	r3
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1706:	20ff      	movs	r0, #255	; 0xff
    1708:	e7a7      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
			spinner->integer_data = spinner->last_saved_value;
    170a:	8a03      	ldrh	r3, [r0, #16]
    170c:	8103      	strh	r3, [r0, #8]
    170e:	e79f      	b.n	1650 <gfx_mono_spinctrl_process_key+0x58>
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1710:	20ff      	movs	r0, #255	; 0xff
    1712:	e7a2      	b.n	165a <gfx_mono_spinctrl_process_key+0x62>
    1714:	00001465 	.word	0x00001465

00001718 <gfx_mono_spinctrl_spincollection_process_key>:
 * \retval GFX_MONO_SPINCTRL_EVENT_IDLE    user is navigating in spincollection
 */
int16_t gfx_mono_spinctrl_spincollection_process_key(struct
		gfx_mono_spinctrl_spincollection *spinners, uint8_t keycode,
		int16_t results[])
{
    1718:	b570      	push	{r4, r5, r6, lr}
    171a:	0005      	movs	r5, r0
    171c:	0016      	movs	r6, r2
	uint8_t i;
	struct gfx_mono_spinctrl *iterator;

	/* Make sure there are spinners in the collection, if not, cancel */
	if (spinners->number_of_spinners == 0) {
    171e:	7a03      	ldrb	r3, [r0, #8]
		return GFX_MONO_SPINCTRL_EVENT_BACK;
    1720:	20fe      	movs	r0, #254	; 0xfe
	if (spinners->number_of_spinners == 0) {
    1722:	2b00      	cmp	r3, #0
    1724:	d050      	beq.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
	}

	/* Store initial values in results array first time function is run */
	if (spinners->init) {
    1726:	7b6b      	ldrb	r3, [r5, #13]
    1728:	2b00      	cmp	r3, #0
    172a:	d015      	beq.n	1758 <gfx_mono_spinctrl_spincollection_process_key+0x40>
		iterator = spinners->collection;
    172c:	682a      	ldr	r2, [r5, #0]
    172e:	2300      	movs	r3, #0
    1730:	e009      	b.n	1746 <gfx_mono_spinctrl_spincollection_process_key+0x2e>
		for (i = 0; i < spinners->number_of_spinners; i++) {
			if (iterator->datatype == SPINTYPE_INTEGER) {
				results[i] = iterator->integer_data;
    1732:	2008      	movs	r0, #8
    1734:	5e14      	ldrsh	r4, [r2, r0]
    1736:	0058      	lsls	r0, r3, #1
    1738:	5384      	strh	r4, [r0, r6]
			} else {
				results[i] = iterator->strings.index;
			}

			iterator = iterator->next;
    173a:	6992      	ldr	r2, [r2, #24]
		for (i = 0; i < spinners->number_of_spinners; i++) {
    173c:	3301      	adds	r3, #1
    173e:	b2db      	uxtb	r3, r3
    1740:	7a28      	ldrb	r0, [r5, #8]
    1742:	4298      	cmp	r0, r3
    1744:	d906      	bls.n	1754 <gfx_mono_spinctrl_spincollection_process_key+0x3c>
			if (iterator->datatype == SPINTYPE_INTEGER) {
    1746:	7910      	ldrb	r0, [r2, #4]
    1748:	2801      	cmp	r0, #1
    174a:	d0f2      	beq.n	1732 <gfx_mono_spinctrl_spincollection_process_key+0x1a>
				results[i] = iterator->strings.index;
    174c:	0058      	lsls	r0, r3, #1
    174e:	7b14      	ldrb	r4, [r2, #12]
    1750:	5384      	strh	r4, [r0, r6]
    1752:	e7f2      	b.n	173a <gfx_mono_spinctrl_spincollection_process_key+0x22>
		}
		spinners->init = false;
    1754:	2300      	movs	r3, #0
    1756:	736b      	strb	r3, [r5, #13]
	}

	/* Find current spinner selection */
	iterator = spinners->collection;
    1758:	682c      	ldr	r4, [r5, #0]
	if (spinners->current_selection != GFX_MONO_SPINCTRL_BUTTON) {
    175a:	7a6a      	ldrb	r2, [r5, #9]
		for (i = 0; i < spinners->current_selection; i++) {
    175c:	1e53      	subs	r3, r2, #1
    175e:	b2db      	uxtb	r3, r3
    1760:	2bfd      	cmp	r3, #253	; 0xfd
    1762:	d805      	bhi.n	1770 <gfx_mono_spinctrl_spincollection_process_key+0x58>
    1764:	2300      	movs	r3, #0
			iterator = iterator->next;
    1766:	69a4      	ldr	r4, [r4, #24]
		for (i = 0; i < spinners->current_selection; i++) {
    1768:	3301      	adds	r3, #1
    176a:	b2db      	uxtb	r3, r3
    176c:	429a      	cmp	r2, r3
    176e:	d1fa      	bne.n	1766 <gfx_mono_spinctrl_spincollection_process_key+0x4e>
		}
	}

	if (spinners->active_spinner) {
    1770:	7b2b      	ldrb	r3, [r5, #12]
    1772:	2b00      	cmp	r3, #0
    1774:	d119      	bne.n	17aa <gfx_mono_spinctrl_spincollection_process_key+0x92>
			spinners->active_spinner = false;
		}

		return GFX_MONO_SPINCTRL_EVENT_IDLE;
	} else {
		switch (keycode) {
    1776:	290d      	cmp	r1, #13
    1778:	d100      	bne.n	177c <gfx_mono_spinctrl_spincollection_process_key+0x64>
    177a:	e070      	b.n	185e <gfx_mono_spinctrl_spincollection_process_key+0x146>
    177c:	d929      	bls.n	17d2 <gfx_mono_spinctrl_spincollection_process_key+0xba>
    177e:	2926      	cmp	r1, #38	; 0x26
    1780:	d044      	beq.n	180c <gfx_mono_spinctrl_spincollection_process_key+0xf4>
    1782:	2928      	cmp	r1, #40	; 0x28
    1784:	d128      	bne.n	17d8 <gfx_mono_spinctrl_spincollection_process_key+0xc0>
		case GFX_MONO_SPINCTRL_KEYCODE_DOWN:
			if (spinners->current_selection ==
    1786:	2aff      	cmp	r2, #255	; 0xff
    1788:	d028      	beq.n	17dc <gfx_mono_spinctrl_spincollection_process_key+0xc4>
				/* Draw indicator arrow in front of first
				 * spinner */
				gfx_mono_spinctrl_draw_indicator(iterator,
						true);
			} else if (spinners->current_selection <
					spinners->number_of_spinners - 1) {
    178a:	7a2b      	ldrb	r3, [r5, #8]
    178c:	3b01      	subs	r3, #1
			} else if (spinners->current_selection <
    178e:	429a      	cmp	r2, r3
    1790:	da30      	bge.n	17f4 <gfx_mono_spinctrl_spincollection_process_key+0xdc>
				/* Delete indicator arrow */
				gfx_mono_spinctrl_draw_indicator(iterator,
    1792:	2100      	movs	r1, #0
    1794:	0020      	movs	r0, r4
    1796:	4e38      	ldr	r6, [pc, #224]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    1798:	47b0      	blx	r6
						false);
				spinners->current_selection++;
    179a:	7a6b      	ldrb	r3, [r5, #9]
    179c:	3301      	adds	r3, #1
    179e:	726b      	strb	r3, [r5, #9]
				/* Draw indicator arrow in front of new spinner */
				gfx_mono_spinctrl_draw_indicator(iterator->next,
    17a0:	69a0      	ldr	r0, [r4, #24]
    17a2:	2101      	movs	r1, #1
    17a4:	47b0      	blx	r6
					= GFX_MONO_SPINCTRL_BUTTON;
				/* Draw indicator arrow in front of button */
				gfx_mono_spinctrl_draw_button(true, true);
			}

			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    17a6:	20ff      	movs	r0, #255	; 0xff
    17a8:	e00e      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
		spinners->selection = gfx_mono_spinctrl_process_key(iterator,
    17aa:	0020      	movs	r0, r4
    17ac:	4b33      	ldr	r3, [pc, #204]	; (187c <gfx_mono_spinctrl_spincollection_process_key+0x164>)
    17ae:	4798      	blx	r3
    17b0:	b283      	uxth	r3, r0
    17b2:	816b      	strh	r3, [r5, #10]
		if (spinners->selection == GFX_MONO_SPINCTRL_EVENT_BACK) {
    17b4:	2bfe      	cmp	r3, #254	; 0xfe
    17b6:	d008      	beq.n	17ca <gfx_mono_spinctrl_spincollection_process_key+0xb2>
		} else if (spinners->selection !=
    17b8:	2bff      	cmp	r3, #255	; 0xff
    17ba:	d05b      	beq.n	1874 <gfx_mono_spinctrl_spincollection_process_key+0x15c>
			results[spinners->current_selection]
    17bc:	7a6b      	ldrb	r3, [r5, #9]
				= spinners->selection;
    17be:	005b      	lsls	r3, r3, #1
    17c0:	5398      	strh	r0, [r3, r6]
			spinners->active_spinner = false;
    17c2:	2300      	movs	r3, #0
    17c4:	732b      	strb	r3, [r5, #12]
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    17c6:	20ff      	movs	r0, #255	; 0xff
		default:
			/* Unknown key event */
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
		}
	}
}
    17c8:	bd70      	pop	{r4, r5, r6, pc}
			spinners->active_spinner = false;
    17ca:	2300      	movs	r3, #0
    17cc:	732b      	strb	r3, [r5, #12]
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    17ce:	20ff      	movs	r0, #255	; 0xff
    17d0:	e7fa      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
			return GFX_MONO_SPINCTRL_EVENT_BACK;
    17d2:	20fe      	movs	r0, #254	; 0xfe
		switch (keycode) {
    17d4:	2908      	cmp	r1, #8
    17d6:	d0f7      	beq.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    17d8:	20ff      	movs	r0, #255	; 0xff
    17da:	e7f5      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				spinners->current_selection = 0;
    17dc:	2300      	movs	r3, #0
    17de:	726b      	strb	r3, [r5, #9]
				gfx_mono_spinctrl_draw_button(true, false);
    17e0:	2100      	movs	r1, #0
    17e2:	2001      	movs	r0, #1
    17e4:	4b26      	ldr	r3, [pc, #152]	; (1880 <gfx_mono_spinctrl_spincollection_process_key+0x168>)
    17e6:	4798      	blx	r3
				gfx_mono_spinctrl_draw_indicator(iterator,
    17e8:	2101      	movs	r1, #1
    17ea:	0020      	movs	r0, r4
    17ec:	4b22      	ldr	r3, [pc, #136]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    17ee:	4798      	blx	r3
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    17f0:	20ff      	movs	r0, #255	; 0xff
    17f2:	e7e9      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				gfx_mono_spinctrl_draw_indicator(iterator,
    17f4:	2100      	movs	r1, #0
    17f6:	0020      	movs	r0, r4
    17f8:	4b1f      	ldr	r3, [pc, #124]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    17fa:	4798      	blx	r3
					= GFX_MONO_SPINCTRL_BUTTON;
    17fc:	23ff      	movs	r3, #255	; 0xff
    17fe:	726b      	strb	r3, [r5, #9]
				gfx_mono_spinctrl_draw_button(true, true);
    1800:	2101      	movs	r1, #1
    1802:	2001      	movs	r0, #1
    1804:	4b1e      	ldr	r3, [pc, #120]	; (1880 <gfx_mono_spinctrl_spincollection_process_key+0x168>)
    1806:	4798      	blx	r3
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1808:	20ff      	movs	r0, #255	; 0xff
    180a:	e7dd      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
			if (spinners->current_selection ==
    180c:	2aff      	cmp	r2, #255	; 0xff
    180e:	d00d      	beq.n	182c <gfx_mono_spinctrl_spincollection_process_key+0x114>
			} else if (spinners->current_selection > 0) {
    1810:	2a00      	cmp	r2, #0
    1812:	d018      	beq.n	1846 <gfx_mono_spinctrl_spincollection_process_key+0x12e>
				gfx_mono_spinctrl_draw_indicator(iterator,
    1814:	2100      	movs	r1, #0
    1816:	0020      	movs	r0, r4
    1818:	4e17      	ldr	r6, [pc, #92]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    181a:	47b0      	blx	r6
				spinners->current_selection--;
    181c:	7a6b      	ldrb	r3, [r5, #9]
    181e:	3b01      	subs	r3, #1
    1820:	726b      	strb	r3, [r5, #9]
				gfx_mono_spinctrl_draw_indicator(iterator->prev,
    1822:	69e0      	ldr	r0, [r4, #28]
    1824:	2101      	movs	r1, #1
    1826:	47b0      	blx	r6
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1828:	20ff      	movs	r0, #255	; 0xff
    182a:	e7cd      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				gfx_mono_spinctrl_draw_button(true, false);
    182c:	2100      	movs	r1, #0
    182e:	2001      	movs	r0, #1
    1830:	4b13      	ldr	r3, [pc, #76]	; (1880 <gfx_mono_spinctrl_spincollection_process_key+0x168>)
    1832:	4798      	blx	r3
					= spinners->number_of_spinners - 1;
    1834:	7a2b      	ldrb	r3, [r5, #8]
    1836:	3b01      	subs	r3, #1
    1838:	726b      	strb	r3, [r5, #9]
				gfx_mono_spinctrl_draw_indicator(
    183a:	6868      	ldr	r0, [r5, #4]
    183c:	2101      	movs	r1, #1
    183e:	4b0e      	ldr	r3, [pc, #56]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    1840:	4798      	blx	r3
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1842:	20ff      	movs	r0, #255	; 0xff
    1844:	e7c0      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				gfx_mono_spinctrl_draw_indicator(iterator,
    1846:	2100      	movs	r1, #0
    1848:	0020      	movs	r0, r4
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <gfx_mono_spinctrl_spincollection_process_key+0x160>)
    184c:	4798      	blx	r3
					= GFX_MONO_SPINCTRL_BUTTON;
    184e:	23ff      	movs	r3, #255	; 0xff
    1850:	726b      	strb	r3, [r5, #9]
				gfx_mono_spinctrl_draw_button(true, true);
    1852:	2101      	movs	r1, #1
    1854:	2001      	movs	r0, #1
    1856:	4b0a      	ldr	r3, [pc, #40]	; (1880 <gfx_mono_spinctrl_spincollection_process_key+0x168>)
    1858:	4798      	blx	r3
			return GFX_MONO_SPINCTRL_EVENT_IDLE;
    185a:	20ff      	movs	r0, #255	; 0xff
    185c:	e7b4      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				return GFX_MONO_SPINCTRL_EVENT_FINISH;
    185e:	20fd      	movs	r0, #253	; 0xfd
			if (spinners->current_selection ==
    1860:	2aff      	cmp	r2, #255	; 0xff
    1862:	d0b1      	beq.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
				gfx_mono_spinctrl_process_key(iterator,
    1864:	210d      	movs	r1, #13
    1866:	0020      	movs	r0, r4
    1868:	4b04      	ldr	r3, [pc, #16]	; (187c <gfx_mono_spinctrl_spincollection_process_key+0x164>)
    186a:	4798      	blx	r3
				spinners->active_spinner = true;
    186c:	2301      	movs	r3, #1
    186e:	732b      	strb	r3, [r5, #12]
				return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1870:	20ff      	movs	r0, #255	; 0xff
    1872:	e7a9      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
		return GFX_MONO_SPINCTRL_EVENT_IDLE;
    1874:	20ff      	movs	r0, #255	; 0xff
    1876:	e7a7      	b.n	17c8 <gfx_mono_spinctrl_spincollection_process_key+0xb0>
    1878:	00001385 	.word	0x00001385
    187c:	000015f9 	.word	0x000015f9
    1880:	000013b9 	.word	0x000013b9

00001884 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1884:	b5f0      	push	{r4, r5, r6, r7, lr}
    1886:	46de      	mov	lr, fp
    1888:	4657      	mov	r7, sl
    188a:	464e      	mov	r6, r9
    188c:	4645      	mov	r5, r8
    188e:	b5e0      	push	{r5, r6, r7, lr}
    1890:	b085      	sub	sp, #20
    1892:	0004      	movs	r4, r0
    1894:	4688      	mov	r8, r1
    1896:	0015      	movs	r5, r2
    1898:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    189a:	7a5b      	ldrb	r3, [r3, #9]
    189c:	465a      	mov	r2, fp
    189e:	7a12      	ldrb	r2, [r2, #8]
    18a0:	2100      	movs	r1, #0
    18a2:	9100      	str	r1, [sp, #0]
    18a4:	0029      	movs	r1, r5
    18a6:	4640      	mov	r0, r8
    18a8:	4e28      	ldr	r6, [pc, #160]	; (194c <gfx_mono_draw_char+0xc8>)
    18aa:	47b0      	blx	r6
			GFX_PIXEL_CLR);

	switch (font->type) {
    18ac:	465b      	mov	r3, fp
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d006      	beq.n	18c2 <gfx_mono_draw_char+0x3e>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    18b4:	b005      	add	sp, #20
    18b6:	bc3c      	pop	{r2, r3, r4, r5}
    18b8:	4690      	mov	r8, r2
    18ba:	4699      	mov	r9, r3
    18bc:	46a2      	mov	sl, r4
    18be:	46ab      	mov	fp, r5
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    18c2:	465b      	mov	r3, fp
    18c4:	7a1a      	ldrb	r2, [r3, #8]
    18c6:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    18c8:	0752      	lsls	r2, r2, #29
    18ca:	d000      	beq.n	18ce <gfx_mono_draw_char+0x4a>
		char_row_size++;
    18cc:	3301      	adds	r3, #1
	glyph_data_offset = char_row_size * font->height *
    18ce:	465a      	mov	r2, fp
    18d0:	7a52      	ldrb	r2, [r2, #9]
    18d2:	4692      	mov	sl, r2
			((uint8_t)ch - font->first_char);
    18d4:	465a      	mov	r2, fp
    18d6:	7a97      	ldrb	r7, [r2, #10]
    18d8:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
    18da:	4652      	mov	r2, sl
    18dc:	4357      	muls	r7, r2
    18de:	435f      	muls	r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
    18e0:	b2bf      	uxth	r7, r7
    18e2:	465b      	mov	r3, fp
    18e4:	685b      	ldr	r3, [r3, #4]
    18e6:	469c      	mov	ip, r3
    18e8:	4467      	add	r7, ip
	gfx_coord_t inc_y = y;
    18ea:	9502      	str	r5, [sp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    18ec:	4643      	mov	r3, r8
    18ee:	9303      	str	r3, [sp, #12]
    18f0:	e020      	b.n	1934 <gfx_mono_draw_char+0xb0>
			if ((glyph_byte & 0x80)) {
    18f2:	b26b      	sxtb	r3, r5
    18f4:	2b00      	cmp	r3, #0
    18f6:	db0d      	blt.n	1914 <gfx_mono_draw_char+0x90>
			inc_x += 1;
    18f8:	3401      	adds	r4, #1
    18fa:	b2e4      	uxtb	r4, r4
			glyph_byte <<= 1;
    18fc:	006d      	lsls	r5, r5, #1
    18fe:	b2ed      	uxtb	r5, r5
		for (i = 0; i < pixelsToDraw; i++) {
    1900:	42a6      	cmp	r6, r4
    1902:	d00d      	beq.n	1920 <gfx_mono_draw_char+0x9c>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1904:	4643      	mov	r3, r8
    1906:	1ae3      	subs	r3, r4, r3
    1908:	464a      	mov	r2, r9
    190a:	421a      	tst	r2, r3
    190c:	d1f1      	bne.n	18f2 <gfx_mono_draw_char+0x6e>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    190e:	783d      	ldrb	r5, [r7, #0]
				glyph_data++;
    1910:	3701      	adds	r7, #1
    1912:	e7ee      	b.n	18f2 <gfx_mono_draw_char+0x6e>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1914:	2201      	movs	r2, #1
    1916:	9902      	ldr	r1, [sp, #8]
    1918:	0020      	movs	r0, r4
    191a:	4b0d      	ldr	r3, [pc, #52]	; (1950 <gfx_mono_draw_char+0xcc>)
    191c:	4798      	blx	r3
    191e:	e7eb      	b.n	18f8 <gfx_mono_draw_char+0x74>
		inc_y += 1;
    1920:	9b02      	ldr	r3, [sp, #8]
    1922:	3301      	adds	r3, #1
    1924:	b2db      	uxtb	r3, r3
    1926:	9302      	str	r3, [sp, #8]
		rows_left--;
    1928:	4653      	mov	r3, sl
    192a:	3b01      	subs	r3, #1
    192c:	b2db      	uxtb	r3, r3
    192e:	469a      	mov	sl, r3
	} while (rows_left > 0);
    1930:	2b00      	cmp	r3, #0
    1932:	d0bf      	beq.n	18b4 <gfx_mono_draw_char+0x30>
		uint8_t pixelsToDraw = font->width;
    1934:	465b      	mov	r3, fp
    1936:	7a1e      	ldrb	r6, [r3, #8]
		for (i = 0; i < pixelsToDraw; i++) {
    1938:	2e00      	cmp	r6, #0
    193a:	d0f1      	beq.n	1920 <gfx_mono_draw_char+0x9c>
    193c:	4446      	add	r6, r8
    193e:	b2f6      	uxtb	r6, r6
    1940:	9c03      	ldr	r4, [sp, #12]
    1942:	2500      	movs	r5, #0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1944:	2307      	movs	r3, #7
    1946:	4699      	mov	r9, r3
    1948:	e7dc      	b.n	1904 <gfx_mono_draw_char+0x80>
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	00001299 	.word	0x00001299
    1950:	00000525 	.word	0x00000525

00001954 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1954:	b5f0      	push	{r4, r5, r6, r7, lr}
    1956:	46c6      	mov	lr, r8
    1958:	b500      	push	{lr}
    195a:	b082      	sub	sp, #8
    195c:	0004      	movs	r4, r0
    195e:	4690      	mov	r8, r2
    1960:	001f      	movs	r7, r3
    1962:	000d      	movs	r5, r1

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1964:	9101      	str	r1, [sp, #4]
    1966:	e009      	b.n	197c <gfx_mono_draw_string+0x28>
			y += font->height + 1;
    1968:	7a7a      	ldrb	r2, [r7, #9]
    196a:	3201      	adds	r2, #1
    196c:	4442      	add	r2, r8
    196e:	b2d3      	uxtb	r3, r2
    1970:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    1972:	9d01      	ldr	r5, [sp, #4]
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
			x += font->width;
		}
	} while (*(++str));
    1974:	3401      	adds	r4, #1
    1976:	7823      	ldrb	r3, [r4, #0]
    1978:	2b00      	cmp	r3, #0
    197a:	d00d      	beq.n	1998 <gfx_mono_draw_string+0x44>
		if (*str == '\n') {
    197c:	7820      	ldrb	r0, [r4, #0]
    197e:	280a      	cmp	r0, #10
    1980:	d0f2      	beq.n	1968 <gfx_mono_draw_string+0x14>
		} else if (*str == '\r') {
    1982:	280d      	cmp	r0, #13
    1984:	d0f6      	beq.n	1974 <gfx_mono_draw_string+0x20>
			gfx_mono_draw_char(*str, x, y, font);
    1986:	003b      	movs	r3, r7
    1988:	4642      	mov	r2, r8
    198a:	0029      	movs	r1, r5
    198c:	4e04      	ldr	r6, [pc, #16]	; (19a0 <gfx_mono_draw_string+0x4c>)
    198e:	47b0      	blx	r6
			x += font->width;
    1990:	7a3b      	ldrb	r3, [r7, #8]
    1992:	18ed      	adds	r5, r5, r3
    1994:	b2ed      	uxtb	r5, r5
    1996:	e7ed      	b.n	1974 <gfx_mono_draw_string+0x20>
}
    1998:	b002      	add	sp, #8
    199a:	bc04      	pop	{r2}
    199c:	4690      	mov	r8, r2
    199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a0:	00001885 	.word	0x00001885

000019a4 <gfx_mono_draw_progmem_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_progmem_string(char PROGMEM_PTR_T str, gfx_coord_t x,
		gfx_coord_t y, const struct font *font)
{
    19a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a6:	46c6      	mov	lr, r8
    19a8:	b500      	push	{lr}
    19aa:	b082      	sub	sp, #8
    19ac:	0004      	movs	r4, r0
    19ae:	4690      	mov	r8, r2
    19b0:	001f      	movs	r7, r3

	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)str);
    19b2:	7800      	ldrb	r0, [r0, #0]

	while (temp_char) {
    19b4:	2800      	cmp	r0, #0
    19b6:	d019      	beq.n	19ec <gfx_mono_draw_progmem_string+0x48>
    19b8:	000d      	movs	r5, r1
		/* Handle '\n' as newline, draw normal characters. */
		if (temp_char == '\n') {
			x = start_of_string_position_x;
    19ba:	9101      	str	r1, [sp, #4]
    19bc:	e009      	b.n	19d2 <gfx_mono_draw_progmem_string+0x2e>
			y += font->height + 1;
    19be:	7a7a      	ldrb	r2, [r7, #9]
    19c0:	3201      	adds	r2, #1
    19c2:	4442      	add	r2, r8
    19c4:	b2d3      	uxtb	r3, r2
    19c6:	4698      	mov	r8, r3
			x = start_of_string_position_x;
    19c8:	9d01      	ldr	r5, [sp, #4]
		} else {
			gfx_mono_draw_char(temp_char, x, y, font);
			x += font->width;
		}

		temp_char = PROGMEM_READ_BYTE((uint8_t PROGMEM_PTR_T)(++str));
    19ca:	3401      	adds	r4, #1
    19cc:	7820      	ldrb	r0, [r4, #0]
	while (temp_char) {
    19ce:	2800      	cmp	r0, #0
    19d0:	d00c      	beq.n	19ec <gfx_mono_draw_progmem_string+0x48>
		if (temp_char == '\n') {
    19d2:	280a      	cmp	r0, #10
    19d4:	d0f3      	beq.n	19be <gfx_mono_draw_progmem_string+0x1a>
		} else if (temp_char == '\r') {
    19d6:	280d      	cmp	r0, #13
    19d8:	d0f7      	beq.n	19ca <gfx_mono_draw_progmem_string+0x26>
			gfx_mono_draw_char(temp_char, x, y, font);
    19da:	003b      	movs	r3, r7
    19dc:	4642      	mov	r2, r8
    19de:	0029      	movs	r1, r5
    19e0:	4e04      	ldr	r6, [pc, #16]	; (19f4 <gfx_mono_draw_progmem_string+0x50>)
    19e2:	47b0      	blx	r6
			x += font->width;
    19e4:	7a3b      	ldrb	r3, [r7, #8]
    19e6:	18ed      	adds	r5, r5, r3
    19e8:	b2ed      	uxtb	r5, r5
    19ea:	e7ee      	b.n	19ca <gfx_mono_draw_progmem_string+0x26>
	}
}
    19ec:	b002      	add	sp, #8
    19ee:	bc04      	pop	{r2}
    19f0:	4690      	mov	r8, r2
    19f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19f4:	00001885 	.word	0x00001885

000019f8 <gfx_mono_get_string_bounding_box>:
 * \param[in] width    Pointer to width result
 * \param[in] height   Pointer to height result
 */
void gfx_mono_get_string_bounding_box(const char *str, const struct font *font,
		gfx_coord_t *width, gfx_coord_t *height)
{
    19f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19fa:	46c6      	mov	lr, r8
    19fc:	b500      	push	{lr}
    19fe:	4694      	mov	ip, r2
    1a00:	4698      	mov	r8, r3
	gfx_coord_t font_width = font->width;
    1a02:	7a0b      	ldrb	r3, [r1, #8]
	gfx_coord_t font_height = font->height;
    1a04:	7a4a      	ldrb	r2, [r1, #9]

	gfx_coord_t max_width = 1;
	gfx_coord_t max_height = font_height;
    1a06:	0016      	movs	r6, r2
	gfx_coord_t x = 0;
    1a08:	2100      	movs	r1, #0
	gfx_coord_t max_width = 1;
    1a0a:	2501      	movs	r5, #1

	/* Handle each character until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = 0;
    1a0c:	2700      	movs	r7, #0
    1a0e:	e008      	b.n	1a22 <gfx_mono_get_string_bounding_box+0x2a>
			max_height += font_height;
    1a10:	18b6      	adds	r6, r6, r2
    1a12:	b2f6      	uxtb	r6, r6
			x = 0;
    1a14:	0039      	movs	r1, r7
    1a16:	e000      	b.n	1a1a <gfx_mono_get_string_bounding_box+0x22>
    1a18:	b2e5      	uxtb	r5, r4
			x += font_width;
			if (x > max_width) {
				max_width = x;
			}
		}
	} while (*(++str));
    1a1a:	3001      	adds	r0, #1
    1a1c:	7804      	ldrb	r4, [r0, #0]
    1a1e:	2c00      	cmp	r4, #0
    1a20:	d00b      	beq.n	1a3a <gfx_mono_get_string_bounding_box+0x42>
		if (*str == '\n') {
    1a22:	7804      	ldrb	r4, [r0, #0]
    1a24:	2c0a      	cmp	r4, #10
    1a26:	d0f3      	beq.n	1a10 <gfx_mono_get_string_bounding_box+0x18>
		} else if (*str == '\r') {
    1a28:	2c0d      	cmp	r4, #13
    1a2a:	d0f6      	beq.n	1a1a <gfx_mono_get_string_bounding_box+0x22>
			x += font_width;
    1a2c:	18c9      	adds	r1, r1, r3
    1a2e:	b2c9      	uxtb	r1, r1
    1a30:	1c2c      	adds	r4, r5, #0
    1a32:	428d      	cmp	r5, r1
    1a34:	d2f0      	bcs.n	1a18 <gfx_mono_get_string_bounding_box+0x20>
    1a36:	1c0c      	adds	r4, r1, #0
    1a38:	e7ee      	b.n	1a18 <gfx_mono_get_string_bounding_box+0x20>

	/* Return values through references */
	*width = max_width;
    1a3a:	4663      	mov	r3, ip
    1a3c:	701d      	strb	r5, [r3, #0]
	*height = max_height;
    1a3e:	4643      	mov	r3, r8
    1a40:	701e      	strb	r6, [r3, #0]
}
    1a42:	bc04      	pop	{r2}
    1a44:	4690      	mov	r8, r2
    1a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001a48 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    1a48:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    1a4a:	4b26      	ldr	r3, [pc, #152]	; (1ae4 <DMAC_Handler+0x9c>)
    1a4c:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    1a4e:	4926      	ldr	r1, [pc, #152]	; (1ae8 <DMAC_Handler+0xa0>)
    1a50:	8c0b      	ldrh	r3, [r1, #32]
    1a52:	220f      	movs	r2, #15

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    1a54:	4013      	ands	r3, r2
    1a56:	009b      	lsls	r3, r3, #2
    1a58:	4824      	ldr	r0, [pc, #144]	; (1aec <DMAC_Handler+0xa4>)
    1a5a:	5818      	ldr	r0, [r3, r0]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    1a5c:	7803      	ldrb	r3, [r0, #0]
    1a5e:	401a      	ands	r2, r3
    1a60:	233f      	movs	r3, #63	; 0x3f
    1a62:	54ca      	strb	r2, [r1, r3]
	isr = DMAC->CHINTFLAG.reg;
    1a64:	330f      	adds	r3, #15
    1a66:	5cca      	ldrb	r2, [r1, r3]
    1a68:	b2d2      	uxtb	r2, r2

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    1a6a:	7803      	ldrb	r3, [r0, #0]
    1a6c:	011b      	lsls	r3, r3, #4
    1a6e:	4920      	ldr	r1, [pc, #128]	; (1af0 <DMAC_Handler+0xa8>)
    1a70:	18c9      	adds	r1, r1, r3
    1a72:	8849      	ldrh	r1, [r1, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    1a74:	4c1f      	ldr	r4, [pc, #124]	; (1af4 <DMAC_Handler+0xac>)
    1a76:	18e3      	adds	r3, r4, r3
    1a78:	885b      	ldrh	r3, [r3, #2]
	resource->transfered_size = total_size - write_size;
    1a7a:	1acb      	subs	r3, r1, r3
    1a7c:	6143      	str	r3, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    1a7e:	07d3      	lsls	r3, r2, #31
    1a80:	d50f      	bpl.n	1aa2 <DMAC_Handler+0x5a>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    1a82:	2101      	movs	r1, #1
    1a84:	234e      	movs	r3, #78	; 0x4e
    1a86:	4a18      	ldr	r2, [pc, #96]	; (1ae8 <DMAC_Handler+0xa0>)
    1a88:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    1a8a:	3b3e      	subs	r3, #62	; 0x3e
    1a8c:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    1a8e:	7c03      	ldrb	r3, [r0, #16]
    1a90:	07db      	lsls	r3, r3, #31
    1a92:	d503      	bpl.n	1a9c <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    1a94:	6843      	ldr	r3, [r0, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    1a96:	2b00      	cmp	r3, #0
    1a98:	d000      	beq.n	1a9c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    1a9a:	4798      	blx	r3
	cpu_irq_leave_critical();
    1a9c:	4b16      	ldr	r3, [pc, #88]	; (1af8 <DMAC_Handler+0xb0>)
    1a9e:	4798      	blx	r3
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
		}
	}

	system_interrupt_leave_critical_section();
}
    1aa0:	bd10      	pop	{r4, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    1aa2:	0793      	lsls	r3, r2, #30
    1aa4:	d50d      	bpl.n	1ac2 <DMAC_Handler+0x7a>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    1aa6:	2102      	movs	r1, #2
    1aa8:	234e      	movs	r3, #78	; 0x4e
    1aaa:	4a0f      	ldr	r2, [pc, #60]	; (1ae8 <DMAC_Handler+0xa0>)
    1aac:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_OK;
    1aae:	2300      	movs	r3, #0
    1ab0:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1ab2:	7c03      	ldrb	r3, [r0, #16]
    1ab4:	079b      	lsls	r3, r3, #30
    1ab6:	d5f1      	bpl.n	1a9c <DMAC_Handler+0x54>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    1ab8:	6883      	ldr	r3, [r0, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    1aba:	2b00      	cmp	r3, #0
    1abc:	d0ee      	beq.n	1a9c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    1abe:	4798      	blx	r3
    1ac0:	e7ec      	b.n	1a9c <DMAC_Handler+0x54>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    1ac2:	0753      	lsls	r3, r2, #29
    1ac4:	d5ea      	bpl.n	1a9c <DMAC_Handler+0x54>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    1ac6:	2104      	movs	r1, #4
    1ac8:	234e      	movs	r3, #78	; 0x4e
    1aca:	4a07      	ldr	r2, [pc, #28]	; (1ae8 <DMAC_Handler+0xa0>)
    1acc:	54d1      	strb	r1, [r2, r3]
		resource->job_status = STATUS_SUSPEND;
    1ace:	3b48      	subs	r3, #72	; 0x48
    1ad0:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    1ad2:	7c03      	ldrb	r3, [r0, #16]
    1ad4:	075b      	lsls	r3, r3, #29
    1ad6:	d5e1      	bpl.n	1a9c <DMAC_Handler+0x54>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    1ad8:	68c3      	ldr	r3, [r0, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    1ada:	2b00      	cmp	r3, #0
    1adc:	d0de      	beq.n	1a9c <DMAC_Handler+0x54>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    1ade:	4798      	blx	r3
    1ae0:	e7dc      	b.n	1a9c <DMAC_Handler+0x54>
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	00001b91 	.word	0x00001b91
    1ae8:	41004800 	.word	0x41004800
    1aec:	200002d8 	.word	0x200002d8
    1af0:	200004e0 	.word	0x200004e0
    1af4:	200002f0 	.word	0x200002f0
    1af8:	00001bd1 	.word	0x00001bd1

00001afc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afe:	46c6      	mov	lr, r8
    1b00:	b500      	push	{lr}
    1b02:	000c      	movs	r4, r1
    1b04:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1b06:	2800      	cmp	r0, #0
    1b08:	d10f      	bne.n	1b2a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1b0a:	2a00      	cmp	r2, #0
    1b0c:	dd11      	ble.n	1b32 <_read+0x36>
    1b0e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1b10:	4e09      	ldr	r6, [pc, #36]	; (1b38 <_read+0x3c>)
    1b12:	4d0a      	ldr	r5, [pc, #40]	; (1b3c <_read+0x40>)
    1b14:	6830      	ldr	r0, [r6, #0]
    1b16:	0021      	movs	r1, r4
    1b18:	682b      	ldr	r3, [r5, #0]
    1b1a:	4798      	blx	r3
		ptr++;
    1b1c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1b1e:	42bc      	cmp	r4, r7
    1b20:	d1f8      	bne.n	1b14 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1b22:	4640      	mov	r0, r8
    1b24:	bc04      	pop	{r2}
    1b26:	4690      	mov	r8, r2
    1b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1b2a:	2301      	movs	r3, #1
    1b2c:	425b      	negs	r3, r3
    1b2e:	4698      	mov	r8, r3
    1b30:	e7f7      	b.n	1b22 <_read+0x26>
	for (; len > 0; --len) {
    1b32:	4680      	mov	r8, r0
    1b34:	e7f5      	b.n	1b22 <_read+0x26>
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	20000538 	.word	0x20000538
    1b3c:	20000530 	.word	0x20000530

00001b40 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b42:	46c6      	mov	lr, r8
    1b44:	b500      	push	{lr}
    1b46:	000e      	movs	r6, r1
    1b48:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1b4a:	3801      	subs	r0, #1
    1b4c:	2802      	cmp	r0, #2
    1b4e:	d810      	bhi.n	1b72 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1b50:	2a00      	cmp	r2, #0
    1b52:	d011      	beq.n	1b78 <_write+0x38>
    1b54:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1b56:	4b0c      	ldr	r3, [pc, #48]	; (1b88 <_write+0x48>)
    1b58:	4698      	mov	r8, r3
    1b5a:	4f0c      	ldr	r7, [pc, #48]	; (1b8c <_write+0x4c>)
    1b5c:	4643      	mov	r3, r8
    1b5e:	6818      	ldr	r0, [r3, #0]
    1b60:	5d31      	ldrb	r1, [r6, r4]
    1b62:	683b      	ldr	r3, [r7, #0]
    1b64:	4798      	blx	r3
    1b66:	2800      	cmp	r0, #0
    1b68:	db08      	blt.n	1b7c <_write+0x3c>
			return -1;
		}
		++nChars;
    1b6a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1b6c:	42a5      	cmp	r5, r4
    1b6e:	d1f5      	bne.n	1b5c <_write+0x1c>
    1b70:	e006      	b.n	1b80 <_write+0x40>
		return -1;
    1b72:	2401      	movs	r4, #1
    1b74:	4264      	negs	r4, r4
    1b76:	e003      	b.n	1b80 <_write+0x40>
	for (; len != 0; --len) {
    1b78:	0014      	movs	r4, r2
    1b7a:	e001      	b.n	1b80 <_write+0x40>
			return -1;
    1b7c:	2401      	movs	r4, #1
    1b7e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1b80:	0020      	movs	r0, r4
    1b82:	bc04      	pop	{r2}
    1b84:	4690      	mov	r8, r2
    1b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b88:	20000538 	.word	0x20000538
    1b8c:	20000534 	.word	0x20000534

00001b90 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1b90:	4b0c      	ldr	r3, [pc, #48]	; (1bc4 <cpu_irq_enter_critical+0x34>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d106      	bne.n	1ba6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b98:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d007      	beq.n	1bb0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1ba0:	2200      	movs	r2, #0
    1ba2:	4b09      	ldr	r3, [pc, #36]	; (1bc8 <cpu_irq_enter_critical+0x38>)
    1ba4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1ba6:	4a07      	ldr	r2, [pc, #28]	; (1bc4 <cpu_irq_enter_critical+0x34>)
    1ba8:	6813      	ldr	r3, [r2, #0]
    1baa:	3301      	adds	r3, #1
    1bac:	6013      	str	r3, [r2, #0]
}
    1bae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1bb0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1bb2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1bb6:	2200      	movs	r2, #0
    1bb8:	4b04      	ldr	r3, [pc, #16]	; (1bcc <cpu_irq_enter_critical+0x3c>)
    1bba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1bbc:	3201      	adds	r2, #1
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <cpu_irq_enter_critical+0x38>)
    1bc0:	701a      	strb	r2, [r3, #0]
    1bc2:	e7f0      	b.n	1ba6 <cpu_irq_enter_critical+0x16>
    1bc4:	20000340 	.word	0x20000340
    1bc8:	20000344 	.word	0x20000344
    1bcc:	20000048 	.word	0x20000048

00001bd0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <cpu_irq_leave_critical+0x24>)
    1bd2:	681a      	ldr	r2, [r3, #0]
    1bd4:	3a01      	subs	r2, #1
    1bd6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d109      	bne.n	1bf2 <cpu_irq_leave_critical+0x22>
    1bde:	4b06      	ldr	r3, [pc, #24]	; (1bf8 <cpu_irq_leave_critical+0x28>)
    1be0:	781b      	ldrb	r3, [r3, #0]
    1be2:	2b00      	cmp	r3, #0
    1be4:	d005      	beq.n	1bf2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1be6:	2201      	movs	r2, #1
    1be8:	4b04      	ldr	r3, [pc, #16]	; (1bfc <cpu_irq_leave_critical+0x2c>)
    1bea:	701a      	strb	r2, [r3, #0]
    1bec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1bf0:	b662      	cpsie	i
	}
}
    1bf2:	4770      	bx	lr
    1bf4:	20000340 	.word	0x20000340
    1bf8:	20000344 	.word	0x20000344
    1bfc:	20000048 	.word	0x20000048

00001c00 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c02:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1c04:	ac01      	add	r4, sp, #4
    1c06:	2501      	movs	r5, #1
    1c08:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1c0a:	2700      	movs	r7, #0
    1c0c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1c0e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1c10:	0021      	movs	r1, r4
    1c12:	203e      	movs	r0, #62	; 0x3e
    1c14:	4e06      	ldr	r6, [pc, #24]	; (1c30 <system_board_init+0x30>)
    1c16:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1c18:	2280      	movs	r2, #128	; 0x80
    1c1a:	05d2      	lsls	r2, r2, #23
    1c1c:	4b05      	ldr	r3, [pc, #20]	; (1c34 <system_board_init+0x34>)
    1c1e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1c20:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1c22:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1c24:	0021      	movs	r1, r4
    1c26:	200f      	movs	r0, #15
    1c28:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1c2a:	b003      	add	sp, #12
    1c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	00001c39 	.word	0x00001c39
    1c34:	41004480 	.word	0x41004480

00001c38 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1c38:	b500      	push	{lr}
    1c3a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1c3c:	ab01      	add	r3, sp, #4
    1c3e:	2280      	movs	r2, #128	; 0x80
    1c40:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1c42:	780a      	ldrb	r2, [r1, #0]
    1c44:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1c46:	784a      	ldrb	r2, [r1, #1]
    1c48:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1c4a:	788a      	ldrb	r2, [r1, #2]
    1c4c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1c4e:	0019      	movs	r1, r3
    1c50:	4b01      	ldr	r3, [pc, #4]	; (1c58 <port_pin_set_config+0x20>)
    1c52:	4798      	blx	r3
}
    1c54:	b003      	add	sp, #12
    1c56:	bd00      	pop	{pc}
    1c58:	00002c35 	.word	0x00002c35

00001c5c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	46de      	mov	lr, fp
    1c60:	4657      	mov	r7, sl
    1c62:	464e      	mov	r6, r9
    1c64:	4645      	mov	r5, r8
    1c66:	b5e0      	push	{r5, r6, r7, lr}
    1c68:	b087      	sub	sp, #28
    1c6a:	4680      	mov	r8, r0
    1c6c:	9104      	str	r1, [sp, #16]
    1c6e:	0016      	movs	r6, r2
    1c70:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1c72:	2200      	movs	r2, #0
    1c74:	2300      	movs	r3, #0
    1c76:	2100      	movs	r1, #0
    1c78:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1c7a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1c7c:	2001      	movs	r0, #1
    1c7e:	0021      	movs	r1, r4
    1c80:	9600      	str	r6, [sp, #0]
    1c82:	9701      	str	r7, [sp, #4]
    1c84:	465c      	mov	r4, fp
    1c86:	9403      	str	r4, [sp, #12]
    1c88:	4644      	mov	r4, r8
    1c8a:	9405      	str	r4, [sp, #20]
    1c8c:	e013      	b.n	1cb6 <long_division+0x5a>
    1c8e:	2420      	movs	r4, #32
    1c90:	1a64      	subs	r4, r4, r1
    1c92:	0005      	movs	r5, r0
    1c94:	40e5      	lsrs	r5, r4
    1c96:	46a8      	mov	r8, r5
    1c98:	e014      	b.n	1cc4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1c9a:	9c00      	ldr	r4, [sp, #0]
    1c9c:	9d01      	ldr	r5, [sp, #4]
    1c9e:	1b12      	subs	r2, r2, r4
    1ca0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1ca2:	465c      	mov	r4, fp
    1ca4:	464d      	mov	r5, r9
    1ca6:	432c      	orrs	r4, r5
    1ca8:	46a3      	mov	fp, r4
    1caa:	9c03      	ldr	r4, [sp, #12]
    1cac:	4645      	mov	r5, r8
    1cae:	432c      	orrs	r4, r5
    1cb0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1cb2:	3901      	subs	r1, #1
    1cb4:	d325      	bcc.n	1d02 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1cb6:	2420      	movs	r4, #32
    1cb8:	4264      	negs	r4, r4
    1cba:	190c      	adds	r4, r1, r4
    1cbc:	d4e7      	bmi.n	1c8e <long_division+0x32>
    1cbe:	0005      	movs	r5, r0
    1cc0:	40a5      	lsls	r5, r4
    1cc2:	46a8      	mov	r8, r5
    1cc4:	0004      	movs	r4, r0
    1cc6:	408c      	lsls	r4, r1
    1cc8:	46a1      	mov	r9, r4
		r = r << 1;
    1cca:	1892      	adds	r2, r2, r2
    1ccc:	415b      	adcs	r3, r3
    1cce:	0014      	movs	r4, r2
    1cd0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1cd2:	9e05      	ldr	r6, [sp, #20]
    1cd4:	464f      	mov	r7, r9
    1cd6:	403e      	ands	r6, r7
    1cd8:	46b4      	mov	ip, r6
    1cda:	9e04      	ldr	r6, [sp, #16]
    1cdc:	4647      	mov	r7, r8
    1cde:	403e      	ands	r6, r7
    1ce0:	46b2      	mov	sl, r6
    1ce2:	4666      	mov	r6, ip
    1ce4:	4657      	mov	r7, sl
    1ce6:	433e      	orrs	r6, r7
    1ce8:	d003      	beq.n	1cf2 <long_division+0x96>
			r |= 0x01;
    1cea:	0006      	movs	r6, r0
    1cec:	4326      	orrs	r6, r4
    1cee:	0032      	movs	r2, r6
    1cf0:	002b      	movs	r3, r5
		if (r >= d) {
    1cf2:	9c00      	ldr	r4, [sp, #0]
    1cf4:	9d01      	ldr	r5, [sp, #4]
    1cf6:	429d      	cmp	r5, r3
    1cf8:	d8db      	bhi.n	1cb2 <long_division+0x56>
    1cfa:	d1ce      	bne.n	1c9a <long_division+0x3e>
    1cfc:	4294      	cmp	r4, r2
    1cfe:	d8d8      	bhi.n	1cb2 <long_division+0x56>
    1d00:	e7cb      	b.n	1c9a <long_division+0x3e>
    1d02:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1d04:	4658      	mov	r0, fp
    1d06:	0019      	movs	r1, r3
    1d08:	b007      	add	sp, #28
    1d0a:	bc3c      	pop	{r2, r3, r4, r5}
    1d0c:	4690      	mov	r8, r2
    1d0e:	4699      	mov	r9, r3
    1d10:	46a2      	mov	sl, r4
    1d12:	46ab      	mov	fp, r5
    1d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d16 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d16:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d18:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d1a:	2340      	movs	r3, #64	; 0x40
    1d1c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1d1e:	4281      	cmp	r1, r0
    1d20:	d202      	bcs.n	1d28 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1d22:	0018      	movs	r0, r3
    1d24:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1d26:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1d28:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1d2a:	1c63      	adds	r3, r4, #1
    1d2c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1d2e:	4288      	cmp	r0, r1
    1d30:	d9f9      	bls.n	1d26 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d32:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d34:	2cff      	cmp	r4, #255	; 0xff
    1d36:	d8f4      	bhi.n	1d22 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d38:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d3a:	2300      	movs	r3, #0
    1d3c:	e7f1      	b.n	1d22 <_sercom_get_sync_baud_val+0xc>
	...

00001d40 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d42:	b083      	sub	sp, #12
    1d44:	000f      	movs	r7, r1
    1d46:	0016      	movs	r6, r2
    1d48:	aa08      	add	r2, sp, #32
    1d4a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1d4c:	0004      	movs	r4, r0
    1d4e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d50:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1d52:	42bc      	cmp	r4, r7
    1d54:	d902      	bls.n	1d5c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1d56:	0010      	movs	r0, r2
    1d58:	b003      	add	sp, #12
    1d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1d5c:	2b00      	cmp	r3, #0
    1d5e:	d114      	bne.n	1d8a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1d60:	0002      	movs	r2, r0
    1d62:	0008      	movs	r0, r1
    1d64:	2100      	movs	r1, #0
    1d66:	4c19      	ldr	r4, [pc, #100]	; (1dcc <_sercom_get_async_baud_val+0x8c>)
    1d68:	47a0      	blx	r4
    1d6a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1d6c:	003a      	movs	r2, r7
    1d6e:	2300      	movs	r3, #0
    1d70:	2000      	movs	r0, #0
    1d72:	4c17      	ldr	r4, [pc, #92]	; (1dd0 <_sercom_get_async_baud_val+0x90>)
    1d74:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d76:	2200      	movs	r2, #0
    1d78:	2301      	movs	r3, #1
    1d7a:	1a12      	subs	r2, r2, r0
    1d7c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d7e:	0c12      	lsrs	r2, r2, #16
    1d80:	041b      	lsls	r3, r3, #16
    1d82:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d84:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1d86:	2200      	movs	r2, #0
    1d88:	e7e5      	b.n	1d56 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1d8a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d8c:	2b01      	cmp	r3, #1
    1d8e:	d1f9      	bne.n	1d84 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1d90:	000a      	movs	r2, r1
    1d92:	2300      	movs	r3, #0
    1d94:	2100      	movs	r1, #0
    1d96:	4c0d      	ldr	r4, [pc, #52]	; (1dcc <_sercom_get_async_baud_val+0x8c>)
    1d98:	47a0      	blx	r4
    1d9a:	0002      	movs	r2, r0
    1d9c:	000b      	movs	r3, r1
    1d9e:	9200      	str	r2, [sp, #0]
    1da0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1da2:	0038      	movs	r0, r7
    1da4:	2100      	movs	r1, #0
    1da6:	4c0a      	ldr	r4, [pc, #40]	; (1dd0 <_sercom_get_async_baud_val+0x90>)
    1da8:	47a0      	blx	r4
    1daa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1dac:	2380      	movs	r3, #128	; 0x80
    1dae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1db0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1db2:	4298      	cmp	r0, r3
    1db4:	d8cf      	bhi.n	1d56 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1db6:	0f79      	lsrs	r1, r7, #29
    1db8:	00f8      	lsls	r0, r7, #3
    1dba:	9a00      	ldr	r2, [sp, #0]
    1dbc:	9b01      	ldr	r3, [sp, #4]
    1dbe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1dc0:	00ea      	lsls	r2, r5, #3
    1dc2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1dc4:	b2d2      	uxtb	r2, r2
    1dc6:	0352      	lsls	r2, r2, #13
    1dc8:	432a      	orrs	r2, r5
    1dca:	e7db      	b.n	1d84 <_sercom_get_async_baud_val+0x44>
    1dcc:	00003635 	.word	0x00003635
    1dd0:	00001c5d 	.word	0x00001c5d

00001dd4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1dd4:	b510      	push	{r4, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1dda:	4b0e      	ldr	r3, [pc, #56]	; (1e14 <sercom_set_gclk_generator+0x40>)
    1ddc:	781b      	ldrb	r3, [r3, #0]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d007      	beq.n	1df2 <sercom_set_gclk_generator+0x1e>
    1de2:	2900      	cmp	r1, #0
    1de4:	d105      	bne.n	1df2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1de6:	4b0b      	ldr	r3, [pc, #44]	; (1e14 <sercom_set_gclk_generator+0x40>)
    1de8:	785b      	ldrb	r3, [r3, #1]
    1dea:	4283      	cmp	r3, r0
    1dec:	d010      	beq.n	1e10 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1dee:	201d      	movs	r0, #29
    1df0:	e00c      	b.n	1e0c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1df2:	a901      	add	r1, sp, #4
    1df4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1df6:	2013      	movs	r0, #19
    1df8:	4b07      	ldr	r3, [pc, #28]	; (1e18 <sercom_set_gclk_generator+0x44>)
    1dfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1dfc:	2013      	movs	r0, #19
    1dfe:	4b07      	ldr	r3, [pc, #28]	; (1e1c <sercom_set_gclk_generator+0x48>)
    1e00:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1e02:	4b04      	ldr	r3, [pc, #16]	; (1e14 <sercom_set_gclk_generator+0x40>)
    1e04:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1e06:	2201      	movs	r2, #1
    1e08:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1e0a:	2000      	movs	r0, #0
}
    1e0c:	b002      	add	sp, #8
    1e0e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1e10:	2000      	movs	r0, #0
    1e12:	e7fb      	b.n	1e0c <sercom_set_gclk_generator+0x38>
    1e14:	20000348 	.word	0x20000348
    1e18:	00002b3d 	.word	0x00002b3d
    1e1c:	00002ab1 	.word	0x00002ab1

00001e20 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1e20:	4b40      	ldr	r3, [pc, #256]	; (1f24 <_sercom_get_default_pad+0x104>)
    1e22:	4298      	cmp	r0, r3
    1e24:	d031      	beq.n	1e8a <_sercom_get_default_pad+0x6a>
    1e26:	d90a      	bls.n	1e3e <_sercom_get_default_pad+0x1e>
    1e28:	4b3f      	ldr	r3, [pc, #252]	; (1f28 <_sercom_get_default_pad+0x108>)
    1e2a:	4298      	cmp	r0, r3
    1e2c:	d04d      	beq.n	1eca <_sercom_get_default_pad+0xaa>
    1e2e:	4b3f      	ldr	r3, [pc, #252]	; (1f2c <_sercom_get_default_pad+0x10c>)
    1e30:	4298      	cmp	r0, r3
    1e32:	d05a      	beq.n	1eea <_sercom_get_default_pad+0xca>
    1e34:	4b3e      	ldr	r3, [pc, #248]	; (1f30 <_sercom_get_default_pad+0x110>)
    1e36:	4298      	cmp	r0, r3
    1e38:	d037      	beq.n	1eaa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e3a:	2000      	movs	r0, #0
}
    1e3c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e3e:	4b3d      	ldr	r3, [pc, #244]	; (1f34 <_sercom_get_default_pad+0x114>)
    1e40:	4298      	cmp	r0, r3
    1e42:	d00c      	beq.n	1e5e <_sercom_get_default_pad+0x3e>
    1e44:	4b3c      	ldr	r3, [pc, #240]	; (1f38 <_sercom_get_default_pad+0x118>)
    1e46:	4298      	cmp	r0, r3
    1e48:	d1f7      	bne.n	1e3a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e4a:	2901      	cmp	r1, #1
    1e4c:	d017      	beq.n	1e7e <_sercom_get_default_pad+0x5e>
    1e4e:	2900      	cmp	r1, #0
    1e50:	d05d      	beq.n	1f0e <_sercom_get_default_pad+0xee>
    1e52:	2902      	cmp	r1, #2
    1e54:	d015      	beq.n	1e82 <_sercom_get_default_pad+0x62>
    1e56:	2903      	cmp	r1, #3
    1e58:	d015      	beq.n	1e86 <_sercom_get_default_pad+0x66>
	return 0;
    1e5a:	2000      	movs	r0, #0
    1e5c:	e7ee      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e5e:	2901      	cmp	r1, #1
    1e60:	d007      	beq.n	1e72 <_sercom_get_default_pad+0x52>
    1e62:	2900      	cmp	r1, #0
    1e64:	d051      	beq.n	1f0a <_sercom_get_default_pad+0xea>
    1e66:	2902      	cmp	r1, #2
    1e68:	d005      	beq.n	1e76 <_sercom_get_default_pad+0x56>
    1e6a:	2903      	cmp	r1, #3
    1e6c:	d005      	beq.n	1e7a <_sercom_get_default_pad+0x5a>
	return 0;
    1e6e:	2000      	movs	r0, #0
    1e70:	e7e4      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e72:	4832      	ldr	r0, [pc, #200]	; (1f3c <_sercom_get_default_pad+0x11c>)
    1e74:	e7e2      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e76:	4832      	ldr	r0, [pc, #200]	; (1f40 <_sercom_get_default_pad+0x120>)
    1e78:	e7e0      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e7a:	4832      	ldr	r0, [pc, #200]	; (1f44 <_sercom_get_default_pad+0x124>)
    1e7c:	e7de      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e7e:	4832      	ldr	r0, [pc, #200]	; (1f48 <_sercom_get_default_pad+0x128>)
    1e80:	e7dc      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e82:	4832      	ldr	r0, [pc, #200]	; (1f4c <_sercom_get_default_pad+0x12c>)
    1e84:	e7da      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e86:	4832      	ldr	r0, [pc, #200]	; (1f50 <_sercom_get_default_pad+0x130>)
    1e88:	e7d8      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1e8a:	2901      	cmp	r1, #1
    1e8c:	d007      	beq.n	1e9e <_sercom_get_default_pad+0x7e>
    1e8e:	2900      	cmp	r1, #0
    1e90:	d03f      	beq.n	1f12 <_sercom_get_default_pad+0xf2>
    1e92:	2902      	cmp	r1, #2
    1e94:	d005      	beq.n	1ea2 <_sercom_get_default_pad+0x82>
    1e96:	2903      	cmp	r1, #3
    1e98:	d005      	beq.n	1ea6 <_sercom_get_default_pad+0x86>
	return 0;
    1e9a:	2000      	movs	r0, #0
    1e9c:	e7ce      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e9e:	482d      	ldr	r0, [pc, #180]	; (1f54 <_sercom_get_default_pad+0x134>)
    1ea0:	e7cc      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ea2:	482d      	ldr	r0, [pc, #180]	; (1f58 <_sercom_get_default_pad+0x138>)
    1ea4:	e7ca      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ea6:	482d      	ldr	r0, [pc, #180]	; (1f5c <_sercom_get_default_pad+0x13c>)
    1ea8:	e7c8      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1eaa:	2901      	cmp	r1, #1
    1eac:	d007      	beq.n	1ebe <_sercom_get_default_pad+0x9e>
    1eae:	2900      	cmp	r1, #0
    1eb0:	d031      	beq.n	1f16 <_sercom_get_default_pad+0xf6>
    1eb2:	2902      	cmp	r1, #2
    1eb4:	d005      	beq.n	1ec2 <_sercom_get_default_pad+0xa2>
    1eb6:	2903      	cmp	r1, #3
    1eb8:	d005      	beq.n	1ec6 <_sercom_get_default_pad+0xa6>
	return 0;
    1eba:	2000      	movs	r0, #0
    1ebc:	e7be      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ebe:	4828      	ldr	r0, [pc, #160]	; (1f60 <_sercom_get_default_pad+0x140>)
    1ec0:	e7bc      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ec2:	4828      	ldr	r0, [pc, #160]	; (1f64 <_sercom_get_default_pad+0x144>)
    1ec4:	e7ba      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ec6:	4828      	ldr	r0, [pc, #160]	; (1f68 <_sercom_get_default_pad+0x148>)
    1ec8:	e7b8      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1eca:	2901      	cmp	r1, #1
    1ecc:	d007      	beq.n	1ede <_sercom_get_default_pad+0xbe>
    1ece:	2900      	cmp	r1, #0
    1ed0:	d023      	beq.n	1f1a <_sercom_get_default_pad+0xfa>
    1ed2:	2902      	cmp	r1, #2
    1ed4:	d005      	beq.n	1ee2 <_sercom_get_default_pad+0xc2>
    1ed6:	2903      	cmp	r1, #3
    1ed8:	d005      	beq.n	1ee6 <_sercom_get_default_pad+0xc6>
	return 0;
    1eda:	2000      	movs	r0, #0
    1edc:	e7ae      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1ede:	4823      	ldr	r0, [pc, #140]	; (1f6c <_sercom_get_default_pad+0x14c>)
    1ee0:	e7ac      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ee2:	4823      	ldr	r0, [pc, #140]	; (1f70 <_sercom_get_default_pad+0x150>)
    1ee4:	e7aa      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1ee6:	4823      	ldr	r0, [pc, #140]	; (1f74 <_sercom_get_default_pad+0x154>)
    1ee8:	e7a8      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1eea:	2901      	cmp	r1, #1
    1eec:	d007      	beq.n	1efe <_sercom_get_default_pad+0xde>
    1eee:	2900      	cmp	r1, #0
    1ef0:	d015      	beq.n	1f1e <_sercom_get_default_pad+0xfe>
    1ef2:	2902      	cmp	r1, #2
    1ef4:	d005      	beq.n	1f02 <_sercom_get_default_pad+0xe2>
    1ef6:	2903      	cmp	r1, #3
    1ef8:	d005      	beq.n	1f06 <_sercom_get_default_pad+0xe6>
	return 0;
    1efa:	2000      	movs	r0, #0
    1efc:	e79e      	b.n	1e3c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1efe:	481e      	ldr	r0, [pc, #120]	; (1f78 <_sercom_get_default_pad+0x158>)
    1f00:	e79c      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f02:	481e      	ldr	r0, [pc, #120]	; (1f7c <_sercom_get_default_pad+0x15c>)
    1f04:	e79a      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f06:	481e      	ldr	r0, [pc, #120]	; (1f80 <_sercom_get_default_pad+0x160>)
    1f08:	e798      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f0a:	481e      	ldr	r0, [pc, #120]	; (1f84 <_sercom_get_default_pad+0x164>)
    1f0c:	e796      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f0e:	2003      	movs	r0, #3
    1f10:	e794      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f12:	481d      	ldr	r0, [pc, #116]	; (1f88 <_sercom_get_default_pad+0x168>)
    1f14:	e792      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f16:	481d      	ldr	r0, [pc, #116]	; (1f8c <_sercom_get_default_pad+0x16c>)
    1f18:	e790      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f1a:	481d      	ldr	r0, [pc, #116]	; (1f90 <_sercom_get_default_pad+0x170>)
    1f1c:	e78e      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f1e:	481d      	ldr	r0, [pc, #116]	; (1f94 <_sercom_get_default_pad+0x174>)
    1f20:	e78c      	b.n	1e3c <_sercom_get_default_pad+0x1c>
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	42001000 	.word	0x42001000
    1f28:	42001800 	.word	0x42001800
    1f2c:	42001c00 	.word	0x42001c00
    1f30:	42001400 	.word	0x42001400
    1f34:	42000800 	.word	0x42000800
    1f38:	42000c00 	.word	0x42000c00
    1f3c:	00050003 	.word	0x00050003
    1f40:	00060003 	.word	0x00060003
    1f44:	00070003 	.word	0x00070003
    1f48:	00010003 	.word	0x00010003
    1f4c:	001e0003 	.word	0x001e0003
    1f50:	001f0003 	.word	0x001f0003
    1f54:	00090003 	.word	0x00090003
    1f58:	000a0003 	.word	0x000a0003
    1f5c:	000b0003 	.word	0x000b0003
    1f60:	00110003 	.word	0x00110003
    1f64:	00120003 	.word	0x00120003
    1f68:	00130003 	.word	0x00130003
    1f6c:	000d0003 	.word	0x000d0003
    1f70:	000e0003 	.word	0x000e0003
    1f74:	000f0003 	.word	0x000f0003
    1f78:	00170003 	.word	0x00170003
    1f7c:	00180003 	.word	0x00180003
    1f80:	00190003 	.word	0x00190003
    1f84:	00040003 	.word	0x00040003
    1f88:	00080003 	.word	0x00080003
    1f8c:	00100003 	.word	0x00100003
    1f90:	000c0003 	.word	0x000c0003
    1f94:	00160003 	.word	0x00160003

00001f98 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f98:	b530      	push	{r4, r5, lr}
    1f9a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f9c:	4b0b      	ldr	r3, [pc, #44]	; (1fcc <_sercom_get_sercom_inst_index+0x34>)
    1f9e:	466a      	mov	r2, sp
    1fa0:	cb32      	ldmia	r3!, {r1, r4, r5}
    1fa2:	c232      	stmia	r2!, {r1, r4, r5}
    1fa4:	cb32      	ldmia	r3!, {r1, r4, r5}
    1fa6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1fa8:	9b00      	ldr	r3, [sp, #0]
    1faa:	4283      	cmp	r3, r0
    1fac:	d00b      	beq.n	1fc6 <_sercom_get_sercom_inst_index+0x2e>
    1fae:	2301      	movs	r3, #1
    1fb0:	009a      	lsls	r2, r3, #2
    1fb2:	4669      	mov	r1, sp
    1fb4:	5852      	ldr	r2, [r2, r1]
    1fb6:	4282      	cmp	r2, r0
    1fb8:	d006      	beq.n	1fc8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fba:	3301      	adds	r3, #1
    1fbc:	2b06      	cmp	r3, #6
    1fbe:	d1f7      	bne.n	1fb0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1fc0:	2000      	movs	r0, #0
}
    1fc2:	b007      	add	sp, #28
    1fc4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fc6:	2300      	movs	r3, #0
			return i;
    1fc8:	b2d8      	uxtb	r0, r3
    1fca:	e7fa      	b.n	1fc2 <_sercom_get_sercom_inst_index+0x2a>
    1fcc:	00004c44 	.word	0x00004c44

00001fd0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1fd0:	4770      	bx	lr
	...

00001fd4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1fd6:	4b0a      	ldr	r3, [pc, #40]	; (2000 <STACK_SIZE>)
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d10c      	bne.n	1ff8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fde:	4f09      	ldr	r7, [pc, #36]	; (2004 <STACK_SIZE+0x4>)
    1fe0:	4e09      	ldr	r6, [pc, #36]	; (2008 <STACK_SIZE+0x8>)
			_sercom_instances[i] = NULL;
    1fe2:	4d0a      	ldr	r5, [pc, #40]	; (200c <STACK_SIZE+0xc>)
    1fe4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fe6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1fe8:	195a      	adds	r2, r3, r5
    1fea:	6014      	str	r4, [r2, #0]
    1fec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fee:	2b18      	cmp	r3, #24
    1ff0:	d1f9      	bne.n	1fe6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1ff2:	2201      	movs	r2, #1
    1ff4:	4b02      	ldr	r3, [pc, #8]	; (2000 <STACK_SIZE>)
    1ff6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1ff8:	0080      	lsls	r0, r0, #2
    1ffa:	4b02      	ldr	r3, [pc, #8]	; (2004 <STACK_SIZE+0x4>)
    1ffc:	50c1      	str	r1, [r0, r3]
}
    1ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2000:	2000034a 	.word	0x2000034a
    2004:	2000034c 	.word	0x2000034c
    2008:	00001fd1 	.word	0x00001fd1
    200c:	2000053c 	.word	0x2000053c

00002010 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2010:	b500      	push	{lr}
    2012:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2014:	2309      	movs	r3, #9
    2016:	466a      	mov	r2, sp
    2018:	7013      	strb	r3, [r2, #0]
    201a:	3301      	adds	r3, #1
    201c:	7053      	strb	r3, [r2, #1]
    201e:	3301      	adds	r3, #1
    2020:	7093      	strb	r3, [r2, #2]
    2022:	3301      	adds	r3, #1
    2024:	70d3      	strb	r3, [r2, #3]
    2026:	3301      	adds	r3, #1
    2028:	7113      	strb	r3, [r2, #4]
    202a:	3301      	adds	r3, #1
    202c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    202e:	4b03      	ldr	r3, [pc, #12]	; (203c <_sercom_get_interrupt_vector+0x2c>)
    2030:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2032:	466b      	mov	r3, sp
    2034:	5618      	ldrsb	r0, [r3, r0]
}
    2036:	b003      	add	sp, #12
    2038:	bd00      	pop	{pc}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	00001f99 	.word	0x00001f99

00002040 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2040:	b510      	push	{r4, lr}
    2042:	4b02      	ldr	r3, [pc, #8]	; (204c <SERCOM0_Handler+0xc>)
    2044:	681b      	ldr	r3, [r3, #0]
    2046:	2000      	movs	r0, #0
    2048:	4798      	blx	r3
    204a:	bd10      	pop	{r4, pc}
    204c:	2000034c 	.word	0x2000034c

00002050 <SERCOM1_Handler>:
    2050:	b510      	push	{r4, lr}
    2052:	4b02      	ldr	r3, [pc, #8]	; (205c <SERCOM1_Handler+0xc>)
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	2001      	movs	r0, #1
    2058:	4798      	blx	r3
    205a:	bd10      	pop	{r4, pc}
    205c:	2000034c 	.word	0x2000034c

00002060 <SERCOM2_Handler>:
    2060:	b510      	push	{r4, lr}
    2062:	4b02      	ldr	r3, [pc, #8]	; (206c <SERCOM2_Handler+0xc>)
    2064:	689b      	ldr	r3, [r3, #8]
    2066:	2002      	movs	r0, #2
    2068:	4798      	blx	r3
    206a:	bd10      	pop	{r4, pc}
    206c:	2000034c 	.word	0x2000034c

00002070 <SERCOM3_Handler>:
    2070:	b510      	push	{r4, lr}
    2072:	4b02      	ldr	r3, [pc, #8]	; (207c <SERCOM3_Handler+0xc>)
    2074:	68db      	ldr	r3, [r3, #12]
    2076:	2003      	movs	r0, #3
    2078:	4798      	blx	r3
    207a:	bd10      	pop	{r4, pc}
    207c:	2000034c 	.word	0x2000034c

00002080 <SERCOM4_Handler>:
    2080:	b510      	push	{r4, lr}
    2082:	4b02      	ldr	r3, [pc, #8]	; (208c <SERCOM4_Handler+0xc>)
    2084:	691b      	ldr	r3, [r3, #16]
    2086:	2004      	movs	r0, #4
    2088:	4798      	blx	r3
    208a:	bd10      	pop	{r4, pc}
    208c:	2000034c 	.word	0x2000034c

00002090 <SERCOM5_Handler>:
    2090:	b510      	push	{r4, lr}
    2092:	4b02      	ldr	r3, [pc, #8]	; (209c <SERCOM5_Handler+0xc>)
    2094:	695b      	ldr	r3, [r3, #20]
    2096:	2005      	movs	r0, #5
    2098:	4798      	blx	r3
    209a:	bd10      	pop	{r4, pc}
    209c:	2000034c 	.word	0x2000034c

000020a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    20a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20a2:	46de      	mov	lr, fp
    20a4:	4657      	mov	r7, sl
    20a6:	464e      	mov	r6, r9
    20a8:	4645      	mov	r5, r8
    20aa:	b5e0      	push	{r5, r6, r7, lr}
    20ac:	b091      	sub	sp, #68	; 0x44
    20ae:	0005      	movs	r5, r0
    20b0:	000c      	movs	r4, r1
    20b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    20b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20b6:	0008      	movs	r0, r1
    20b8:	4bbc      	ldr	r3, [pc, #752]	; (23ac <usart_init+0x30c>)
    20ba:	4798      	blx	r3
    20bc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    20be:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    20c0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    20c2:	07db      	lsls	r3, r3, #31
    20c4:	d506      	bpl.n	20d4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    20c6:	b011      	add	sp, #68	; 0x44
    20c8:	bc3c      	pop	{r2, r3, r4, r5}
    20ca:	4690      	mov	r8, r2
    20cc:	4699      	mov	r9, r3
    20ce:	46a2      	mov	sl, r4
    20d0:	46ab      	mov	fp, r5
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    20d4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    20d6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    20d8:	079b      	lsls	r3, r3, #30
    20da:	d4f4      	bmi.n	20c6 <usart_init+0x26>
    20dc:	49b4      	ldr	r1, [pc, #720]	; (23b0 <usart_init+0x310>)
    20de:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    20e0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    20e2:	2301      	movs	r3, #1
    20e4:	40bb      	lsls	r3, r7
    20e6:	4303      	orrs	r3, r0
    20e8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    20ea:	a90f      	add	r1, sp, #60	; 0x3c
    20ec:	272d      	movs	r7, #45	; 0x2d
    20ee:	5df3      	ldrb	r3, [r6, r7]
    20f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20f2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    20f4:	b2d3      	uxtb	r3, r2
    20f6:	9302      	str	r3, [sp, #8]
    20f8:	0018      	movs	r0, r3
    20fa:	4bae      	ldr	r3, [pc, #696]	; (23b4 <usart_init+0x314>)
    20fc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    20fe:	9802      	ldr	r0, [sp, #8]
    2100:	4bad      	ldr	r3, [pc, #692]	; (23b8 <usart_init+0x318>)
    2102:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2104:	5df0      	ldrb	r0, [r6, r7]
    2106:	2100      	movs	r1, #0
    2108:	4bac      	ldr	r3, [pc, #688]	; (23bc <usart_init+0x31c>)
    210a:	4798      	blx	r3
	module->character_size = config->character_size;
    210c:	7af3      	ldrb	r3, [r6, #11]
    210e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2110:	2324      	movs	r3, #36	; 0x24
    2112:	5cf3      	ldrb	r3, [r6, r3]
    2114:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2116:	2325      	movs	r3, #37	; 0x25
    2118:	5cf3      	ldrb	r3, [r6, r3]
    211a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    211c:	7ef3      	ldrb	r3, [r6, #27]
    211e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2120:	7f33      	ldrb	r3, [r6, #28]
    2122:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2124:	682b      	ldr	r3, [r5, #0]
    2126:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2128:	0018      	movs	r0, r3
    212a:	4ba0      	ldr	r3, [pc, #640]	; (23ac <usart_init+0x30c>)
    212c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    212e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2130:	2200      	movs	r2, #0
    2132:	230e      	movs	r3, #14
    2134:	a906      	add	r1, sp, #24
    2136:	468c      	mov	ip, r1
    2138:	4463      	add	r3, ip
    213a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    213c:	8a32      	ldrh	r2, [r6, #16]
    213e:	9202      	str	r2, [sp, #8]
    2140:	2380      	movs	r3, #128	; 0x80
    2142:	01db      	lsls	r3, r3, #7
    2144:	429a      	cmp	r2, r3
    2146:	d100      	bne.n	214a <usart_init+0xaa>
    2148:	e09e      	b.n	2288 <usart_init+0x1e8>
    214a:	d90f      	bls.n	216c <usart_init+0xcc>
    214c:	23c0      	movs	r3, #192	; 0xc0
    214e:	01db      	lsls	r3, r3, #7
    2150:	9a02      	ldr	r2, [sp, #8]
    2152:	429a      	cmp	r2, r3
    2154:	d100      	bne.n	2158 <usart_init+0xb8>
    2156:	e092      	b.n	227e <usart_init+0x1de>
    2158:	2380      	movs	r3, #128	; 0x80
    215a:	021b      	lsls	r3, r3, #8
    215c:	429a      	cmp	r2, r3
    215e:	d000      	beq.n	2162 <usart_init+0xc2>
    2160:	e11f      	b.n	23a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2162:	2303      	movs	r3, #3
    2164:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2166:	2300      	movs	r3, #0
    2168:	9307      	str	r3, [sp, #28]
    216a:	e008      	b.n	217e <usart_init+0xde>
	switch (config->sample_rate) {
    216c:	2380      	movs	r3, #128	; 0x80
    216e:	019b      	lsls	r3, r3, #6
    2170:	429a      	cmp	r2, r3
    2172:	d000      	beq.n	2176 <usart_init+0xd6>
    2174:	e115      	b.n	23a2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2176:	2310      	movs	r3, #16
    2178:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    217a:	3b0f      	subs	r3, #15
    217c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    217e:	6833      	ldr	r3, [r6, #0]
    2180:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2182:	68f3      	ldr	r3, [r6, #12]
    2184:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2186:	6973      	ldr	r3, [r6, #20]
    2188:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    218a:	7e33      	ldrb	r3, [r6, #24]
    218c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    218e:	2326      	movs	r3, #38	; 0x26
    2190:	5cf3      	ldrb	r3, [r6, r3]
    2192:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2194:	6873      	ldr	r3, [r6, #4]
    2196:	4699      	mov	r9, r3
	switch (transfer_mode)
    2198:	2b00      	cmp	r3, #0
    219a:	d100      	bne.n	219e <usart_init+0xfe>
    219c:	e0a0      	b.n	22e0 <usart_init+0x240>
    219e:	2380      	movs	r3, #128	; 0x80
    21a0:	055b      	lsls	r3, r3, #21
    21a2:	4599      	cmp	r9, r3
    21a4:	d100      	bne.n	21a8 <usart_init+0x108>
    21a6:	e084      	b.n	22b2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    21a8:	7e73      	ldrb	r3, [r6, #25]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d002      	beq.n	21b4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    21ae:	7eb3      	ldrb	r3, [r6, #26]
    21b0:	4642      	mov	r2, r8
    21b2:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    21b4:	682a      	ldr	r2, [r5, #0]
    21b6:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    21b8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    21ba:	2b00      	cmp	r3, #0
    21bc:	d1fc      	bne.n	21b8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    21be:	330e      	adds	r3, #14
    21c0:	aa06      	add	r2, sp, #24
    21c2:	4694      	mov	ip, r2
    21c4:	4463      	add	r3, ip
    21c6:	881b      	ldrh	r3, [r3, #0]
    21c8:	4642      	mov	r2, r8
    21ca:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    21cc:	9b05      	ldr	r3, [sp, #20]
    21ce:	9a03      	ldr	r2, [sp, #12]
    21d0:	4313      	orrs	r3, r2
    21d2:	9a04      	ldr	r2, [sp, #16]
    21d4:	4313      	orrs	r3, r2
    21d6:	464a      	mov	r2, r9
    21d8:	4313      	orrs	r3, r2
    21da:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    21dc:	465b      	mov	r3, fp
    21de:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    21e0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    21e2:	4653      	mov	r3, sl
    21e4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    21e6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    21e8:	2327      	movs	r3, #39	; 0x27
    21ea:	5cf3      	ldrb	r3, [r6, r3]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d101      	bne.n	21f4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    21f0:	3304      	adds	r3, #4
    21f2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    21f4:	7e73      	ldrb	r3, [r6, #25]
    21f6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    21f8:	7f32      	ldrb	r2, [r6, #28]
    21fa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    21fc:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    21fe:	7f72      	ldrb	r2, [r6, #29]
    2200:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2202:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2204:	2224      	movs	r2, #36	; 0x24
    2206:	5cb2      	ldrb	r2, [r6, r2]
    2208:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    220a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    220c:	2225      	movs	r2, #37	; 0x25
    220e:	5cb2      	ldrb	r2, [r6, r2]
    2210:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2212:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2214:	7ab1      	ldrb	r1, [r6, #10]
    2216:	7af2      	ldrb	r2, [r6, #11]
    2218:	4311      	orrs	r1, r2
    221a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    221c:	8933      	ldrh	r3, [r6, #8]
    221e:	2bff      	cmp	r3, #255	; 0xff
    2220:	d100      	bne.n	2224 <usart_init+0x184>
    2222:	e081      	b.n	2328 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2224:	2280      	movs	r2, #128	; 0x80
    2226:	0452      	lsls	r2, r2, #17
    2228:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    222a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    222c:	232c      	movs	r3, #44	; 0x2c
    222e:	5cf3      	ldrb	r3, [r6, r3]
    2230:	2b00      	cmp	r3, #0
    2232:	d103      	bne.n	223c <usart_init+0x19c>
    2234:	4b62      	ldr	r3, [pc, #392]	; (23c0 <usart_init+0x320>)
    2236:	789b      	ldrb	r3, [r3, #2]
    2238:	079b      	lsls	r3, r3, #30
    223a:	d501      	bpl.n	2240 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    223c:	2380      	movs	r3, #128	; 0x80
    223e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2240:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2242:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2244:	2b00      	cmp	r3, #0
    2246:	d1fc      	bne.n	2242 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2248:	4643      	mov	r3, r8
    224a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    224c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    224e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2250:	2b00      	cmp	r3, #0
    2252:	d1fc      	bne.n	224e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2254:	4643      	mov	r3, r8
    2256:	601f      	str	r7, [r3, #0]
    2258:	ab0e      	add	r3, sp, #56	; 0x38
    225a:	2280      	movs	r2, #128	; 0x80
    225c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    225e:	2200      	movs	r2, #0
    2260:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2262:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2264:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2266:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2268:	930a      	str	r3, [sp, #40]	; 0x28
    226a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    226c:	930b      	str	r3, [sp, #44]	; 0x2c
    226e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2270:	930c      	str	r3, [sp, #48]	; 0x30
    2272:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2274:	9302      	str	r3, [sp, #8]
    2276:	930d      	str	r3, [sp, #52]	; 0x34
    2278:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    227a:	ae0a      	add	r6, sp, #40	; 0x28
    227c:	e063      	b.n	2346 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    227e:	2308      	movs	r3, #8
    2280:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2282:	3b07      	subs	r3, #7
    2284:	9307      	str	r3, [sp, #28]
    2286:	e77a      	b.n	217e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2288:	6833      	ldr	r3, [r6, #0]
    228a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    228c:	68f3      	ldr	r3, [r6, #12]
    228e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2290:	6973      	ldr	r3, [r6, #20]
    2292:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2294:	7e33      	ldrb	r3, [r6, #24]
    2296:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2298:	2326      	movs	r3, #38	; 0x26
    229a:	5cf3      	ldrb	r3, [r6, r3]
    229c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    229e:	6873      	ldr	r3, [r6, #4]
    22a0:	4699      	mov	r9, r3
	switch (transfer_mode)
    22a2:	2b00      	cmp	r3, #0
    22a4:	d018      	beq.n	22d8 <usart_init+0x238>
    22a6:	2380      	movs	r3, #128	; 0x80
    22a8:	055b      	lsls	r3, r3, #21
    22aa:	4599      	cmp	r9, r3
    22ac:	d001      	beq.n	22b2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    22ae:	2000      	movs	r0, #0
    22b0:	e025      	b.n	22fe <usart_init+0x25e>
			if (!config->use_external_clock) {
    22b2:	2327      	movs	r3, #39	; 0x27
    22b4:	5cf3      	ldrb	r3, [r6, r3]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d000      	beq.n	22bc <usart_init+0x21c>
    22ba:	e775      	b.n	21a8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    22bc:	6a33      	ldr	r3, [r6, #32]
    22be:	001f      	movs	r7, r3
    22c0:	b2c0      	uxtb	r0, r0
    22c2:	4b40      	ldr	r3, [pc, #256]	; (23c4 <usart_init+0x324>)
    22c4:	4798      	blx	r3
    22c6:	0001      	movs	r1, r0
    22c8:	220e      	movs	r2, #14
    22ca:	ab06      	add	r3, sp, #24
    22cc:	469c      	mov	ip, r3
    22ce:	4462      	add	r2, ip
    22d0:	0038      	movs	r0, r7
    22d2:	4b3d      	ldr	r3, [pc, #244]	; (23c8 <usart_init+0x328>)
    22d4:	4798      	blx	r3
    22d6:	e012      	b.n	22fe <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    22d8:	2308      	movs	r3, #8
    22da:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22dc:	2300      	movs	r3, #0
    22de:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    22e0:	2327      	movs	r3, #39	; 0x27
    22e2:	5cf3      	ldrb	r3, [r6, r3]
    22e4:	2b00      	cmp	r3, #0
    22e6:	d00e      	beq.n	2306 <usart_init+0x266>
				status_code =
    22e8:	9b06      	ldr	r3, [sp, #24]
    22ea:	9300      	str	r3, [sp, #0]
    22ec:	9b07      	ldr	r3, [sp, #28]
    22ee:	220e      	movs	r2, #14
    22f0:	a906      	add	r1, sp, #24
    22f2:	468c      	mov	ip, r1
    22f4:	4462      	add	r2, ip
    22f6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    22f8:	6a30      	ldr	r0, [r6, #32]
    22fa:	4f34      	ldr	r7, [pc, #208]	; (23cc <usart_init+0x32c>)
    22fc:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    22fe:	2800      	cmp	r0, #0
    2300:	d000      	beq.n	2304 <usart_init+0x264>
    2302:	e6e0      	b.n	20c6 <usart_init+0x26>
    2304:	e750      	b.n	21a8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2306:	6a33      	ldr	r3, [r6, #32]
    2308:	001f      	movs	r7, r3
    230a:	b2c0      	uxtb	r0, r0
    230c:	4b2d      	ldr	r3, [pc, #180]	; (23c4 <usart_init+0x324>)
    230e:	4798      	blx	r3
    2310:	0001      	movs	r1, r0
				status_code =
    2312:	9b06      	ldr	r3, [sp, #24]
    2314:	9300      	str	r3, [sp, #0]
    2316:	9b07      	ldr	r3, [sp, #28]
    2318:	220e      	movs	r2, #14
    231a:	a806      	add	r0, sp, #24
    231c:	4684      	mov	ip, r0
    231e:	4462      	add	r2, ip
    2320:	0038      	movs	r0, r7
    2322:	4f2a      	ldr	r7, [pc, #168]	; (23cc <usart_init+0x32c>)
    2324:	47b8      	blx	r7
    2326:	e7ea      	b.n	22fe <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2328:	7ef3      	ldrb	r3, [r6, #27]
    232a:	2b00      	cmp	r3, #0
    232c:	d100      	bne.n	2330 <usart_init+0x290>
    232e:	e77d      	b.n	222c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2330:	2380      	movs	r3, #128	; 0x80
    2332:	04db      	lsls	r3, r3, #19
    2334:	431f      	orrs	r7, r3
    2336:	e779      	b.n	222c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2338:	0020      	movs	r0, r4
    233a:	4b25      	ldr	r3, [pc, #148]	; (23d0 <usart_init+0x330>)
    233c:	4798      	blx	r3
    233e:	e007      	b.n	2350 <usart_init+0x2b0>
    2340:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2342:	2f04      	cmp	r7, #4
    2344:	d00d      	beq.n	2362 <usart_init+0x2c2>
    2346:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2348:	00bb      	lsls	r3, r7, #2
    234a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    234c:	2800      	cmp	r0, #0
    234e:	d0f3      	beq.n	2338 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2350:	1c43      	adds	r3, r0, #1
    2352:	d0f5      	beq.n	2340 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2354:	a90e      	add	r1, sp, #56	; 0x38
    2356:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2358:	0c00      	lsrs	r0, r0, #16
    235a:	b2c0      	uxtb	r0, r0
    235c:	4b1d      	ldr	r3, [pc, #116]	; (23d4 <usart_init+0x334>)
    235e:	4798      	blx	r3
    2360:	e7ee      	b.n	2340 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2362:	2300      	movs	r3, #0
    2364:	60eb      	str	r3, [r5, #12]
    2366:	612b      	str	r3, [r5, #16]
    2368:	616b      	str	r3, [r5, #20]
    236a:	61ab      	str	r3, [r5, #24]
    236c:	61eb      	str	r3, [r5, #28]
    236e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2370:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2372:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2374:	2200      	movs	r2, #0
    2376:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2378:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    237a:	3330      	adds	r3, #48	; 0x30
    237c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    237e:	3301      	adds	r3, #1
    2380:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2382:	3301      	adds	r3, #1
    2384:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2386:	3301      	adds	r3, #1
    2388:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    238a:	6828      	ldr	r0, [r5, #0]
    238c:	4b07      	ldr	r3, [pc, #28]	; (23ac <usart_init+0x30c>)
    238e:	4798      	blx	r3
    2390:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2392:	4911      	ldr	r1, [pc, #68]	; (23d8 <usart_init+0x338>)
    2394:	4b11      	ldr	r3, [pc, #68]	; (23dc <usart_init+0x33c>)
    2396:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2398:	00a4      	lsls	r4, r4, #2
    239a:	4b11      	ldr	r3, [pc, #68]	; (23e0 <usart_init+0x340>)
    239c:	50e5      	str	r5, [r4, r3]
	return status_code;
    239e:	2000      	movs	r0, #0
    23a0:	e691      	b.n	20c6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    23a2:	2310      	movs	r3, #16
    23a4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    23a6:	2300      	movs	r3, #0
    23a8:	9307      	str	r3, [sp, #28]
    23aa:	e6e8      	b.n	217e <usart_init+0xde>
    23ac:	00001f99 	.word	0x00001f99
    23b0:	40000400 	.word	0x40000400
    23b4:	00002b3d 	.word	0x00002b3d
    23b8:	00002ab1 	.word	0x00002ab1
    23bc:	00001dd5 	.word	0x00001dd5
    23c0:	41002000 	.word	0x41002000
    23c4:	00002b59 	.word	0x00002b59
    23c8:	00001d17 	.word	0x00001d17
    23cc:	00001d41 	.word	0x00001d41
    23d0:	00001e21 	.word	0x00001e21
    23d4:	00002c35 	.word	0x00002c35
    23d8:	00002565 	.word	0x00002565
    23dc:	00001fd5 	.word	0x00001fd5
    23e0:	2000053c 	.word	0x2000053c

000023e4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    23e4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    23e6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    23e8:	2a00      	cmp	r2, #0
    23ea:	d101      	bne.n	23f0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    23ec:	0018      	movs	r0, r3
    23ee:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    23f0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    23f2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    23f4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    23f6:	2a00      	cmp	r2, #0
    23f8:	d1f8      	bne.n	23ec <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    23fa:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    23fc:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23fe:	2a00      	cmp	r2, #0
    2400:	d1fc      	bne.n	23fc <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    2402:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2404:	2102      	movs	r1, #2
    2406:	7e1a      	ldrb	r2, [r3, #24]
    2408:	420a      	tst	r2, r1
    240a:	d0fc      	beq.n	2406 <usart_write_wait+0x22>
	return STATUS_OK;
    240c:	2300      	movs	r3, #0
    240e:	e7ed      	b.n	23ec <usart_write_wait+0x8>

00002410 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2410:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2412:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2414:	2a00      	cmp	r2, #0
    2416:	d101      	bne.n	241c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2418:	0018      	movs	r0, r3
    241a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    241c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    241e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2420:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2422:	2a00      	cmp	r2, #0
    2424:	d1f8      	bne.n	2418 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2426:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2428:	7e10      	ldrb	r0, [r2, #24]
    242a:	0740      	lsls	r0, r0, #29
    242c:	d5f4      	bpl.n	2418 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    242e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2430:	2b00      	cmp	r3, #0
    2432:	d1fc      	bne.n	242e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2434:	8b53      	ldrh	r3, [r2, #26]
    2436:	b2db      	uxtb	r3, r3
	if (error_code) {
    2438:	0698      	lsls	r0, r3, #26
    243a:	d01d      	beq.n	2478 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    243c:	0798      	lsls	r0, r3, #30
    243e:	d503      	bpl.n	2448 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2440:	2302      	movs	r3, #2
    2442:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2444:	3318      	adds	r3, #24
    2446:	e7e7      	b.n	2418 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2448:	0758      	lsls	r0, r3, #29
    244a:	d503      	bpl.n	2454 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    244c:	2304      	movs	r3, #4
    244e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2450:	331a      	adds	r3, #26
    2452:	e7e1      	b.n	2418 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2454:	07d8      	lsls	r0, r3, #31
    2456:	d503      	bpl.n	2460 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2458:	2301      	movs	r3, #1
    245a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    245c:	3312      	adds	r3, #18
    245e:	e7db      	b.n	2418 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2460:	06d8      	lsls	r0, r3, #27
    2462:	d503      	bpl.n	246c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2464:	2310      	movs	r3, #16
    2466:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2468:	3332      	adds	r3, #50	; 0x32
    246a:	e7d5      	b.n	2418 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    246c:	069b      	lsls	r3, r3, #26
    246e:	d503      	bpl.n	2478 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2470:	2320      	movs	r3, #32
    2472:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2474:	3321      	adds	r3, #33	; 0x21
    2476:	e7cf      	b.n	2418 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2478:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    247a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    247c:	2300      	movs	r3, #0
    247e:	e7cb      	b.n	2418 <usart_read_wait+0x8>

00002480 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2482:	0006      	movs	r6, r0
    2484:	000c      	movs	r4, r1
    2486:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2488:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    248a:	4b0a      	ldr	r3, [pc, #40]	; (24b4 <_usart_write_buffer+0x34>)
    248c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    248e:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2490:	b29b      	uxth	r3, r3
    2492:	2b00      	cmp	r3, #0
    2494:	d003      	beq.n	249e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2496:	4b08      	ldr	r3, [pc, #32]	; (24b8 <_usart_write_buffer+0x38>)
    2498:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    249a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    249c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    249e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    24a0:	4b05      	ldr	r3, [pc, #20]	; (24b8 <_usart_write_buffer+0x38>)
    24a2:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    24a4:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    24a6:	2205      	movs	r2, #5
    24a8:	2333      	movs	r3, #51	; 0x33
    24aa:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    24ac:	3b32      	subs	r3, #50	; 0x32
    24ae:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    24b0:	2000      	movs	r0, #0
    24b2:	e7f3      	b.n	249c <_usart_write_buffer+0x1c>
    24b4:	00001b91 	.word	0x00001b91
    24b8:	00001bd1 	.word	0x00001bd1

000024bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    24bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24be:	0004      	movs	r4, r0
    24c0:	000d      	movs	r5, r1
    24c2:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    24c4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    24c6:	4b0f      	ldr	r3, [pc, #60]	; (2504 <_usart_read_buffer+0x48>)
    24c8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    24ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    24cc:	b29b      	uxth	r3, r3
    24ce:	2b00      	cmp	r3, #0
    24d0:	d003      	beq.n	24da <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    24d2:	4b0d      	ldr	r3, [pc, #52]	; (2508 <_usart_read_buffer+0x4c>)
    24d4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    24d6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    24d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    24da:	85a6      	strh	r6, [r4, #44]	; 0x2c
    24dc:	4b0a      	ldr	r3, [pc, #40]	; (2508 <_usart_read_buffer+0x4c>)
    24de:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    24e0:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    24e2:	2205      	movs	r2, #5
    24e4:	2332      	movs	r3, #50	; 0x32
    24e6:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    24e8:	3b2e      	subs	r3, #46	; 0x2e
    24ea:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    24ec:	7a23      	ldrb	r3, [r4, #8]
    24ee:	2b00      	cmp	r3, #0
    24f0:	d001      	beq.n	24f6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    24f2:	2320      	movs	r3, #32
    24f4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    24f6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    24f8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    24fa:	2b00      	cmp	r3, #0
    24fc:	d0ec      	beq.n	24d8 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    24fe:	2308      	movs	r3, #8
    2500:	75bb      	strb	r3, [r7, #22]
    2502:	e7e9      	b.n	24d8 <_usart_read_buffer+0x1c>
    2504:	00001b91 	.word	0x00001b91
    2508:	00001bd1 	.word	0x00001bd1

0000250c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    250c:	1c93      	adds	r3, r2, #2
    250e:	009b      	lsls	r3, r3, #2
    2510:	18c3      	adds	r3, r0, r3
    2512:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2514:	2130      	movs	r1, #48	; 0x30
    2516:	2301      	movs	r3, #1
    2518:	4093      	lsls	r3, r2
    251a:	001a      	movs	r2, r3
    251c:	5c43      	ldrb	r3, [r0, r1]
    251e:	4313      	orrs	r3, r2
    2520:	5443      	strb	r3, [r0, r1]
}
    2522:	4770      	bx	lr

00002524 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2524:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2526:	2317      	movs	r3, #23
	if (length == 0) {
    2528:	2a00      	cmp	r2, #0
    252a:	d101      	bne.n	2530 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    252c:	0018      	movs	r0, r3
    252e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2530:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2532:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2534:	2c00      	cmp	r4, #0
    2536:	d0f9      	beq.n	252c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2538:	4b01      	ldr	r3, [pc, #4]	; (2540 <usart_write_buffer_job+0x1c>)
    253a:	4798      	blx	r3
    253c:	0003      	movs	r3, r0
    253e:	e7f5      	b.n	252c <usart_write_buffer_job+0x8>
    2540:	00002481 	.word	0x00002481

00002544 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2544:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2546:	2317      	movs	r3, #23
	if (length == 0) {
    2548:	2a00      	cmp	r2, #0
    254a:	d101      	bne.n	2550 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    254c:	0018      	movs	r0, r3
    254e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2550:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2552:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2554:	2c00      	cmp	r4, #0
    2556:	d0f9      	beq.n	254c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2558:	4b01      	ldr	r3, [pc, #4]	; (2560 <usart_read_buffer_job+0x1c>)
    255a:	4798      	blx	r3
    255c:	0003      	movs	r3, r0
    255e:	e7f5      	b.n	254c <usart_read_buffer_job+0x8>
    2560:	000024bd 	.word	0x000024bd

00002564 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2566:	0080      	lsls	r0, r0, #2
    2568:	4b62      	ldr	r3, [pc, #392]	; (26f4 <_usart_interrupt_handler+0x190>)
    256a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    256c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    256e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2570:	2b00      	cmp	r3, #0
    2572:	d1fc      	bne.n	256e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2574:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2576:	7da6      	ldrb	r6, [r4, #22]
    2578:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    257a:	2330      	movs	r3, #48	; 0x30
    257c:	5ceb      	ldrb	r3, [r5, r3]
    257e:	2231      	movs	r2, #49	; 0x31
    2580:	5caf      	ldrb	r7, [r5, r2]
    2582:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2584:	07f3      	lsls	r3, r6, #31
    2586:	d522      	bpl.n	25ce <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2588:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    258a:	b29b      	uxth	r3, r3
    258c:	2b00      	cmp	r3, #0
    258e:	d01c      	beq.n	25ca <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2590:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2592:	7813      	ldrb	r3, [r2, #0]
    2594:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2596:	1c51      	adds	r1, r2, #1
    2598:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    259a:	7969      	ldrb	r1, [r5, #5]
    259c:	2901      	cmp	r1, #1
    259e:	d00e      	beq.n	25be <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    25a0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    25a2:	05db      	lsls	r3, r3, #23
    25a4:	0ddb      	lsrs	r3, r3, #23
    25a6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    25a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    25aa:	3b01      	subs	r3, #1
    25ac:	b29b      	uxth	r3, r3
    25ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
    25b0:	2b00      	cmp	r3, #0
    25b2:	d10c      	bne.n	25ce <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    25b4:	3301      	adds	r3, #1
    25b6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    25b8:	3301      	adds	r3, #1
    25ba:	75a3      	strb	r3, [r4, #22]
    25bc:	e007      	b.n	25ce <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    25be:	7851      	ldrb	r1, [r2, #1]
    25c0:	0209      	lsls	r1, r1, #8
    25c2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    25c4:	3202      	adds	r2, #2
    25c6:	62aa      	str	r2, [r5, #40]	; 0x28
    25c8:	e7eb      	b.n	25a2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    25ca:	2301      	movs	r3, #1
    25cc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    25ce:	07b3      	lsls	r3, r6, #30
    25d0:	d506      	bpl.n	25e0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    25d2:	2302      	movs	r3, #2
    25d4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    25d6:	2200      	movs	r2, #0
    25d8:	3331      	adds	r3, #49	; 0x31
    25da:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    25dc:	07fb      	lsls	r3, r7, #31
    25de:	d41a      	bmi.n	2616 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    25e0:	0773      	lsls	r3, r6, #29
    25e2:	d565      	bpl.n	26b0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    25e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    25e6:	b29b      	uxth	r3, r3
    25e8:	2b00      	cmp	r3, #0
    25ea:	d05f      	beq.n	26ac <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    25ec:	8b63      	ldrh	r3, [r4, #26]
    25ee:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    25f0:	071a      	lsls	r2, r3, #28
    25f2:	d414      	bmi.n	261e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    25f4:	223f      	movs	r2, #63	; 0x3f
    25f6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    25f8:	2b00      	cmp	r3, #0
    25fa:	d034      	beq.n	2666 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    25fc:	079a      	lsls	r2, r3, #30
    25fe:	d511      	bpl.n	2624 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2600:	221a      	movs	r2, #26
    2602:	2332      	movs	r3, #50	; 0x32
    2604:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2606:	3b30      	subs	r3, #48	; 0x30
    2608:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    260a:	077b      	lsls	r3, r7, #29
    260c:	d550      	bpl.n	26b0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    260e:	0028      	movs	r0, r5
    2610:	696b      	ldr	r3, [r5, #20]
    2612:	4798      	blx	r3
    2614:	e04c      	b.n	26b0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2616:	0028      	movs	r0, r5
    2618:	68eb      	ldr	r3, [r5, #12]
    261a:	4798      	blx	r3
    261c:	e7e0      	b.n	25e0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    261e:	2237      	movs	r2, #55	; 0x37
    2620:	4013      	ands	r3, r2
    2622:	e7e9      	b.n	25f8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2624:	075a      	lsls	r2, r3, #29
    2626:	d505      	bpl.n	2634 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2628:	221e      	movs	r2, #30
    262a:	2332      	movs	r3, #50	; 0x32
    262c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    262e:	3b2e      	subs	r3, #46	; 0x2e
    2630:	8363      	strh	r3, [r4, #26]
    2632:	e7ea      	b.n	260a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2634:	07da      	lsls	r2, r3, #31
    2636:	d505      	bpl.n	2644 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2638:	2213      	movs	r2, #19
    263a:	2332      	movs	r3, #50	; 0x32
    263c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    263e:	3b31      	subs	r3, #49	; 0x31
    2640:	8363      	strh	r3, [r4, #26]
    2642:	e7e2      	b.n	260a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2644:	06da      	lsls	r2, r3, #27
    2646:	d505      	bpl.n	2654 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2648:	2242      	movs	r2, #66	; 0x42
    264a:	2332      	movs	r3, #50	; 0x32
    264c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    264e:	3b22      	subs	r3, #34	; 0x22
    2650:	8363      	strh	r3, [r4, #26]
    2652:	e7da      	b.n	260a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2654:	2220      	movs	r2, #32
    2656:	421a      	tst	r2, r3
    2658:	d0d7      	beq.n	260a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    265a:	3221      	adds	r2, #33	; 0x21
    265c:	2332      	movs	r3, #50	; 0x32
    265e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2660:	3b12      	subs	r3, #18
    2662:	8363      	strh	r3, [r4, #26]
    2664:	e7d1      	b.n	260a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2666:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2668:	05db      	lsls	r3, r3, #23
    266a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    266c:	b2da      	uxtb	r2, r3
    266e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2670:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2672:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2674:	1c51      	adds	r1, r2, #1
    2676:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2678:	7969      	ldrb	r1, [r5, #5]
    267a:	2901      	cmp	r1, #1
    267c:	d010      	beq.n	26a0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    267e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2680:	3b01      	subs	r3, #1
    2682:	b29b      	uxth	r3, r3
    2684:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2686:	2b00      	cmp	r3, #0
    2688:	d112      	bne.n	26b0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    268a:	3304      	adds	r3, #4
    268c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    268e:	2200      	movs	r2, #0
    2690:	332e      	adds	r3, #46	; 0x2e
    2692:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2694:	07bb      	lsls	r3, r7, #30
    2696:	d50b      	bpl.n	26b0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2698:	0028      	movs	r0, r5
    269a:	692b      	ldr	r3, [r5, #16]
    269c:	4798      	blx	r3
    269e:	e007      	b.n	26b0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    26a0:	0a1b      	lsrs	r3, r3, #8
    26a2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    26a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    26a6:	3301      	adds	r3, #1
    26a8:	626b      	str	r3, [r5, #36]	; 0x24
    26aa:	e7e8      	b.n	267e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    26ac:	2304      	movs	r3, #4
    26ae:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    26b0:	06f3      	lsls	r3, r6, #27
    26b2:	d504      	bpl.n	26be <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    26b4:	2310      	movs	r3, #16
    26b6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    26b8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    26ba:	06fb      	lsls	r3, r7, #27
    26bc:	d40e      	bmi.n	26dc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    26be:	06b3      	lsls	r3, r6, #26
    26c0:	d504      	bpl.n	26cc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    26c2:	2320      	movs	r3, #32
    26c4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    26c6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    26c8:	073b      	lsls	r3, r7, #28
    26ca:	d40b      	bmi.n	26e4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    26cc:	0733      	lsls	r3, r6, #28
    26ce:	d504      	bpl.n	26da <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    26d0:	2308      	movs	r3, #8
    26d2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    26d4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    26d6:	06bb      	lsls	r3, r7, #26
    26d8:	d408      	bmi.n	26ec <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    26da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    26dc:	0028      	movs	r0, r5
    26de:	69eb      	ldr	r3, [r5, #28]
    26e0:	4798      	blx	r3
    26e2:	e7ec      	b.n	26be <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    26e4:	0028      	movs	r0, r5
    26e6:	69ab      	ldr	r3, [r5, #24]
    26e8:	4798      	blx	r3
    26ea:	e7ef      	b.n	26cc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    26ec:	6a2b      	ldr	r3, [r5, #32]
    26ee:	0028      	movs	r0, r5
    26f0:	4798      	blx	r3
}
    26f2:	e7f2      	b.n	26da <_usart_interrupt_handler+0x176>
    26f4:	2000053c 	.word	0x2000053c

000026f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    26f8:	b510      	push	{r4, lr}
	switch (clock_source) {
    26fa:	2808      	cmp	r0, #8
    26fc:	d803      	bhi.n	2706 <system_clock_source_get_hz+0xe>
    26fe:	0080      	lsls	r0, r0, #2
    2700:	4b1b      	ldr	r3, [pc, #108]	; (2770 <system_clock_source_get_hz+0x78>)
    2702:	581b      	ldr	r3, [r3, r0]
    2704:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2706:	2000      	movs	r0, #0
    2708:	e030      	b.n	276c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    270a:	4b1a      	ldr	r3, [pc, #104]	; (2774 <system_clock_source_get_hz+0x7c>)
    270c:	6918      	ldr	r0, [r3, #16]
    270e:	e02d      	b.n	276c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2710:	4b19      	ldr	r3, [pc, #100]	; (2778 <system_clock_source_get_hz+0x80>)
    2712:	6a1b      	ldr	r3, [r3, #32]
    2714:	059b      	lsls	r3, r3, #22
    2716:	0f9b      	lsrs	r3, r3, #30
    2718:	4818      	ldr	r0, [pc, #96]	; (277c <system_clock_source_get_hz+0x84>)
    271a:	40d8      	lsrs	r0, r3
    271c:	e026      	b.n	276c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    271e:	4b15      	ldr	r3, [pc, #84]	; (2774 <system_clock_source_get_hz+0x7c>)
    2720:	6958      	ldr	r0, [r3, #20]
    2722:	e023      	b.n	276c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2724:	4b13      	ldr	r3, [pc, #76]	; (2774 <system_clock_source_get_hz+0x7c>)
    2726:	681b      	ldr	r3, [r3, #0]
			return 0;
    2728:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    272a:	079b      	lsls	r3, r3, #30
    272c:	d51e      	bpl.n	276c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    272e:	4912      	ldr	r1, [pc, #72]	; (2778 <system_clock_source_get_hz+0x80>)
    2730:	2210      	movs	r2, #16
    2732:	68cb      	ldr	r3, [r1, #12]
    2734:	421a      	tst	r2, r3
    2736:	d0fc      	beq.n	2732 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2738:	4b0e      	ldr	r3, [pc, #56]	; (2774 <system_clock_source_get_hz+0x7c>)
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	075b      	lsls	r3, r3, #29
    273e:	d401      	bmi.n	2744 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    2740:	480f      	ldr	r0, [pc, #60]	; (2780 <system_clock_source_get_hz+0x88>)
    2742:	e013      	b.n	276c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2744:	2000      	movs	r0, #0
    2746:	4b0f      	ldr	r3, [pc, #60]	; (2784 <system_clock_source_get_hz+0x8c>)
    2748:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    274a:	4b0a      	ldr	r3, [pc, #40]	; (2774 <system_clock_source_get_hz+0x7c>)
    274c:	689b      	ldr	r3, [r3, #8]
    274e:	041b      	lsls	r3, r3, #16
    2750:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2752:	4358      	muls	r0, r3
    2754:	e00a      	b.n	276c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2756:	2350      	movs	r3, #80	; 0x50
    2758:	4a07      	ldr	r2, [pc, #28]	; (2778 <system_clock_source_get_hz+0x80>)
    275a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    275c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    275e:	075b      	lsls	r3, r3, #29
    2760:	d504      	bpl.n	276c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    2762:	4b04      	ldr	r3, [pc, #16]	; (2774 <system_clock_source_get_hz+0x7c>)
    2764:	68d8      	ldr	r0, [r3, #12]
    2766:	e001      	b.n	276c <system_clock_source_get_hz+0x74>
		return 32768UL;
    2768:	2080      	movs	r0, #128	; 0x80
    276a:	0200      	lsls	r0, r0, #8
	}
}
    276c:	bd10      	pop	{r4, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	00004c5c 	.word	0x00004c5c
    2774:	20000364 	.word	0x20000364
    2778:	40000800 	.word	0x40000800
    277c:	007a1200 	.word	0x007a1200
    2780:	02dc6c00 	.word	0x02dc6c00
    2784:	00002b59 	.word	0x00002b59

00002788 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2788:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    278a:	490c      	ldr	r1, [pc, #48]	; (27bc <system_clock_source_osc8m_set_config+0x34>)
    278c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    278e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2790:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2792:	7840      	ldrb	r0, [r0, #1]
    2794:	2201      	movs	r2, #1
    2796:	4010      	ands	r0, r2
    2798:	0180      	lsls	r0, r0, #6
    279a:	2640      	movs	r6, #64	; 0x40
    279c:	43b3      	bics	r3, r6
    279e:	4303      	orrs	r3, r0
    27a0:	402a      	ands	r2, r5
    27a2:	01d2      	lsls	r2, r2, #7
    27a4:	2080      	movs	r0, #128	; 0x80
    27a6:	4383      	bics	r3, r0
    27a8:	4313      	orrs	r3, r2
    27aa:	2203      	movs	r2, #3
    27ac:	4022      	ands	r2, r4
    27ae:	0212      	lsls	r2, r2, #8
    27b0:	4803      	ldr	r0, [pc, #12]	; (27c0 <system_clock_source_osc8m_set_config+0x38>)
    27b2:	4003      	ands	r3, r0
    27b4:	4313      	orrs	r3, r2
    27b6:	620b      	str	r3, [r1, #32]
}
    27b8:	bd70      	pop	{r4, r5, r6, pc}
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	40000800 	.word	0x40000800
    27c0:	fffffcff 	.word	0xfffffcff

000027c4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    27c4:	2808      	cmp	r0, #8
    27c6:	d803      	bhi.n	27d0 <system_clock_source_enable+0xc>
    27c8:	0080      	lsls	r0, r0, #2
    27ca:	4b25      	ldr	r3, [pc, #148]	; (2860 <system_clock_source_enable+0x9c>)
    27cc:	581b      	ldr	r3, [r3, r0]
    27ce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    27d0:	2017      	movs	r0, #23
    27d2:	e044      	b.n	285e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    27d4:	4a23      	ldr	r2, [pc, #140]	; (2864 <system_clock_source_enable+0xa0>)
    27d6:	6a13      	ldr	r3, [r2, #32]
    27d8:	2102      	movs	r1, #2
    27da:	430b      	orrs	r3, r1
    27dc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    27de:	2000      	movs	r0, #0
    27e0:	e03d      	b.n	285e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    27e2:	4a20      	ldr	r2, [pc, #128]	; (2864 <system_clock_source_enable+0xa0>)
    27e4:	6993      	ldr	r3, [r2, #24]
    27e6:	2102      	movs	r1, #2
    27e8:	430b      	orrs	r3, r1
    27ea:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    27ec:	2000      	movs	r0, #0
		break;
    27ee:	e036      	b.n	285e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    27f0:	4a1c      	ldr	r2, [pc, #112]	; (2864 <system_clock_source_enable+0xa0>)
    27f2:	8a13      	ldrh	r3, [r2, #16]
    27f4:	2102      	movs	r1, #2
    27f6:	430b      	orrs	r3, r1
    27f8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    27fa:	2000      	movs	r0, #0
		break;
    27fc:	e02f      	b.n	285e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    27fe:	4a19      	ldr	r2, [pc, #100]	; (2864 <system_clock_source_enable+0xa0>)
    2800:	8a93      	ldrh	r3, [r2, #20]
    2802:	2102      	movs	r1, #2
    2804:	430b      	orrs	r3, r1
    2806:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2808:	2000      	movs	r0, #0
		break;
    280a:	e028      	b.n	285e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    280c:	4916      	ldr	r1, [pc, #88]	; (2868 <system_clock_source_enable+0xa4>)
    280e:	680b      	ldr	r3, [r1, #0]
    2810:	2202      	movs	r2, #2
    2812:	4313      	orrs	r3, r2
    2814:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2816:	4b13      	ldr	r3, [pc, #76]	; (2864 <system_clock_source_enable+0xa0>)
    2818:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    281a:	0019      	movs	r1, r3
    281c:	320e      	adds	r2, #14
    281e:	68cb      	ldr	r3, [r1, #12]
    2820:	421a      	tst	r2, r3
    2822:	d0fc      	beq.n	281e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2824:	4a10      	ldr	r2, [pc, #64]	; (2868 <system_clock_source_enable+0xa4>)
    2826:	6891      	ldr	r1, [r2, #8]
    2828:	4b0e      	ldr	r3, [pc, #56]	; (2864 <system_clock_source_enable+0xa0>)
    282a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    282c:	6852      	ldr	r2, [r2, #4]
    282e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2830:	2200      	movs	r2, #0
    2832:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2834:	0019      	movs	r1, r3
    2836:	3210      	adds	r2, #16
    2838:	68cb      	ldr	r3, [r1, #12]
    283a:	421a      	tst	r2, r3
    283c:	d0fc      	beq.n	2838 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    283e:	4b0a      	ldr	r3, [pc, #40]	; (2868 <system_clock_source_enable+0xa4>)
    2840:	681b      	ldr	r3, [r3, #0]
    2842:	b29b      	uxth	r3, r3
    2844:	4a07      	ldr	r2, [pc, #28]	; (2864 <system_clock_source_enable+0xa0>)
    2846:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2848:	2000      	movs	r0, #0
    284a:	e008      	b.n	285e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    284c:	4905      	ldr	r1, [pc, #20]	; (2864 <system_clock_source_enable+0xa0>)
    284e:	2244      	movs	r2, #68	; 0x44
    2850:	5c8b      	ldrb	r3, [r1, r2]
    2852:	2002      	movs	r0, #2
    2854:	4303      	orrs	r3, r0
    2856:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2858:	2000      	movs	r0, #0
		break;
    285a:	e000      	b.n	285e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    285c:	2000      	movs	r0, #0
}
    285e:	4770      	bx	lr
    2860:	00004c80 	.word	0x00004c80
    2864:	40000800 	.word	0x40000800
    2868:	20000364 	.word	0x20000364

0000286c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    286c:	b530      	push	{r4, r5, lr}
    286e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2870:	22c2      	movs	r2, #194	; 0xc2
    2872:	00d2      	lsls	r2, r2, #3
    2874:	4b1a      	ldr	r3, [pc, #104]	; (28e0 <system_clock_init+0x74>)
    2876:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2878:	4a1a      	ldr	r2, [pc, #104]	; (28e4 <system_clock_init+0x78>)
    287a:	6853      	ldr	r3, [r2, #4]
    287c:	211e      	movs	r1, #30
    287e:	438b      	bics	r3, r1
    2880:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2882:	2301      	movs	r3, #1
    2884:	466a      	mov	r2, sp
    2886:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2888:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    288a:	4d17      	ldr	r5, [pc, #92]	; (28e8 <system_clock_init+0x7c>)
    288c:	b2e0      	uxtb	r0, r4
    288e:	4669      	mov	r1, sp
    2890:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2892:	3401      	adds	r4, #1
    2894:	2c25      	cmp	r4, #37	; 0x25
    2896:	d1f9      	bne.n	288c <system_clock_init+0x20>
	config->run_in_standby  = false;
    2898:	a803      	add	r0, sp, #12
    289a:	2400      	movs	r4, #0
    289c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    289e:	2501      	movs	r5, #1
    28a0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    28a2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    28a4:	4b11      	ldr	r3, [pc, #68]	; (28ec <system_clock_init+0x80>)
    28a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    28a8:	2006      	movs	r0, #6
    28aa:	4b11      	ldr	r3, [pc, #68]	; (28f0 <system_clock_init+0x84>)
    28ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    28ae:	4b11      	ldr	r3, [pc, #68]	; (28f4 <system_clock_init+0x88>)
    28b0:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    28b2:	4b11      	ldr	r3, [pc, #68]	; (28f8 <system_clock_init+0x8c>)
    28b4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    28b6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    28b8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    28ba:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    28bc:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    28be:	466b      	mov	r3, sp
    28c0:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    28c2:	2306      	movs	r3, #6
    28c4:	466a      	mov	r2, sp
    28c6:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    28c8:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    28ca:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    28cc:	4669      	mov	r1, sp
    28ce:	2000      	movs	r0, #0
    28d0:	4b0a      	ldr	r3, [pc, #40]	; (28fc <system_clock_init+0x90>)
    28d2:	4798      	blx	r3
    28d4:	2000      	movs	r0, #0
    28d6:	4b0a      	ldr	r3, [pc, #40]	; (2900 <system_clock_init+0x94>)
    28d8:	4798      	blx	r3
#endif
}
    28da:	b005      	add	sp, #20
    28dc:	bd30      	pop	{r4, r5, pc}
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	40000800 	.word	0x40000800
    28e4:	41004000 	.word	0x41004000
    28e8:	00002b3d 	.word	0x00002b3d
    28ec:	00002789 	.word	0x00002789
    28f0:	000027c5 	.word	0x000027c5
    28f4:	00002905 	.word	0x00002905
    28f8:	40000400 	.word	0x40000400
    28fc:	00002929 	.word	0x00002929
    2900:	000029e1 	.word	0x000029e1

00002904 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2904:	4a06      	ldr	r2, [pc, #24]	; (2920 <system_gclk_init+0x1c>)
    2906:	6993      	ldr	r3, [r2, #24]
    2908:	2108      	movs	r1, #8
    290a:	430b      	orrs	r3, r1
    290c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    290e:	2201      	movs	r2, #1
    2910:	4b04      	ldr	r3, [pc, #16]	; (2924 <system_gclk_init+0x20>)
    2912:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2914:	0019      	movs	r1, r3
    2916:	780b      	ldrb	r3, [r1, #0]
    2918:	4213      	tst	r3, r2
    291a:	d1fc      	bne.n	2916 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    291c:	4770      	bx	lr
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	40000400 	.word	0x40000400
    2924:	40000c00 	.word	0x40000c00

00002928 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2928:	b570      	push	{r4, r5, r6, lr}
    292a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    292c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    292e:	780d      	ldrb	r5, [r1, #0]
    2930:	022d      	lsls	r5, r5, #8
    2932:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2934:	784b      	ldrb	r3, [r1, #1]
    2936:	2b00      	cmp	r3, #0
    2938:	d002      	beq.n	2940 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    293a:	2380      	movs	r3, #128	; 0x80
    293c:	02db      	lsls	r3, r3, #11
    293e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2940:	7a4b      	ldrb	r3, [r1, #9]
    2942:	2b00      	cmp	r3, #0
    2944:	d002      	beq.n	294c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2946:	2380      	movs	r3, #128	; 0x80
    2948:	031b      	lsls	r3, r3, #12
    294a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    294c:	6848      	ldr	r0, [r1, #4]
    294e:	2801      	cmp	r0, #1
    2950:	d910      	bls.n	2974 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2952:	1e43      	subs	r3, r0, #1
    2954:	4218      	tst	r0, r3
    2956:	d134      	bne.n	29c2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2958:	2802      	cmp	r0, #2
    295a:	d930      	bls.n	29be <system_gclk_gen_set_config+0x96>
    295c:	2302      	movs	r3, #2
    295e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2960:	3201      	adds	r2, #1
						mask <<= 1) {
    2962:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2964:	4298      	cmp	r0, r3
    2966:	d8fb      	bhi.n	2960 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2968:	0212      	lsls	r2, r2, #8
    296a:	4332      	orrs	r2, r6
    296c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    296e:	2380      	movs	r3, #128	; 0x80
    2970:	035b      	lsls	r3, r3, #13
    2972:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2974:	7a0b      	ldrb	r3, [r1, #8]
    2976:	2b00      	cmp	r3, #0
    2978:	d002      	beq.n	2980 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    297a:	2380      	movs	r3, #128	; 0x80
    297c:	039b      	lsls	r3, r3, #14
    297e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2980:	4a13      	ldr	r2, [pc, #76]	; (29d0 <system_gclk_gen_set_config+0xa8>)
    2982:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2984:	b25b      	sxtb	r3, r3
    2986:	2b00      	cmp	r3, #0
    2988:	dbfb      	blt.n	2982 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    298a:	4b12      	ldr	r3, [pc, #72]	; (29d4 <system_gclk_gen_set_config+0xac>)
    298c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    298e:	4b12      	ldr	r3, [pc, #72]	; (29d8 <system_gclk_gen_set_config+0xb0>)
    2990:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2992:	4a0f      	ldr	r2, [pc, #60]	; (29d0 <system_gclk_gen_set_config+0xa8>)
    2994:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2996:	b25b      	sxtb	r3, r3
    2998:	2b00      	cmp	r3, #0
    299a:	dbfb      	blt.n	2994 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    299c:	4b0c      	ldr	r3, [pc, #48]	; (29d0 <system_gclk_gen_set_config+0xa8>)
    299e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29a0:	001a      	movs	r2, r3
    29a2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    29a4:	b25b      	sxtb	r3, r3
    29a6:	2b00      	cmp	r3, #0
    29a8:	dbfb      	blt.n	29a2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    29aa:	4a09      	ldr	r2, [pc, #36]	; (29d0 <system_gclk_gen_set_config+0xa8>)
    29ac:	6853      	ldr	r3, [r2, #4]
    29ae:	2180      	movs	r1, #128	; 0x80
    29b0:	0249      	lsls	r1, r1, #9
    29b2:	400b      	ands	r3, r1
    29b4:	431d      	orrs	r5, r3
    29b6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    29b8:	4b08      	ldr	r3, [pc, #32]	; (29dc <system_gclk_gen_set_config+0xb4>)
    29ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    29bc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    29be:	2200      	movs	r2, #0
    29c0:	e7d2      	b.n	2968 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    29c2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    29c4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    29c6:	2380      	movs	r3, #128	; 0x80
    29c8:	029b      	lsls	r3, r3, #10
    29ca:	431d      	orrs	r5, r3
    29cc:	e7d2      	b.n	2974 <system_gclk_gen_set_config+0x4c>
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	40000c00 	.word	0x40000c00
    29d4:	00001b91 	.word	0x00001b91
    29d8:	40000c08 	.word	0x40000c08
    29dc:	00001bd1 	.word	0x00001bd1

000029e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    29e0:	b510      	push	{r4, lr}
    29e2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29e4:	4a0b      	ldr	r2, [pc, #44]	; (2a14 <system_gclk_gen_enable+0x34>)
    29e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29e8:	b25b      	sxtb	r3, r3
    29ea:	2b00      	cmp	r3, #0
    29ec:	dbfb      	blt.n	29e6 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    29ee:	4b0a      	ldr	r3, [pc, #40]	; (2a18 <system_gclk_gen_enable+0x38>)
    29f0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    29f2:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <system_gclk_gen_enable+0x3c>)
    29f4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    29f6:	4a07      	ldr	r2, [pc, #28]	; (2a14 <system_gclk_gen_enable+0x34>)
    29f8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    29fa:	b25b      	sxtb	r3, r3
    29fc:	2b00      	cmp	r3, #0
    29fe:	dbfb      	blt.n	29f8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2a00:	4a04      	ldr	r2, [pc, #16]	; (2a14 <system_gclk_gen_enable+0x34>)
    2a02:	6851      	ldr	r1, [r2, #4]
    2a04:	2380      	movs	r3, #128	; 0x80
    2a06:	025b      	lsls	r3, r3, #9
    2a08:	430b      	orrs	r3, r1
    2a0a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2a0c:	4b04      	ldr	r3, [pc, #16]	; (2a20 <system_gclk_gen_enable+0x40>)
    2a0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2a10:	bd10      	pop	{r4, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	40000c00 	.word	0x40000c00
    2a18:	00001b91 	.word	0x00001b91
    2a1c:	40000c04 	.word	0x40000c04
    2a20:	00001bd1 	.word	0x00001bd1

00002a24 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2a24:	b570      	push	{r4, r5, r6, lr}
    2a26:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a28:	4a1a      	ldr	r2, [pc, #104]	; (2a94 <system_gclk_gen_get_hz+0x70>)
    2a2a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a2c:	b25b      	sxtb	r3, r3
    2a2e:	2b00      	cmp	r3, #0
    2a30:	dbfb      	blt.n	2a2a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2a32:	4b19      	ldr	r3, [pc, #100]	; (2a98 <system_gclk_gen_get_hz+0x74>)
    2a34:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a36:	4b19      	ldr	r3, [pc, #100]	; (2a9c <system_gclk_gen_get_hz+0x78>)
    2a38:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a3a:	4a16      	ldr	r2, [pc, #88]	; (2a94 <system_gclk_gen_get_hz+0x70>)
    2a3c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a3e:	b25b      	sxtb	r3, r3
    2a40:	2b00      	cmp	r3, #0
    2a42:	dbfb      	blt.n	2a3c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2a44:	4e13      	ldr	r6, [pc, #76]	; (2a94 <system_gclk_gen_get_hz+0x70>)
    2a46:	6870      	ldr	r0, [r6, #4]
    2a48:	04c0      	lsls	r0, r0, #19
    2a4a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2a4c:	4b14      	ldr	r3, [pc, #80]	; (2aa0 <system_gclk_gen_get_hz+0x7c>)
    2a4e:	4798      	blx	r3
    2a50:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2a52:	4b12      	ldr	r3, [pc, #72]	; (2a9c <system_gclk_gen_get_hz+0x78>)
    2a54:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2a56:	6876      	ldr	r6, [r6, #4]
    2a58:	02f6      	lsls	r6, r6, #11
    2a5a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2a5c:	4b11      	ldr	r3, [pc, #68]	; (2aa4 <system_gclk_gen_get_hz+0x80>)
    2a5e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2a60:	4a0c      	ldr	r2, [pc, #48]	; (2a94 <system_gclk_gen_get_hz+0x70>)
    2a62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2a64:	b25b      	sxtb	r3, r3
    2a66:	2b00      	cmp	r3, #0
    2a68:	dbfb      	blt.n	2a62 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2a6a:	4b0a      	ldr	r3, [pc, #40]	; (2a94 <system_gclk_gen_get_hz+0x70>)
    2a6c:	689c      	ldr	r4, [r3, #8]
    2a6e:	0224      	lsls	r4, r4, #8
    2a70:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2a72:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <system_gclk_gen_get_hz+0x84>)
    2a74:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2a76:	2e00      	cmp	r6, #0
    2a78:	d107      	bne.n	2a8a <system_gclk_gen_get_hz+0x66>
    2a7a:	2c01      	cmp	r4, #1
    2a7c:	d907      	bls.n	2a8e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2a7e:	0021      	movs	r1, r4
    2a80:	0028      	movs	r0, r5
    2a82:	4b0a      	ldr	r3, [pc, #40]	; (2aac <system_gclk_gen_get_hz+0x88>)
    2a84:	4798      	blx	r3
    2a86:	0005      	movs	r5, r0
    2a88:	e001      	b.n	2a8e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2a8a:	3401      	adds	r4, #1
    2a8c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2a8e:	0028      	movs	r0, r5
    2a90:	bd70      	pop	{r4, r5, r6, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	40000c00 	.word	0x40000c00
    2a98:	00001b91 	.word	0x00001b91
    2a9c:	40000c04 	.word	0x40000c04
    2aa0:	000026f9 	.word	0x000026f9
    2aa4:	40000c08 	.word	0x40000c08
    2aa8:	00001bd1 	.word	0x00001bd1
    2aac:	0000351d 	.word	0x0000351d

00002ab0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2ab0:	b510      	push	{r4, lr}
    2ab2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <system_gclk_chan_enable+0x20>)
    2ab6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ab8:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <system_gclk_chan_enable+0x24>)
    2aba:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2abc:	4a06      	ldr	r2, [pc, #24]	; (2ad8 <system_gclk_chan_enable+0x28>)
    2abe:	8853      	ldrh	r3, [r2, #2]
    2ac0:	2180      	movs	r1, #128	; 0x80
    2ac2:	01c9      	lsls	r1, r1, #7
    2ac4:	430b      	orrs	r3, r1
    2ac6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2ac8:	4b04      	ldr	r3, [pc, #16]	; (2adc <system_gclk_chan_enable+0x2c>)
    2aca:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2acc:	bd10      	pop	{r4, pc}
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	00001b91 	.word	0x00001b91
    2ad4:	40000c02 	.word	0x40000c02
    2ad8:	40000c00 	.word	0x40000c00
    2adc:	00001bd1 	.word	0x00001bd1

00002ae0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2ae0:	b510      	push	{r4, lr}
    2ae2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ae4:	4b0f      	ldr	r3, [pc, #60]	; (2b24 <system_gclk_chan_disable+0x44>)
    2ae6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ae8:	4b0f      	ldr	r3, [pc, #60]	; (2b28 <system_gclk_chan_disable+0x48>)
    2aea:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2aec:	4a0f      	ldr	r2, [pc, #60]	; (2b2c <system_gclk_chan_disable+0x4c>)
    2aee:	8853      	ldrh	r3, [r2, #2]
    2af0:	051b      	lsls	r3, r3, #20
    2af2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2af4:	8853      	ldrh	r3, [r2, #2]
    2af6:	490e      	ldr	r1, [pc, #56]	; (2b30 <system_gclk_chan_disable+0x50>)
    2af8:	400b      	ands	r3, r1
    2afa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2afc:	8853      	ldrh	r3, [r2, #2]
    2afe:	490d      	ldr	r1, [pc, #52]	; (2b34 <system_gclk_chan_disable+0x54>)
    2b00:	400b      	ands	r3, r1
    2b02:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2b04:	0011      	movs	r1, r2
    2b06:	2280      	movs	r2, #128	; 0x80
    2b08:	01d2      	lsls	r2, r2, #7
    2b0a:	884b      	ldrh	r3, [r1, #2]
    2b0c:	4213      	tst	r3, r2
    2b0e:	d1fc      	bne.n	2b0a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2b10:	4906      	ldr	r1, [pc, #24]	; (2b2c <system_gclk_chan_disable+0x4c>)
    2b12:	884a      	ldrh	r2, [r1, #2]
    2b14:	0203      	lsls	r3, r0, #8
    2b16:	4806      	ldr	r0, [pc, #24]	; (2b30 <system_gclk_chan_disable+0x50>)
    2b18:	4002      	ands	r2, r0
    2b1a:	4313      	orrs	r3, r2
    2b1c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2b1e:	4b06      	ldr	r3, [pc, #24]	; (2b38 <system_gclk_chan_disable+0x58>)
    2b20:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2b22:	bd10      	pop	{r4, pc}
    2b24:	00001b91 	.word	0x00001b91
    2b28:	40000c02 	.word	0x40000c02
    2b2c:	40000c00 	.word	0x40000c00
    2b30:	fffff0ff 	.word	0xfffff0ff
    2b34:	ffffbfff 	.word	0xffffbfff
    2b38:	00001bd1 	.word	0x00001bd1

00002b3c <system_gclk_chan_set_config>:
{
    2b3c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2b3e:	780c      	ldrb	r4, [r1, #0]
    2b40:	0224      	lsls	r4, r4, #8
    2b42:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2b44:	4b02      	ldr	r3, [pc, #8]	; (2b50 <system_gclk_chan_set_config+0x14>)
    2b46:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2b48:	b2a4      	uxth	r4, r4
    2b4a:	4b02      	ldr	r3, [pc, #8]	; (2b54 <system_gclk_chan_set_config+0x18>)
    2b4c:	805c      	strh	r4, [r3, #2]
}
    2b4e:	bd10      	pop	{r4, pc}
    2b50:	00002ae1 	.word	0x00002ae1
    2b54:	40000c00 	.word	0x40000c00

00002b58 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2b58:	b510      	push	{r4, lr}
    2b5a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2b5c:	4b06      	ldr	r3, [pc, #24]	; (2b78 <system_gclk_chan_get_hz+0x20>)
    2b5e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2b60:	4b06      	ldr	r3, [pc, #24]	; (2b7c <system_gclk_chan_get_hz+0x24>)
    2b62:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2b64:	4b06      	ldr	r3, [pc, #24]	; (2b80 <system_gclk_chan_get_hz+0x28>)
    2b66:	885c      	ldrh	r4, [r3, #2]
    2b68:	0524      	lsls	r4, r4, #20
    2b6a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <system_gclk_chan_get_hz+0x2c>)
    2b6e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2b70:	0020      	movs	r0, r4
    2b72:	4b05      	ldr	r3, [pc, #20]	; (2b88 <system_gclk_chan_get_hz+0x30>)
    2b74:	4798      	blx	r3
}
    2b76:	bd10      	pop	{r4, pc}
    2b78:	00001b91 	.word	0x00001b91
    2b7c:	40000c02 	.word	0x40000c02
    2b80:	40000c00 	.word	0x40000c00
    2b84:	00001bd1 	.word	0x00001bd1
    2b88:	00002a25 	.word	0x00002a25

00002b8c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2b8c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2b8e:	78d3      	ldrb	r3, [r2, #3]
    2b90:	2b00      	cmp	r3, #0
    2b92:	d135      	bne.n	2c00 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2b94:	7813      	ldrb	r3, [r2, #0]
    2b96:	2b80      	cmp	r3, #128	; 0x80
    2b98:	d029      	beq.n	2bee <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2b9a:	061b      	lsls	r3, r3, #24
    2b9c:	2480      	movs	r4, #128	; 0x80
    2b9e:	0264      	lsls	r4, r4, #9
    2ba0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2ba2:	7854      	ldrb	r4, [r2, #1]
    2ba4:	2502      	movs	r5, #2
    2ba6:	43ac      	bics	r4, r5
    2ba8:	d106      	bne.n	2bb8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2baa:	7894      	ldrb	r4, [r2, #2]
    2bac:	2c00      	cmp	r4, #0
    2bae:	d120      	bne.n	2bf2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2bb0:	2480      	movs	r4, #128	; 0x80
    2bb2:	02a4      	lsls	r4, r4, #10
    2bb4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2bb6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2bb8:	7854      	ldrb	r4, [r2, #1]
    2bba:	3c01      	subs	r4, #1
    2bbc:	2c01      	cmp	r4, #1
    2bbe:	d91c      	bls.n	2bfa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2bc0:	040d      	lsls	r5, r1, #16
    2bc2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2bc4:	24a0      	movs	r4, #160	; 0xa0
    2bc6:	05e4      	lsls	r4, r4, #23
    2bc8:	432c      	orrs	r4, r5
    2bca:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bcc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2bce:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2bd0:	24d0      	movs	r4, #208	; 0xd0
    2bd2:	0624      	lsls	r4, r4, #24
    2bd4:	432c      	orrs	r4, r5
    2bd6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2bd8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2bda:	78d4      	ldrb	r4, [r2, #3]
    2bdc:	2c00      	cmp	r4, #0
    2bde:	d122      	bne.n	2c26 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2be0:	035b      	lsls	r3, r3, #13
    2be2:	d51c      	bpl.n	2c1e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2be4:	7893      	ldrb	r3, [r2, #2]
    2be6:	2b01      	cmp	r3, #1
    2be8:	d01e      	beq.n	2c28 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2bea:	6141      	str	r1, [r0, #20]
    2bec:	e017      	b.n	2c1e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2bee:	2300      	movs	r3, #0
    2bf0:	e7d7      	b.n	2ba2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2bf2:	24c0      	movs	r4, #192	; 0xc0
    2bf4:	02e4      	lsls	r4, r4, #11
    2bf6:	4323      	orrs	r3, r4
    2bf8:	e7dd      	b.n	2bb6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2bfa:	4c0d      	ldr	r4, [pc, #52]	; (2c30 <_system_pinmux_config+0xa4>)
    2bfc:	4023      	ands	r3, r4
    2bfe:	e7df      	b.n	2bc0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2c00:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2c02:	040c      	lsls	r4, r1, #16
    2c04:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2c06:	23a0      	movs	r3, #160	; 0xa0
    2c08:	05db      	lsls	r3, r3, #23
    2c0a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2c0c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2c0e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2c10:	23d0      	movs	r3, #208	; 0xd0
    2c12:	061b      	lsls	r3, r3, #24
    2c14:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2c16:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2c18:	78d3      	ldrb	r3, [r2, #3]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d103      	bne.n	2c26 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2c1e:	7853      	ldrb	r3, [r2, #1]
    2c20:	3b01      	subs	r3, #1
    2c22:	2b01      	cmp	r3, #1
    2c24:	d902      	bls.n	2c2c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2c26:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2c28:	6181      	str	r1, [r0, #24]
    2c2a:	e7f8      	b.n	2c1e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2c2c:	6081      	str	r1, [r0, #8]
}
    2c2e:	e7fa      	b.n	2c26 <_system_pinmux_config+0x9a>
    2c30:	fffbffff 	.word	0xfffbffff

00002c34 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2c34:	b510      	push	{r4, lr}
    2c36:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2c38:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2c3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2c3c:	2900      	cmp	r1, #0
    2c3e:	d104      	bne.n	2c4a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2c40:	0943      	lsrs	r3, r0, #5
    2c42:	01db      	lsls	r3, r3, #7
    2c44:	4905      	ldr	r1, [pc, #20]	; (2c5c <system_pinmux_pin_set_config+0x28>)
    2c46:	468c      	mov	ip, r1
    2c48:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2c4a:	241f      	movs	r4, #31
    2c4c:	4020      	ands	r0, r4
    2c4e:	2101      	movs	r1, #1
    2c50:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2c52:	0018      	movs	r0, r3
    2c54:	4b02      	ldr	r3, [pc, #8]	; (2c60 <system_pinmux_pin_set_config+0x2c>)
    2c56:	4798      	blx	r3
}
    2c58:	bd10      	pop	{r4, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	41004400 	.word	0x41004400
    2c60:	00002b8d 	.word	0x00002b8d

00002c64 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2c64:	4770      	bx	lr
	...

00002c68 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2c68:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2c6a:	4b05      	ldr	r3, [pc, #20]	; (2c80 <system_init+0x18>)
    2c6c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2c6e:	4b05      	ldr	r3, [pc, #20]	; (2c84 <system_init+0x1c>)
    2c70:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2c72:	4b05      	ldr	r3, [pc, #20]	; (2c88 <system_init+0x20>)
    2c74:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2c76:	4b05      	ldr	r3, [pc, #20]	; (2c8c <system_init+0x24>)
    2c78:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2c7a:	4b05      	ldr	r3, [pc, #20]	; (2c90 <system_init+0x28>)
    2c7c:	4798      	blx	r3
}
    2c7e:	bd10      	pop	{r4, pc}
    2c80:	0000286d 	.word	0x0000286d
    2c84:	00001c01 	.word	0x00001c01
    2c88:	00002c65 	.word	0x00002c65
    2c8c:	00002c65 	.word	0x00002c65
    2c90:	00002c65 	.word	0x00002c65

00002c94 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2c94:	e7fe      	b.n	2c94 <Dummy_Handler>
	...

00002c98 <Reset_Handler>:
{
    2c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2c9a:	4a2a      	ldr	r2, [pc, #168]	; (2d44 <Reset_Handler+0xac>)
    2c9c:	4b2a      	ldr	r3, [pc, #168]	; (2d48 <Reset_Handler+0xb0>)
    2c9e:	429a      	cmp	r2, r3
    2ca0:	d011      	beq.n	2cc6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2ca2:	001a      	movs	r2, r3
    2ca4:	4b29      	ldr	r3, [pc, #164]	; (2d4c <Reset_Handler+0xb4>)
    2ca6:	429a      	cmp	r2, r3
    2ca8:	d20d      	bcs.n	2cc6 <Reset_Handler+0x2e>
    2caa:	4a29      	ldr	r2, [pc, #164]	; (2d50 <Reset_Handler+0xb8>)
    2cac:	3303      	adds	r3, #3
    2cae:	1a9b      	subs	r3, r3, r2
    2cb0:	089b      	lsrs	r3, r3, #2
    2cb2:	3301      	adds	r3, #1
    2cb4:	009b      	lsls	r3, r3, #2
    2cb6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2cb8:	4823      	ldr	r0, [pc, #140]	; (2d48 <Reset_Handler+0xb0>)
    2cba:	4922      	ldr	r1, [pc, #136]	; (2d44 <Reset_Handler+0xac>)
    2cbc:	588c      	ldr	r4, [r1, r2]
    2cbe:	5084      	str	r4, [r0, r2]
    2cc0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2cc2:	429a      	cmp	r2, r3
    2cc4:	d1fa      	bne.n	2cbc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2cc6:	4a23      	ldr	r2, [pc, #140]	; (2d54 <Reset_Handler+0xbc>)
    2cc8:	4b23      	ldr	r3, [pc, #140]	; (2d58 <Reset_Handler+0xc0>)
    2cca:	429a      	cmp	r2, r3
    2ccc:	d20a      	bcs.n	2ce4 <Reset_Handler+0x4c>
    2cce:	43d3      	mvns	r3, r2
    2cd0:	4921      	ldr	r1, [pc, #132]	; (2d58 <Reset_Handler+0xc0>)
    2cd2:	185b      	adds	r3, r3, r1
    2cd4:	2103      	movs	r1, #3
    2cd6:	438b      	bics	r3, r1
    2cd8:	3304      	adds	r3, #4
    2cda:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2cdc:	2100      	movs	r1, #0
    2cde:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2ce0:	4293      	cmp	r3, r2
    2ce2:	d1fc      	bne.n	2cde <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2ce4:	4a1d      	ldr	r2, [pc, #116]	; (2d5c <Reset_Handler+0xc4>)
    2ce6:	21ff      	movs	r1, #255	; 0xff
    2ce8:	4b1d      	ldr	r3, [pc, #116]	; (2d60 <Reset_Handler+0xc8>)
    2cea:	438b      	bics	r3, r1
    2cec:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2cee:	39fd      	subs	r1, #253	; 0xfd
    2cf0:	2390      	movs	r3, #144	; 0x90
    2cf2:	005b      	lsls	r3, r3, #1
    2cf4:	4a1b      	ldr	r2, [pc, #108]	; (2d64 <Reset_Handler+0xcc>)
    2cf6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2cf8:	4a1b      	ldr	r2, [pc, #108]	; (2d68 <Reset_Handler+0xd0>)
    2cfa:	78d3      	ldrb	r3, [r2, #3]
    2cfc:	2503      	movs	r5, #3
    2cfe:	43ab      	bics	r3, r5
    2d00:	2402      	movs	r4, #2
    2d02:	4323      	orrs	r3, r4
    2d04:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2d06:	78d3      	ldrb	r3, [r2, #3]
    2d08:	270c      	movs	r7, #12
    2d0a:	43bb      	bics	r3, r7
    2d0c:	2608      	movs	r6, #8
    2d0e:	4333      	orrs	r3, r6
    2d10:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2d12:	4b16      	ldr	r3, [pc, #88]	; (2d6c <Reset_Handler+0xd4>)
    2d14:	7b98      	ldrb	r0, [r3, #14]
    2d16:	2230      	movs	r2, #48	; 0x30
    2d18:	4390      	bics	r0, r2
    2d1a:	2220      	movs	r2, #32
    2d1c:	4310      	orrs	r0, r2
    2d1e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2d20:	7b99      	ldrb	r1, [r3, #14]
    2d22:	43b9      	bics	r1, r7
    2d24:	4331      	orrs	r1, r6
    2d26:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2d28:	7b9a      	ldrb	r2, [r3, #14]
    2d2a:	43aa      	bics	r2, r5
    2d2c:	4322      	orrs	r2, r4
    2d2e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2d30:	4a0f      	ldr	r2, [pc, #60]	; (2d70 <Reset_Handler+0xd8>)
    2d32:	6853      	ldr	r3, [r2, #4]
    2d34:	2180      	movs	r1, #128	; 0x80
    2d36:	430b      	orrs	r3, r1
    2d38:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2d3a:	4b0e      	ldr	r3, [pc, #56]	; (2d74 <Reset_Handler+0xdc>)
    2d3c:	4798      	blx	r3
        main();
    2d3e:	4b0e      	ldr	r3, [pc, #56]	; (2d78 <Reset_Handler+0xe0>)
    2d40:	4798      	blx	r3
    2d42:	e7fe      	b.n	2d42 <Reset_Handler+0xaa>
    2d44:	00004e24 	.word	0x00004e24
    2d48:	20000000 	.word	0x20000000
    2d4c:	200000b0 	.word	0x200000b0
    2d50:	20000004 	.word	0x20000004
    2d54:	200000b0 	.word	0x200000b0
    2d58:	20000570 	.word	0x20000570
    2d5c:	e000ed00 	.word	0xe000ed00
    2d60:	00000000 	.word	0x00000000
    2d64:	41007000 	.word	0x41007000
    2d68:	41005000 	.word	0x41005000
    2d6c:	41004800 	.word	0x41004800
    2d70:	41004000 	.word	0x41004000
    2d74:	00003689 	.word	0x00003689
    2d78:	00003475 	.word	0x00003475

00002d7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2d7c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2d7e:	4a06      	ldr	r2, [pc, #24]	; (2d98 <_sbrk+0x1c>)
    2d80:	6812      	ldr	r2, [r2, #0]
    2d82:	2a00      	cmp	r2, #0
    2d84:	d004      	beq.n	2d90 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2d86:	4a04      	ldr	r2, [pc, #16]	; (2d98 <_sbrk+0x1c>)
    2d88:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2d8a:	18c3      	adds	r3, r0, r3
    2d8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2d8e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2d90:	4902      	ldr	r1, [pc, #8]	; (2d9c <_sbrk+0x20>)
    2d92:	4a01      	ldr	r2, [pc, #4]	; (2d98 <_sbrk+0x1c>)
    2d94:	6011      	str	r1, [r2, #0]
    2d96:	e7f6      	b.n	2d86 <_sbrk+0xa>
    2d98:	2000037c 	.word	0x2000037c
    2d9c:	20002570 	.word	0x20002570

00002da0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2da0:	2001      	movs	r0, #1
    2da2:	4240      	negs	r0, r0
    2da4:	4770      	bx	lr

00002da6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2da6:	2380      	movs	r3, #128	; 0x80
    2da8:	019b      	lsls	r3, r3, #6
    2daa:	604b      	str	r3, [r1, #4]

	return 0;
}
    2dac:	2000      	movs	r0, #0
    2dae:	4770      	bx	lr

00002db0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2db0:	2001      	movs	r0, #1
    2db2:	4770      	bx	lr

00002db4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2db4:	2000      	movs	r0, #0
    2db6:	4770      	bx	lr

00002db8 <pt_gerenciaDisplay>:
/*! \brief Gerencia o conteúdo do display
 *  Coordena o que aparece no display e a interação do usuário com o mesmo.
 *  \param pt ponteiro de estrutura pt (pThread)
 */
PT_THREAD(pt_gerenciaDisplay(struct pt *pt))
{
    2db8:	b570      	push	{r4, r5, r6, lr}
    2dba:	0004      	movs	r4, r0
	static uint8_t OK_pressed;
	//Inicia a protothread.
	PT_BEGIN(pt);
    2dbc:	8803      	ldrh	r3, [r0, #0]
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d005      	beq.n	2dce <pt_gerenciaDisplay+0x16>
    2dc2:	2b84      	cmp	r3, #132	; 0x84
    2dc4:	d005      	beq.n	2dd2 <pt_gerenciaDisplay+0x1a>

	//Rerorna para da protothread.
	PT_YIELD(pt);

	//Fim da protothread.
	PT_END(pt);
    2dc6:	2300      	movs	r3, #0
    2dc8:	8003      	strh	r3, [r0, #0]
    2dca:	2003      	movs	r0, #3
}
    2dcc:	bd70      	pop	{r4, r5, r6, pc}
	PT_WAIT_UNTIL(pt, isBTN_DOWN(bt1) || isBTN_DOWN(bt2));
    2dce:	2384      	movs	r3, #132	; 0x84
    2dd0:	8003      	strh	r3, [r0, #0]
    2dd2:	201c      	movs	r0, #28
    2dd4:	4b59      	ldr	r3, [pc, #356]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2dd6:	4798      	blx	r3
    2dd8:	2800      	cmp	r0, #0
    2dda:	d017      	beq.n	2e0c <pt_gerenciaDisplay+0x54>
		if(ESTADO == PEGANDO_DADOS){
    2ddc:	4b58      	ldr	r3, [pc, #352]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2dde:	781b      	ldrb	r3, [r3, #0]
    2de0:	2b00      	cmp	r3, #0
    2de2:	d01b      	beq.n	2e1c <pt_gerenciaDisplay+0x64>
		if(ESTADO == EXECUTANDO){
    2de4:	2b01      	cmp	r3, #1
    2de6:	d047      	beq.n	2e78 <pt_gerenciaDisplay+0xc0>
		if(ESTADO == ESPERA){
    2de8:	2b03      	cmp	r3, #3
    2dea:	d065      	beq.n	2eb8 <pt_gerenciaDisplay+0x100>
		if(ESTADO == TAMPA_ABERTA){
    2dec:	2b02      	cmp	r3, #2
    2dee:	d100      	bne.n	2df2 <pt_gerenciaDisplay+0x3a>
    2df0:	e086      	b.n	2f00 <pt_gerenciaDisplay+0x148>
		if(ESTADO == FINALIZADO){
    2df2:	4b53      	ldr	r3, [pc, #332]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2df4:	781b      	ldrb	r3, [r3, #0]
    2df6:	2b04      	cmp	r3, #4
    2df8:	d100      	bne.n	2dfc <pt_gerenciaDisplay+0x44>
    2dfa:	e090      	b.n	2f1e <pt_gerenciaDisplay+0x166>
		delay_ms(500);
    2dfc:	20fa      	movs	r0, #250	; 0xfa
    2dfe:	0040      	lsls	r0, r0, #1
    2e00:	4b50      	ldr	r3, [pc, #320]	; (2f44 <pt_gerenciaDisplay+0x18c>)
    2e02:	4798      	blx	r3
	PT_YIELD(pt);
    2e04:	23cc      	movs	r3, #204	; 0xcc
    2e06:	8023      	strh	r3, [r4, #0]
    2e08:	2001      	movs	r0, #1
    2e0a:	e7df      	b.n	2dcc <pt_gerenciaDisplay+0x14>
	PT_WAIT_UNTIL(pt, isBTN_DOWN(bt1) || isBTN_DOWN(bt2));
    2e0c:	3002      	adds	r0, #2
    2e0e:	4b4b      	ldr	r3, [pc, #300]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2e10:	4798      	blx	r3
    2e12:	0003      	movs	r3, r0
    2e14:	2000      	movs	r0, #0
    2e16:	2b00      	cmp	r3, #0
    2e18:	d1e0      	bne.n	2ddc <pt_gerenciaDisplay+0x24>
    2e1a:	e7d7      	b.n	2dcc <pt_gerenciaDisplay+0x14>
			if(isBTN_DOWN(bt1)){
    2e1c:	201c      	movs	r0, #28
    2e1e:	4b47      	ldr	r3, [pc, #284]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2e20:	4798      	blx	r3
    2e22:	2800      	cmp	r0, #0
    2e24:	d11a      	bne.n	2e5c <pt_gerenciaDisplay+0xa4>
			if(isBTN_DOWN(bt2)){
    2e26:	2002      	movs	r0, #2
    2e28:	4b44      	ldr	r3, [pc, #272]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2e2a:	4798      	blx	r3
    2e2c:	2800      	cmp	r0, #0
    2e2e:	d11b      	bne.n	2e68 <pt_gerenciaDisplay+0xb0>
			if(OK_pressed == GFX_MONO_SPINCTRL_EVENT_FINISH){
    2e30:	4b45      	ldr	r3, [pc, #276]	; (2f48 <pt_gerenciaDisplay+0x190>)
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	2bfd      	cmp	r3, #253	; 0xfd
    2e36:	d1dc      	bne.n	2df2 <pt_gerenciaDisplay+0x3a>
				selecionado[OPT_OK] = OK_OPT_TRUE; OK_pressed = !GFX_MONO_SPINCTRL_EVENT_FINISH;
    2e38:	2201      	movs	r2, #1
    2e3a:	4b44      	ldr	r3, [pc, #272]	; (2f4c <pt_gerenciaDisplay+0x194>)
    2e3c:	80da      	strh	r2, [r3, #6]
    2e3e:	2200      	movs	r2, #0
    2e40:	4b41      	ldr	r3, [pc, #260]	; (2f48 <pt_gerenciaDisplay+0x190>)
    2e42:	701a      	strb	r2, [r3, #0]
				clearDisplay(); printString("EXECUTANDO:", 0, 10); printString("PAUSAR         PARAR", 0, 25);
    2e44:	4b42      	ldr	r3, [pc, #264]	; (2f50 <pt_gerenciaDisplay+0x198>)
    2e46:	4798      	blx	r3
    2e48:	220a      	movs	r2, #10
    2e4a:	2100      	movs	r1, #0
    2e4c:	4841      	ldr	r0, [pc, #260]	; (2f54 <pt_gerenciaDisplay+0x19c>)
    2e4e:	4d42      	ldr	r5, [pc, #264]	; (2f58 <pt_gerenciaDisplay+0x1a0>)
    2e50:	47a8      	blx	r5
    2e52:	2219      	movs	r2, #25
    2e54:	2100      	movs	r1, #0
    2e56:	4841      	ldr	r0, [pc, #260]	; (2f5c <pt_gerenciaDisplay+0x1a4>)
    2e58:	47a8      	blx	r5
    2e5a:	e7ca      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
				gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_DOWN, selecionado);
    2e5c:	4a3b      	ldr	r2, [pc, #236]	; (2f4c <pt_gerenciaDisplay+0x194>)
    2e5e:	2128      	movs	r1, #40	; 0x28
    2e60:	483f      	ldr	r0, [pc, #252]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2e62:	4b40      	ldr	r3, [pc, #256]	; (2f64 <pt_gerenciaDisplay+0x1ac>)
    2e64:	4798      	blx	r3
    2e66:	e7de      	b.n	2e26 <pt_gerenciaDisplay+0x6e>
				OK_pressed = gfx_mono_spinctrl_spincollection_process_key(&spinners, GFX_MONO_SPINCTRL_KEYCODE_ENTER, selecionado);
    2e68:	4a38      	ldr	r2, [pc, #224]	; (2f4c <pt_gerenciaDisplay+0x194>)
    2e6a:	210d      	movs	r1, #13
    2e6c:	483c      	ldr	r0, [pc, #240]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2e6e:	4b3d      	ldr	r3, [pc, #244]	; (2f64 <pt_gerenciaDisplay+0x1ac>)
    2e70:	4798      	blx	r3
    2e72:	4b35      	ldr	r3, [pc, #212]	; (2f48 <pt_gerenciaDisplay+0x190>)
    2e74:	7018      	strb	r0, [r3, #0]
    2e76:	e7db      	b.n	2e30 <pt_gerenciaDisplay+0x78>
			if(isBTN_DOWN(bt1)){
    2e78:	201c      	movs	r0, #28
    2e7a:	4b30      	ldr	r3, [pc, #192]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2e7c:	4798      	blx	r3
    2e7e:	2800      	cmp	r0, #0
    2e80:	d00c      	beq.n	2e9c <pt_gerenciaDisplay+0xe4>
				ESTADO = ESPERA;
    2e82:	2203      	movs	r2, #3
    2e84:	4b2e      	ldr	r3, [pc, #184]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2e86:	701a      	strb	r2, [r3, #0]
				printString("---PAUSADO---", 20, 10);
    2e88:	3207      	adds	r2, #7
    2e8a:	2114      	movs	r1, #20
    2e8c:	4836      	ldr	r0, [pc, #216]	; (2f68 <pt_gerenciaDisplay+0x1b0>)
    2e8e:	4d32      	ldr	r5, [pc, #200]	; (2f58 <pt_gerenciaDisplay+0x1a0>)
    2e90:	47a8      	blx	r5
				printString("CONTINUAR      PARAR", 0, 25);
    2e92:	2219      	movs	r2, #25
    2e94:	2100      	movs	r1, #0
    2e96:	4835      	ldr	r0, [pc, #212]	; (2f6c <pt_gerenciaDisplay+0x1b4>)
    2e98:	47a8      	blx	r5
    2e9a:	e7aa      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
			if(isBTN_DOWN(bt2)){
    2e9c:	2002      	movs	r0, #2
    2e9e:	4b27      	ldr	r3, [pc, #156]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2ea0:	4798      	blx	r3
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d0a5      	beq.n	2df2 <pt_gerenciaDisplay+0x3a>
				ESTADO = PEGANDO_DADOS;
    2ea6:	2200      	movs	r2, #0
    2ea8:	4b25      	ldr	r3, [pc, #148]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2eaa:	701a      	strb	r2, [r3, #0]
				clearDisplay(); mostraMenuDisplay(&spinners);
    2eac:	4b28      	ldr	r3, [pc, #160]	; (2f50 <pt_gerenciaDisplay+0x198>)
    2eae:	4798      	blx	r3
    2eb0:	482b      	ldr	r0, [pc, #172]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2eb2:	4b2f      	ldr	r3, [pc, #188]	; (2f70 <pt_gerenciaDisplay+0x1b8>)
    2eb4:	4798      	blx	r3
    2eb6:	e79c      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
			if(isBTN_DOWN(bt1)){
    2eb8:	201c      	movs	r0, #28
    2eba:	4b20      	ldr	r3, [pc, #128]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2ebc:	4798      	blx	r3
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d010      	beq.n	2ee4 <pt_gerenciaDisplay+0x12c>
				ESTADO = EXECUTANDO;
    2ec2:	2201      	movs	r2, #1
    2ec4:	4b1e      	ldr	r3, [pc, #120]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2ec6:	701a      	strb	r2, [r3, #0]
				printString("EXECUTANDO:", 0, 10);
    2ec8:	3209      	adds	r2, #9
    2eca:	2100      	movs	r1, #0
    2ecc:	4821      	ldr	r0, [pc, #132]	; (2f54 <pt_gerenciaDisplay+0x19c>)
    2ece:	4d22      	ldr	r5, [pc, #136]	; (2f58 <pt_gerenciaDisplay+0x1a0>)
    2ed0:	47a8      	blx	r5
				printExecutionSate(EXECUTION);
    2ed2:	4b28      	ldr	r3, [pc, #160]	; (2f74 <pt_gerenciaDisplay+0x1bc>)
    2ed4:	7818      	ldrb	r0, [r3, #0]
    2ed6:	4b28      	ldr	r3, [pc, #160]	; (2f78 <pt_gerenciaDisplay+0x1c0>)
    2ed8:	4798      	blx	r3
				printString("PAUSAR         PARAR", 0, 25);
    2eda:	2219      	movs	r2, #25
    2edc:	2100      	movs	r1, #0
    2ede:	481f      	ldr	r0, [pc, #124]	; (2f5c <pt_gerenciaDisplay+0x1a4>)
    2ee0:	47a8      	blx	r5
    2ee2:	e786      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
			if(isBTN_DOWN(bt2)){
    2ee4:	2002      	movs	r0, #2
    2ee6:	4b15      	ldr	r3, [pc, #84]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2ee8:	4798      	blx	r3
    2eea:	2800      	cmp	r0, #0
    2eec:	d081      	beq.n	2df2 <pt_gerenciaDisplay+0x3a>
				ESTADO = PEGANDO_DADOS;
    2eee:	2200      	movs	r2, #0
    2ef0:	4b13      	ldr	r3, [pc, #76]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2ef2:	701a      	strb	r2, [r3, #0]
				clearDisplay(); mostraMenuDisplay(&spinners);
    2ef4:	4b16      	ldr	r3, [pc, #88]	; (2f50 <pt_gerenciaDisplay+0x198>)
    2ef6:	4798      	blx	r3
    2ef8:	4819      	ldr	r0, [pc, #100]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2efa:	4b1d      	ldr	r3, [pc, #116]	; (2f70 <pt_gerenciaDisplay+0x1b8>)
    2efc:	4798      	blx	r3
    2efe:	e778      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
			if(isBTN_DOWN(bt2)){
    2f00:	2002      	movs	r0, #2
    2f02:	4b0e      	ldr	r3, [pc, #56]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2f04:	4798      	blx	r3
    2f06:	2800      	cmp	r0, #0
    2f08:	d100      	bne.n	2f0c <pt_gerenciaDisplay+0x154>
    2f0a:	e772      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
				ESTADO = PEGANDO_DADOS;
    2f0c:	2200      	movs	r2, #0
    2f0e:	4b0c      	ldr	r3, [pc, #48]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2f10:	701a      	strb	r2, [r3, #0]
				clearDisplay(); mostraMenuDisplay(&spinners);
    2f12:	4b0f      	ldr	r3, [pc, #60]	; (2f50 <pt_gerenciaDisplay+0x198>)
    2f14:	4798      	blx	r3
    2f16:	4812      	ldr	r0, [pc, #72]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2f18:	4b15      	ldr	r3, [pc, #84]	; (2f70 <pt_gerenciaDisplay+0x1b8>)
    2f1a:	4798      	blx	r3
    2f1c:	e769      	b.n	2df2 <pt_gerenciaDisplay+0x3a>
			if(isBTN_DOWN(bt2)){
    2f1e:	2002      	movs	r0, #2
    2f20:	4b06      	ldr	r3, [pc, #24]	; (2f3c <pt_gerenciaDisplay+0x184>)
    2f22:	4798      	blx	r3
    2f24:	2800      	cmp	r0, #0
    2f26:	d100      	bne.n	2f2a <pt_gerenciaDisplay+0x172>
    2f28:	e768      	b.n	2dfc <pt_gerenciaDisplay+0x44>
				ESTADO = PEGANDO_DADOS;
    2f2a:	2200      	movs	r2, #0
    2f2c:	4b04      	ldr	r3, [pc, #16]	; (2f40 <pt_gerenciaDisplay+0x188>)
    2f2e:	701a      	strb	r2, [r3, #0]
				clearDisplay(); mostraMenuDisplay(&spinners);
    2f30:	4b07      	ldr	r3, [pc, #28]	; (2f50 <pt_gerenciaDisplay+0x198>)
    2f32:	4798      	blx	r3
    2f34:	480a      	ldr	r0, [pc, #40]	; (2f60 <pt_gerenciaDisplay+0x1a8>)
    2f36:	4b0e      	ldr	r3, [pc, #56]	; (2f70 <pt_gerenciaDisplay+0x1b8>)
    2f38:	4798      	blx	r3
    2f3a:	e75f      	b.n	2dfc <pt_gerenciaDisplay+0x44>
    2f3c:	00000fb5 	.word	0x00000fb5
    2f40:	20000380 	.word	0x20000380
    2f44:	00000401 	.word	0x00000401
    2f48:	20000388 	.word	0x20000388
    2f4c:	20000554 	.word	0x20000554
    2f50:	00000d81 	.word	0x00000d81
    2f54:	00004cf4 	.word	0x00004cf4
    2f58:	00000da9 	.word	0x00000da9
    2f5c:	00004d00 	.word	0x00004d00
    2f60:	2000055c 	.word	0x2000055c
    2f64:	00001719 	.word	0x00001719
    2f68:	00004d18 	.word	0x00004d18
    2f6c:	00004d28 	.word	0x00004d28
    2f70:	00000d75 	.word	0x00000d75
    2f74:	20000049 	.word	0x20000049
    2f78:	00000de9 	.word	0x00000de9

00002f7c <pt_pegaDados>:
/*! \brief Armazena os dados selecionados pelo usuário
 *  Captura e armazena os dados que o usuário selecionou na tela.
 *  \param pt ponteiro de estrutura pt (pThread)
 */
PT_THREAD(pt_pegaDados(struct pt *pt))
{
    2f7c:	b570      	push	{r4, r5, r6, lr}
    2f7e:	0004      	movs	r4, r0
	//Inicia a protothread.
	PT_BEGIN(pt);
    2f80:	8803      	ldrh	r3, [r0, #0]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d004      	beq.n	2f90 <pt_pegaDados+0x14>
    2f86:	2214      	movs	r2, #20
    2f88:	32ff      	adds	r2, #255	; 0xff
    2f8a:	4293      	cmp	r3, r2
    2f8c:	d000      	beq.n	2f90 <pt_pegaDados+0x14>
    2f8e:	e082      	b.n	3096 <pt_pegaDados+0x11a>

	//Sempre pegar os dados e os processa.
	while(1){

		if(ESTADO == PEGANDO_DADOS){
    2f90:	4b45      	ldr	r3, [pc, #276]	; (30a8 <pt_pegaDados+0x12c>)
    2f92:	781b      	ldrb	r3, [r3, #0]
    2f94:	2b00      	cmp	r3, #0
    2f96:	d149      	bne.n	302c <pt_pegaDados+0xb0>
			//Pega as opcoes do display.
			MODO       = (MODE_t ) selecionado[OPT_MODO];
    2f98:	4944      	ldr	r1, [pc, #272]	; (30ac <pt_pegaDados+0x130>)
    2f9a:	8808      	ldrh	r0, [r1, #0]
    2f9c:	4a44      	ldr	r2, [pc, #272]	; (30b0 <pt_pegaDados+0x134>)
    2f9e:	7010      	strb	r0, [r2, #0]
			NIVEL_AGUA = (NIVEL_t) selecionado[OPT_AGUA];
    2fa0:	2002      	movs	r0, #2
    2fa2:	5e0a      	ldrsh	r2, [r1, r0]
			SECAR      = (SECA_t ) selecionado[OPT_SECAR];
    2fa4:	8888      	ldrh	r0, [r1, #4]
    2fa6:	4943      	ldr	r1, [pc, #268]	; (30b4 <pt_pegaDados+0x138>)
    2fa8:	7008      	strb	r0, [r1, #0]

			//Ajusta o nivel, pois ele deve ser um valor.
			switch( (spinner_agua_t) NIVEL_AGUA){
    2faa:	b2d1      	uxtb	r1, r2
    2fac:	2901      	cmp	r1, #1
    2fae:	d028      	beq.n	3002 <pt_pegaDados+0x86>
    2fb0:	2900      	cmp	r1, #0
    2fb2:	d005      	beq.n	2fc0 <pt_pegaDados+0x44>
    2fb4:	2902      	cmp	r1, #2
    2fb6:	d029      	beq.n	300c <pt_pegaDados+0x90>
				case  AGUA_OPT_BAIXO: NIVEL_AGUA = BAIXO; break;
				case  AGUA_OPT_MEDIO: NIVEL_AGUA = MEDIO; break;
				case  AGUA_OPT_ALTO : NIVEL_AGUA = ALTO; break;
				default             : NIVEL_AGUA = SENSOR_NIVEL_FULL; break;
    2fb8:	493f      	ldr	r1, [pc, #252]	; (30b8 <pt_pegaDados+0x13c>)
    2fba:	4a40      	ldr	r2, [pc, #256]	; (30bc <pt_pegaDados+0x140>)
    2fbc:	8011      	strh	r1, [r2, #0]
    2fbe:	e003      	b.n	2fc8 <pt_pegaDados+0x4c>
				case  AGUA_OPT_BAIXO: NIVEL_AGUA = BAIXO; break;
    2fc0:	21c8      	movs	r1, #200	; 0xc8
    2fc2:	0049      	lsls	r1, r1, #1
    2fc4:	4a3d      	ldr	r2, [pc, #244]	; (30bc <pt_pegaDados+0x140>)
    2fc6:	8011      	strh	r1, [r2, #0]
			}

			//Pega o OK.
			if(selecionado[OPT_OK] == OK_OPT_TRUE){
    2fc8:	4a38      	ldr	r2, [pc, #224]	; (30ac <pt_pegaDados+0x130>)
    2fca:	2106      	movs	r1, #6
    2fcc:	5e52      	ldrsh	r2, [r2, r1]
    2fce:	2a01      	cmp	r2, #1
    2fd0:	d021      	beq.n	3016 <pt_pegaDados+0x9a>
    2fd2:	2180      	movs	r1, #128	; 0x80
    2fd4:	0149      	lsls	r1, r1, #5
    2fd6:	4a3a      	ldr	r2, [pc, #232]	; (30c0 <pt_pegaDados+0x144>)
    2fd8:	6191      	str	r1, [r2, #24]
    2fda:	2180      	movs	r1, #128	; 0x80
    2fdc:	0209      	lsls	r1, r1, #8
    2fde:	4a38      	ldr	r2, [pc, #224]	; (30c0 <pt_pegaDados+0x144>)
    2fe0:	6191      	str	r1, [r2, #24]
			LED_Off(l3);
		}

		//Pegar se a tampa esta aberta.
		//CHANGED: Removido o negado do btn
		if(ESTADO == EXECUTANDO && isBTN_UP(bt_tampa) ){
    2fe2:	2b01      	cmp	r3, #1
    2fe4:	d02f      	beq.n	3046 <pt_pegaDados+0xca>
			ESTADO = TAMPA_ABERTA;
			printString("---TAMPA ABERTA---", 10, 10);
			printString("------         PARAR", 0, 25);
		}

		if(ESTADO == TAMPA_ABERTA && isBTN_DOWN(bt_tampa)){
    2fe6:	4b30      	ldr	r3, [pc, #192]	; (30a8 <pt_pegaDados+0x12c>)
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	2b02      	cmp	r3, #2
    2fec:	d03d      	beq.n	306a <pt_pegaDados+0xee>
			printExecutionSate(EXECUTION);
			printString("PAUSAR         PARAR", 0, 25);
		}

		//Pega o nivel de agua do ADC.
		NIVEL_SENSOR = valorAtualSensor(POTENTIOMETER);
    2fee:	2020      	movs	r0, #32
    2ff0:	4b34      	ldr	r3, [pc, #208]	; (30c4 <pt_pegaDados+0x148>)
    2ff2:	4798      	blx	r3
    2ff4:	4b34      	ldr	r3, [pc, #208]	; (30c8 <pt_pegaDados+0x14c>)
    2ff6:	6018      	str	r0, [r3, #0]

		//Rerorna para da protothread.
		PT_YIELD(pt);
    2ff8:	2314      	movs	r3, #20
    2ffa:	33ff      	adds	r3, #255	; 0xff
    2ffc:	8023      	strh	r3, [r4, #0]
    2ffe:	2001      	movs	r0, #1
	}
	//Fim da protothread.
	PT_END(pt);
}
    3000:	bd70      	pop	{r4, r5, r6, pc}
				case  AGUA_OPT_MEDIO: NIVEL_AGUA = MEDIO; break;
    3002:	21af      	movs	r1, #175	; 0xaf
    3004:	0089      	lsls	r1, r1, #2
    3006:	4a2d      	ldr	r2, [pc, #180]	; (30bc <pt_pegaDados+0x140>)
    3008:	8011      	strh	r1, [r2, #0]
    300a:	e7dd      	b.n	2fc8 <pt_pegaDados+0x4c>
				case  AGUA_OPT_ALTO : NIVEL_AGUA = ALTO; break;
    300c:	21fa      	movs	r1, #250	; 0xfa
    300e:	0089      	lsls	r1, r1, #2
    3010:	4a2a      	ldr	r2, [pc, #168]	; (30bc <pt_pegaDados+0x140>)
    3012:	8011      	strh	r1, [r2, #0]
    3014:	e7d8      	b.n	2fc8 <pt_pegaDados+0x4c>
				ESTADO = EXECUTANDO;
    3016:	4b24      	ldr	r3, [pc, #144]	; (30a8 <pt_pegaDados+0x12c>)
    3018:	701a      	strb	r2, [r3, #0]
				selecionado[OPT_OK] = OK_OPT_FALSE;
    301a:	2200      	movs	r2, #0
    301c:	4b23      	ldr	r3, [pc, #140]	; (30ac <pt_pegaDados+0x130>)
    301e:	80da      	strh	r2, [r3, #6]
		if(ESTADO == EXECUTANDO){
    3020:	2301      	movs	r3, #1
		port_base->OUTCLR.reg = pin_mask;
    3022:	2180      	movs	r1, #128	; 0x80
    3024:	0149      	lsls	r1, r1, #5
    3026:	4a26      	ldr	r2, [pc, #152]	; (30c0 <pt_pegaDados+0x144>)
    3028:	6151      	str	r1, [r2, #20]
    302a:	e7d6      	b.n	2fda <pt_pegaDados+0x5e>
    302c:	2b01      	cmp	r3, #1
    302e:	d0f8      	beq.n	3022 <pt_pegaDados+0xa6>
		port_base->OUTSET.reg = pin_mask;
    3030:	2180      	movs	r1, #128	; 0x80
    3032:	0149      	lsls	r1, r1, #5
    3034:	4a22      	ldr	r2, [pc, #136]	; (30c0 <pt_pegaDados+0x144>)
    3036:	6191      	str	r1, [r2, #24]
		if(ESTADO == FINALIZADO){
    3038:	2b04      	cmp	r3, #4
    303a:	d130      	bne.n	309e <pt_pegaDados+0x122>
		port_base->OUTCLR.reg = pin_mask;
    303c:	2280      	movs	r2, #128	; 0x80
    303e:	0212      	lsls	r2, r2, #8
    3040:	4b1f      	ldr	r3, [pc, #124]	; (30c0 <pt_pegaDados+0x144>)
    3042:	615a      	str	r2, [r3, #20]
    3044:	e7cf      	b.n	2fe6 <pt_pegaDados+0x6a>
		if(ESTADO == EXECUTANDO && isBTN_UP(bt_tampa) ){
    3046:	2026      	movs	r0, #38	; 0x26
    3048:	4b20      	ldr	r3, [pc, #128]	; (30cc <pt_pegaDados+0x150>)
    304a:	4798      	blx	r3
    304c:	2800      	cmp	r0, #0
    304e:	d0ca      	beq.n	2fe6 <pt_pegaDados+0x6a>
			ESTADO = TAMPA_ABERTA;
    3050:	2202      	movs	r2, #2
    3052:	4b15      	ldr	r3, [pc, #84]	; (30a8 <pt_pegaDados+0x12c>)
    3054:	701a      	strb	r2, [r3, #0]
			printString("---TAMPA ABERTA---", 10, 10);
    3056:	3208      	adds	r2, #8
    3058:	210a      	movs	r1, #10
    305a:	481d      	ldr	r0, [pc, #116]	; (30d0 <pt_pegaDados+0x154>)
    305c:	4d1d      	ldr	r5, [pc, #116]	; (30d4 <pt_pegaDados+0x158>)
    305e:	47a8      	blx	r5
			printString("------         PARAR", 0, 25);
    3060:	2219      	movs	r2, #25
    3062:	2100      	movs	r1, #0
    3064:	481c      	ldr	r0, [pc, #112]	; (30d8 <pt_pegaDados+0x15c>)
    3066:	47a8      	blx	r5
    3068:	e7bd      	b.n	2fe6 <pt_pegaDados+0x6a>
		if(ESTADO == TAMPA_ABERTA && isBTN_DOWN(bt_tampa)){
    306a:	2026      	movs	r0, #38	; 0x26
    306c:	4b1b      	ldr	r3, [pc, #108]	; (30dc <pt_pegaDados+0x160>)
    306e:	4798      	blx	r3
    3070:	2800      	cmp	r0, #0
    3072:	d0bc      	beq.n	2fee <pt_pegaDados+0x72>
			ESTADO = EXECUTANDO;
    3074:	2201      	movs	r2, #1
    3076:	4b0c      	ldr	r3, [pc, #48]	; (30a8 <pt_pegaDados+0x12c>)
    3078:	701a      	strb	r2, [r3, #0]
			printString("EXECUTANDO:", 0, 10);
    307a:	3209      	adds	r2, #9
    307c:	2100      	movs	r1, #0
    307e:	4818      	ldr	r0, [pc, #96]	; (30e0 <pt_pegaDados+0x164>)
    3080:	4d14      	ldr	r5, [pc, #80]	; (30d4 <pt_pegaDados+0x158>)
    3082:	47a8      	blx	r5
			printExecutionSate(EXECUTION);
    3084:	4b17      	ldr	r3, [pc, #92]	; (30e4 <pt_pegaDados+0x168>)
    3086:	7818      	ldrb	r0, [r3, #0]
    3088:	4b17      	ldr	r3, [pc, #92]	; (30e8 <pt_pegaDados+0x16c>)
    308a:	4798      	blx	r3
			printString("PAUSAR         PARAR", 0, 25);
    308c:	2219      	movs	r2, #25
    308e:	2100      	movs	r1, #0
    3090:	4816      	ldr	r0, [pc, #88]	; (30ec <pt_pegaDados+0x170>)
    3092:	47a8      	blx	r5
    3094:	e7ab      	b.n	2fee <pt_pegaDados+0x72>
	PT_END(pt);
    3096:	2300      	movs	r3, #0
    3098:	8003      	strh	r3, [r0, #0]
    309a:	2003      	movs	r0, #3
    309c:	e7b0      	b.n	3000 <pt_pegaDados+0x84>
		port_base->OUTSET.reg = pin_mask;
    309e:	2280      	movs	r2, #128	; 0x80
    30a0:	0212      	lsls	r2, r2, #8
    30a2:	4b07      	ldr	r3, [pc, #28]	; (30c0 <pt_pegaDados+0x144>)
    30a4:	619a      	str	r2, [r3, #24]
    30a6:	e79e      	b.n	2fe6 <pt_pegaDados+0x6a>
    30a8:	20000380 	.word	0x20000380
    30ac:	20000554 	.word	0x20000554
    30b0:	20000381 	.word	0x20000381
    30b4:	2000038a 	.word	0x2000038a
    30b8:	000003ea 	.word	0x000003ea
    30bc:	2000004a 	.word	0x2000004a
    30c0:	41004400 	.word	0x41004400
    30c4:	00000119 	.word	0x00000119
    30c8:	20000384 	.word	0x20000384
    30cc:	00000f8d 	.word	0x00000f8d
    30d0:	00004d40 	.word	0x00004d40
    30d4:	00000da9 	.word	0x00000da9
    30d8:	00004d54 	.word	0x00004d54
    30dc:	00000fb5 	.word	0x00000fb5
    30e0:	00004cf4 	.word	0x00004cf4
    30e4:	20000049 	.word	0x20000049
    30e8:	00000de9 	.word	0x00000de9
    30ec:	00004d00 	.word	0x00004d00

000030f0 <pt_contorlaExecution>:
 *  Controla os estados de execução do sistema em funcionamento. Por exemplo:
 *  Encher, bater,  centrifugar, ...
 *  \param pt ponteiro de estrutura pt (pThread)
 */
PT_THREAD(pt_contorlaExecution(struct pt *pt))
{
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	0004      	movs	r4, r0
	static int time;
	static EXECUTANDO_t Prev_State = PEGANDO_DADOS;

	//Inicia a protothread.
	PT_BEGIN(pt);
    30f4:	8803      	ldrh	r3, [r0, #0]
    30f6:	2b00      	cmp	r3, #0
    30f8:	d004      	beq.n	3104 <pt_contorlaExecution+0x14>
    30fa:	22c7      	movs	r2, #199	; 0xc7
    30fc:	0052      	lsls	r2, r2, #1
    30fe:	4293      	cmp	r3, r2
    3100:	d000      	beq.n	3104 <pt_contorlaExecution+0x14>
    3102:	e11d      	b.n	3340 <pt_contorlaExecution+0x250>
		//Modo de execucao.
		//Enxe->Bate->Esvazia->Enxe->Molho->Esvazia->Enxee->Encagua->Esvazia->Centrifufa->Seca.
		//REVIEW: Modificar a sequencia para encher, bater, molho, bater, esvaziar, encher, molho, esvaziar, enxaguar, centrifugar, secar

		//Se tiver executando faz algo, senao  nao tem execucao para controlar.
		if(ESTADO == EXECUTANDO){
    3104:	4b90      	ldr	r3, [pc, #576]	; (3348 <pt_contorlaExecution+0x258>)
    3106:	781b      	ldrb	r3, [r3, #0]
    3108:	2b01      	cmp	r3, #1
    310a:	d009      	beq.n	3120 <pt_contorlaExecution+0x30>
			time++;

		}else

		//Se o estado estiver parado, tem que resetar a execucao.
		if(ESTADO == PEGANDO_DADOS){
    310c:	2b00      	cmp	r3, #0
    310e:	d102      	bne.n	3116 <pt_contorlaExecution+0x26>
			EXECUTION = FAZENDO_NADA;
    3110:	2207      	movs	r2, #7
    3112:	4b8e      	ldr	r3, [pc, #568]	; (334c <pt_contorlaExecution+0x25c>)
    3114:	701a      	strb	r2, [r3, #0]
		}
		//Retorna para da protothread.
		PT_YIELD(pt);
    3116:	23c7      	movs	r3, #199	; 0xc7
    3118:	005b      	lsls	r3, r3, #1
    311a:	8023      	strh	r3, [r4, #0]
    311c:	2001      	movs	r0, #1
	}
	//Fim da protothread.
	PT_END(pt);
}
    311e:	bd70      	pop	{r4, r5, r6, pc}
			switch(EXECUTION){
    3120:	4b8a      	ldr	r3, [pc, #552]	; (334c <pt_contorlaExecution+0x25c>)
    3122:	781a      	ldrb	r2, [r3, #0]
    3124:	2a07      	cmp	r2, #7
    3126:	d900      	bls.n	312a <pt_contorlaExecution+0x3a>
    3128:	e104      	b.n	3334 <pt_contorlaExecution+0x244>
    312a:	0093      	lsls	r3, r2, #2
    312c:	4a88      	ldr	r2, [pc, #544]	; (3350 <pt_contorlaExecution+0x260>)
    312e:	58d3      	ldr	r3, [r2, r3]
    3130:	469f      	mov	pc, r3
					time = 0; EXECUTION = ENCHER; Prev_State = FAZENDO_NADA; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    3132:	2300      	movs	r3, #0
    3134:	4a87      	ldr	r2, [pc, #540]	; (3354 <pt_contorlaExecution+0x264>)
    3136:	6013      	str	r3, [r2, #0]
    3138:	4a84      	ldr	r2, [pc, #528]	; (334c <pt_contorlaExecution+0x25c>)
    313a:	7013      	strb	r3, [r2, #0]
    313c:	2207      	movs	r2, #7
    313e:	4b86      	ldr	r3, [pc, #536]	; (3358 <pt_contorlaExecution+0x268>)
    3140:	701a      	strb	r2, [r3, #0]
    3142:	2000      	movs	r0, #0
    3144:	4b85      	ldr	r3, [pc, #532]	; (335c <pt_contorlaExecution+0x26c>)
    3146:	4798      	blx	r3
			time++;
    3148:	4a82      	ldr	r2, [pc, #520]	; (3354 <pt_contorlaExecution+0x264>)
    314a:	6813      	ldr	r3, [r2, #0]
    314c:	3301      	adds	r3, #1
    314e:	6013      	str	r3, [r2, #0]
    3150:	e7e1      	b.n	3116 <pt_contorlaExecution+0x26>
					if(NIVEL_SENSOR >= NIVEL_AGUA){
    3152:	4b83      	ldr	r3, [pc, #524]	; (3360 <pt_contorlaExecution+0x270>)
    3154:	881a      	ldrh	r2, [r3, #0]
    3156:	4b83      	ldr	r3, [pc, #524]	; (3364 <pt_contorlaExecution+0x274>)
    3158:	681b      	ldr	r3, [r3, #0]
    315a:	429a      	cmp	r2, r3
    315c:	dcf4      	bgt.n	3148 <pt_contorlaExecution+0x58>
						if(Prev_State == FAZENDO_NADA){
    315e:	4b7e      	ldr	r3, [pc, #504]	; (3358 <pt_contorlaExecution+0x268>)
    3160:	781b      	ldrb	r3, [r3, #0]
    3162:	2b07      	cmp	r3, #7
    3164:	d007      	beq.n	3176 <pt_contorlaExecution+0x86>
						if(Prev_State == BATER){
    3166:	2b02      	cmp	r3, #2
    3168:	d00d      	beq.n	3186 <pt_contorlaExecution+0x96>
						if(Prev_State == MOLHO){
    316a:	2b03      	cmp	r3, #3
    316c:	d013      	beq.n	3196 <pt_contorlaExecution+0xa6>
						time = 0;  //Zera o timer.
    316e:	2200      	movs	r2, #0
    3170:	4b78      	ldr	r3, [pc, #480]	; (3354 <pt_contorlaExecution+0x264>)
    3172:	601a      	str	r2, [r3, #0]
    3174:	e7e8      	b.n	3148 <pt_contorlaExecution+0x58>
							EXECUTION = BATER; Prev_State = BATER; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    3176:	2002      	movs	r0, #2
    3178:	4b74      	ldr	r3, [pc, #464]	; (334c <pt_contorlaExecution+0x25c>)
    317a:	7018      	strb	r0, [r3, #0]
    317c:	4b76      	ldr	r3, [pc, #472]	; (3358 <pt_contorlaExecution+0x268>)
    317e:	7018      	strb	r0, [r3, #0]
    3180:	4b76      	ldr	r3, [pc, #472]	; (335c <pt_contorlaExecution+0x26c>)
    3182:	4798      	blx	r3
    3184:	e7f3      	b.n	316e <pt_contorlaExecution+0x7e>
							EXECUTION = MOLHO; Prev_State = MOLHO; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    3186:	2003      	movs	r0, #3
    3188:	4b70      	ldr	r3, [pc, #448]	; (334c <pt_contorlaExecution+0x25c>)
    318a:	7018      	strb	r0, [r3, #0]
    318c:	4b72      	ldr	r3, [pc, #456]	; (3358 <pt_contorlaExecution+0x268>)
    318e:	7018      	strb	r0, [r3, #0]
    3190:	4b72      	ldr	r3, [pc, #456]	; (335c <pt_contorlaExecution+0x26c>)
    3192:	4798      	blx	r3
    3194:	e7eb      	b.n	316e <pt_contorlaExecution+0x7e>
							EXECUTION = ENXAGUAR; Prev_State = ENXAGUAR; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    3196:	2004      	movs	r0, #4
    3198:	4b6c      	ldr	r3, [pc, #432]	; (334c <pt_contorlaExecution+0x25c>)
    319a:	7018      	strb	r0, [r3, #0]
    319c:	4b6e      	ldr	r3, [pc, #440]	; (3358 <pt_contorlaExecution+0x268>)
    319e:	7018      	strb	r0, [r3, #0]
    31a0:	4b6e      	ldr	r3, [pc, #440]	; (335c <pt_contorlaExecution+0x26c>)
    31a2:	4798      	blx	r3
    31a4:	e7e3      	b.n	316e <pt_contorlaExecution+0x7e>
					if(NIVEL_SENSOR <= SENSOR_NIVEL_ZERO){
    31a6:	4b6f      	ldr	r3, [pc, #444]	; (3364 <pt_contorlaExecution+0x274>)
    31a8:	681b      	ldr	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	dccc      	bgt.n	3148 <pt_contorlaExecution+0x58>
						if(Prev_State == BATER || Prev_State == MOLHO){
    31ae:	4b6a      	ldr	r3, [pc, #424]	; (3358 <pt_contorlaExecution+0x268>)
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	1e9a      	subs	r2, r3, #2
    31b4:	2a01      	cmp	r2, #1
    31b6:	d905      	bls.n	31c4 <pt_contorlaExecution+0xd4>
						if(Prev_State == ENXAGUAR){
    31b8:	2b04      	cmp	r3, #4
    31ba:	d009      	beq.n	31d0 <pt_contorlaExecution+0xe0>
						time = 0;  //Zera o timer.
    31bc:	2200      	movs	r2, #0
    31be:	4b65      	ldr	r3, [pc, #404]	; (3354 <pt_contorlaExecution+0x264>)
    31c0:	601a      	str	r2, [r3, #0]
    31c2:	e7c1      	b.n	3148 <pt_contorlaExecution+0x58>
							EXECUTION = ENCHER; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    31c4:	2000      	movs	r0, #0
    31c6:	4b61      	ldr	r3, [pc, #388]	; (334c <pt_contorlaExecution+0x25c>)
    31c8:	7018      	strb	r0, [r3, #0]
    31ca:	4b64      	ldr	r3, [pc, #400]	; (335c <pt_contorlaExecution+0x26c>)
    31cc:	4798      	blx	r3
    31ce:	e7f5      	b.n	31bc <pt_contorlaExecution+0xcc>
							EXECUTION = CENTRIFUGAR; Prev_State = FAZENDO_NADA;printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    31d0:	2005      	movs	r0, #5
    31d2:	4b5e      	ldr	r3, [pc, #376]	; (334c <pt_contorlaExecution+0x25c>)
    31d4:	7018      	strb	r0, [r3, #0]
    31d6:	2207      	movs	r2, #7
    31d8:	4b5f      	ldr	r3, [pc, #380]	; (3358 <pt_contorlaExecution+0x268>)
    31da:	701a      	strb	r2, [r3, #0]
    31dc:	4b5f      	ldr	r3, [pc, #380]	; (335c <pt_contorlaExecution+0x26c>)
    31de:	4798      	blx	r3
    31e0:	e7ec      	b.n	31bc <pt_contorlaExecution+0xcc>
					if((time > TIME_BATER && MODO == RAPIDO) || (time > 2*TIME_BATER && MODO == NORMAL) || (time > 3*TIME_BATER && MODO == PESADO)){
    31e2:	4b5c      	ldr	r3, [pc, #368]	; (3354 <pt_contorlaExecution+0x264>)
    31e4:	681b      	ldr	r3, [r3, #0]
    31e6:	4a60      	ldr	r2, [pc, #384]	; (3368 <pt_contorlaExecution+0x278>)
    31e8:	4293      	cmp	r3, r2
    31ea:	dd03      	ble.n	31f4 <pt_contorlaExecution+0x104>
    31ec:	4a5f      	ldr	r2, [pc, #380]	; (336c <pt_contorlaExecution+0x27c>)
    31ee:	7812      	ldrb	r2, [r2, #0]
    31f0:	2a01      	cmp	r2, #1
    31f2:	d00d      	beq.n	3210 <pt_contorlaExecution+0x120>
    31f4:	4a5e      	ldr	r2, [pc, #376]	; (3370 <pt_contorlaExecution+0x280>)
    31f6:	4293      	cmp	r3, r2
    31f8:	dd03      	ble.n	3202 <pt_contorlaExecution+0x112>
    31fa:	4a5c      	ldr	r2, [pc, #368]	; (336c <pt_contorlaExecution+0x27c>)
    31fc:	7812      	ldrb	r2, [r2, #0]
    31fe:	2a00      	cmp	r2, #0
    3200:	d006      	beq.n	3210 <pt_contorlaExecution+0x120>
    3202:	4a5c      	ldr	r2, [pc, #368]	; (3374 <pt_contorlaExecution+0x284>)
    3204:	4293      	cmp	r3, r2
    3206:	dd9f      	ble.n	3148 <pt_contorlaExecution+0x58>
    3208:	4b58      	ldr	r3, [pc, #352]	; (336c <pt_contorlaExecution+0x27c>)
    320a:	781b      	ldrb	r3, [r3, #0]
    320c:	2b02      	cmp	r3, #2
    320e:	d19b      	bne.n	3148 <pt_contorlaExecution+0x58>
						EXECUTION = ESVAZIAR; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    3210:	2201      	movs	r2, #1
    3212:	4b4e      	ldr	r3, [pc, #312]	; (334c <pt_contorlaExecution+0x25c>)
    3214:	701a      	strb	r2, [r3, #0]
    3216:	2001      	movs	r0, #1
    3218:	4b50      	ldr	r3, [pc, #320]	; (335c <pt_contorlaExecution+0x26c>)
    321a:	4798      	blx	r3
    321c:	e794      	b.n	3148 <pt_contorlaExecution+0x58>
					if((time > TIME_MOLHO && MODO == RAPIDO) || (time > 2*TIME_MOLHO && MODO == NORMAL) || (time > 3*TIME_MOLHO && MODO == PESADO)){
    321e:	4b4d      	ldr	r3, [pc, #308]	; (3354 <pt_contorlaExecution+0x264>)
    3220:	681b      	ldr	r3, [r3, #0]
    3222:	4a51      	ldr	r2, [pc, #324]	; (3368 <pt_contorlaExecution+0x278>)
    3224:	4293      	cmp	r3, r2
    3226:	dd03      	ble.n	3230 <pt_contorlaExecution+0x140>
    3228:	4a50      	ldr	r2, [pc, #320]	; (336c <pt_contorlaExecution+0x27c>)
    322a:	7812      	ldrb	r2, [r2, #0]
    322c:	2a01      	cmp	r2, #1
    322e:	d00e      	beq.n	324e <pt_contorlaExecution+0x15e>
    3230:	4a4f      	ldr	r2, [pc, #316]	; (3370 <pt_contorlaExecution+0x280>)
    3232:	4293      	cmp	r3, r2
    3234:	dd03      	ble.n	323e <pt_contorlaExecution+0x14e>
    3236:	4a4d      	ldr	r2, [pc, #308]	; (336c <pt_contorlaExecution+0x27c>)
    3238:	7812      	ldrb	r2, [r2, #0]
    323a:	2a00      	cmp	r2, #0
    323c:	d007      	beq.n	324e <pt_contorlaExecution+0x15e>
    323e:	4a4d      	ldr	r2, [pc, #308]	; (3374 <pt_contorlaExecution+0x284>)
    3240:	4293      	cmp	r3, r2
    3242:	dd81      	ble.n	3148 <pt_contorlaExecution+0x58>
    3244:	4b49      	ldr	r3, [pc, #292]	; (336c <pt_contorlaExecution+0x27c>)
    3246:	781b      	ldrb	r3, [r3, #0]
    3248:	2b02      	cmp	r3, #2
    324a:	d000      	beq.n	324e <pt_contorlaExecution+0x15e>
    324c:	e77c      	b.n	3148 <pt_contorlaExecution+0x58>
						EXECUTION = ESVAZIAR; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    324e:	2201      	movs	r2, #1
    3250:	4b3e      	ldr	r3, [pc, #248]	; (334c <pt_contorlaExecution+0x25c>)
    3252:	701a      	strb	r2, [r3, #0]
    3254:	2001      	movs	r0, #1
    3256:	4b41      	ldr	r3, [pc, #260]	; (335c <pt_contorlaExecution+0x26c>)
    3258:	4798      	blx	r3
    325a:	e775      	b.n	3148 <pt_contorlaExecution+0x58>
					if((time > TIME_ENXAGUAR && MODO == RAPIDO) || (time > 2*TIME_ENXAGUAR && MODO == NORMAL) || (time > 3*TIME_ENXAGUAR && MODO == PESADO)){
    325c:	4b3d      	ldr	r3, [pc, #244]	; (3354 <pt_contorlaExecution+0x264>)
    325e:	681b      	ldr	r3, [r3, #0]
    3260:	4a41      	ldr	r2, [pc, #260]	; (3368 <pt_contorlaExecution+0x278>)
    3262:	4293      	cmp	r3, r2
    3264:	dd03      	ble.n	326e <pt_contorlaExecution+0x17e>
    3266:	4a41      	ldr	r2, [pc, #260]	; (336c <pt_contorlaExecution+0x27c>)
    3268:	7812      	ldrb	r2, [r2, #0]
    326a:	2a01      	cmp	r2, #1
    326c:	d00f      	beq.n	328e <pt_contorlaExecution+0x19e>
    326e:	4a40      	ldr	r2, [pc, #256]	; (3370 <pt_contorlaExecution+0x280>)
    3270:	4293      	cmp	r3, r2
    3272:	dd03      	ble.n	327c <pt_contorlaExecution+0x18c>
    3274:	4a3d      	ldr	r2, [pc, #244]	; (336c <pt_contorlaExecution+0x27c>)
    3276:	7812      	ldrb	r2, [r2, #0]
    3278:	2a00      	cmp	r2, #0
    327a:	d008      	beq.n	328e <pt_contorlaExecution+0x19e>
    327c:	4a3d      	ldr	r2, [pc, #244]	; (3374 <pt_contorlaExecution+0x284>)
    327e:	4293      	cmp	r3, r2
    3280:	dc00      	bgt.n	3284 <pt_contorlaExecution+0x194>
    3282:	e761      	b.n	3148 <pt_contorlaExecution+0x58>
    3284:	4b39      	ldr	r3, [pc, #228]	; (336c <pt_contorlaExecution+0x27c>)
    3286:	781b      	ldrb	r3, [r3, #0]
    3288:	2b02      	cmp	r3, #2
    328a:	d000      	beq.n	328e <pt_contorlaExecution+0x19e>
    328c:	e75c      	b.n	3148 <pt_contorlaExecution+0x58>
						EXECUTION = ESVAZIAR; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    328e:	2201      	movs	r2, #1
    3290:	4b2e      	ldr	r3, [pc, #184]	; (334c <pt_contorlaExecution+0x25c>)
    3292:	701a      	strb	r2, [r3, #0]
    3294:	2001      	movs	r0, #1
    3296:	4b31      	ldr	r3, [pc, #196]	; (335c <pt_contorlaExecution+0x26c>)
    3298:	4798      	blx	r3
    329a:	e755      	b.n	3148 <pt_contorlaExecution+0x58>
					if((time > TIME_CENTRIFUGAR && MODO == RAPIDO) || (time > 2*TIME_CENTRIFUGAR && MODO == NORMAL) || (time > 3*TIME_CENTRIFUGAR && MODO == PESADO)){
    329c:	4b2d      	ldr	r3, [pc, #180]	; (3354 <pt_contorlaExecution+0x264>)
    329e:	681b      	ldr	r3, [r3, #0]
    32a0:	4a31      	ldr	r2, [pc, #196]	; (3368 <pt_contorlaExecution+0x278>)
    32a2:	4293      	cmp	r3, r2
    32a4:	dd03      	ble.n	32ae <pt_contorlaExecution+0x1be>
    32a6:	4a31      	ldr	r2, [pc, #196]	; (336c <pt_contorlaExecution+0x27c>)
    32a8:	7812      	ldrb	r2, [r2, #0]
    32aa:	2a01      	cmp	r2, #1
    32ac:	d00f      	beq.n	32ce <pt_contorlaExecution+0x1de>
    32ae:	4a30      	ldr	r2, [pc, #192]	; (3370 <pt_contorlaExecution+0x280>)
    32b0:	4293      	cmp	r3, r2
    32b2:	dd03      	ble.n	32bc <pt_contorlaExecution+0x1cc>
    32b4:	4a2d      	ldr	r2, [pc, #180]	; (336c <pt_contorlaExecution+0x27c>)
    32b6:	7812      	ldrb	r2, [r2, #0]
    32b8:	2a00      	cmp	r2, #0
    32ba:	d008      	beq.n	32ce <pt_contorlaExecution+0x1de>
    32bc:	4a2d      	ldr	r2, [pc, #180]	; (3374 <pt_contorlaExecution+0x284>)
    32be:	4293      	cmp	r3, r2
    32c0:	dc00      	bgt.n	32c4 <pt_contorlaExecution+0x1d4>
    32c2:	e741      	b.n	3148 <pt_contorlaExecution+0x58>
    32c4:	4b29      	ldr	r3, [pc, #164]	; (336c <pt_contorlaExecution+0x27c>)
    32c6:	781b      	ldrb	r3, [r3, #0]
    32c8:	2b02      	cmp	r3, #2
    32ca:	d000      	beq.n	32ce <pt_contorlaExecution+0x1de>
    32cc:	e73c      	b.n	3148 <pt_contorlaExecution+0x58>
						EXECUTION = SECANDO; time = 0; printExecutionSate(EXECUTION);  //Usado para imprimir o subestado atual.
    32ce:	2206      	movs	r2, #6
    32d0:	4b1e      	ldr	r3, [pc, #120]	; (334c <pt_contorlaExecution+0x25c>)
    32d2:	701a      	strb	r2, [r3, #0]
    32d4:	2200      	movs	r2, #0
    32d6:	4b1f      	ldr	r3, [pc, #124]	; (3354 <pt_contorlaExecution+0x264>)
    32d8:	601a      	str	r2, [r3, #0]
    32da:	2006      	movs	r0, #6
    32dc:	4b1f      	ldr	r3, [pc, #124]	; (335c <pt_contorlaExecution+0x26c>)
    32de:	4798      	blx	r3
    32e0:	e732      	b.n	3148 <pt_contorlaExecution+0x58>
					if((time > TIME_SECANDO && SECAR == MORNO) || (time > 2*TIME_SECANDO && SECAR == QUENTE) || (time > 3*TIME_SECANDO && SECAR == VAPOR)){
    32e2:	4b1c      	ldr	r3, [pc, #112]	; (3354 <pt_contorlaExecution+0x264>)
    32e4:	681b      	ldr	r3, [r3, #0]
    32e6:	4a20      	ldr	r2, [pc, #128]	; (3368 <pt_contorlaExecution+0x278>)
    32e8:	4293      	cmp	r3, r2
    32ea:	dd03      	ble.n	32f4 <pt_contorlaExecution+0x204>
    32ec:	4a22      	ldr	r2, [pc, #136]	; (3378 <pt_contorlaExecution+0x288>)
    32ee:	7812      	ldrb	r2, [r2, #0]
    32f0:	2a00      	cmp	r2, #0
    32f2:	d00f      	beq.n	3314 <pt_contorlaExecution+0x224>
    32f4:	4a1e      	ldr	r2, [pc, #120]	; (3370 <pt_contorlaExecution+0x280>)
    32f6:	4293      	cmp	r3, r2
    32f8:	dd03      	ble.n	3302 <pt_contorlaExecution+0x212>
    32fa:	4a1f      	ldr	r2, [pc, #124]	; (3378 <pt_contorlaExecution+0x288>)
    32fc:	7812      	ldrb	r2, [r2, #0]
    32fe:	2a01      	cmp	r2, #1
    3300:	d008      	beq.n	3314 <pt_contorlaExecution+0x224>
    3302:	4a1c      	ldr	r2, [pc, #112]	; (3374 <pt_contorlaExecution+0x284>)
    3304:	4293      	cmp	r3, r2
    3306:	dc00      	bgt.n	330a <pt_contorlaExecution+0x21a>
    3308:	e71e      	b.n	3148 <pt_contorlaExecution+0x58>
    330a:	4b1b      	ldr	r3, [pc, #108]	; (3378 <pt_contorlaExecution+0x288>)
    330c:	781b      	ldrb	r3, [r3, #0]
    330e:	2b02      	cmp	r3, #2
    3310:	d000      	beq.n	3314 <pt_contorlaExecution+0x224>
    3312:	e719      	b.n	3148 <pt_contorlaExecution+0x58>
						EXECUTION = FAZENDO_NADA; ESTADO = FINALIZADO; 	printString("---FINALIZADO---", 10, 10); printString("------         PARAR", 0, 25);
    3314:	2207      	movs	r2, #7
    3316:	4b0d      	ldr	r3, [pc, #52]	; (334c <pt_contorlaExecution+0x25c>)
    3318:	701a      	strb	r2, [r3, #0]
    331a:	3a03      	subs	r2, #3
    331c:	4b0a      	ldr	r3, [pc, #40]	; (3348 <pt_contorlaExecution+0x258>)
    331e:	701a      	strb	r2, [r3, #0]
    3320:	3206      	adds	r2, #6
    3322:	210a      	movs	r1, #10
    3324:	4815      	ldr	r0, [pc, #84]	; (337c <pt_contorlaExecution+0x28c>)
    3326:	4d16      	ldr	r5, [pc, #88]	; (3380 <pt_contorlaExecution+0x290>)
    3328:	47a8      	blx	r5
    332a:	2219      	movs	r2, #25
    332c:	2100      	movs	r1, #0
    332e:	4815      	ldr	r0, [pc, #84]	; (3384 <pt_contorlaExecution+0x294>)
    3330:	47a8      	blx	r5
    3332:	e709      	b.n	3148 <pt_contorlaExecution+0x58>
					concatString("ERRO", 70, 10);  //Usado para imprimir o subestado atual.
    3334:	220a      	movs	r2, #10
    3336:	2146      	movs	r1, #70	; 0x46
    3338:	4813      	ldr	r0, [pc, #76]	; (3388 <pt_contorlaExecution+0x298>)
    333a:	4b14      	ldr	r3, [pc, #80]	; (338c <pt_contorlaExecution+0x29c>)
    333c:	4798      	blx	r3
				break;
    333e:	e703      	b.n	3148 <pt_contorlaExecution+0x58>
	PT_END(pt);
    3340:	2300      	movs	r3, #0
    3342:	8003      	strh	r3, [r0, #0]
    3344:	2003      	movs	r0, #3
    3346:	e6ea      	b.n	311e <pt_contorlaExecution+0x2e>
    3348:	20000380 	.word	0x20000380
    334c:	20000049 	.word	0x20000049
    3350:	00004ca4 	.word	0x00004ca4
    3354:	2000038c 	.word	0x2000038c
    3358:	20000389 	.word	0x20000389
    335c:	00000de9 	.word	0x00000de9
    3360:	2000004a 	.word	0x2000004a
    3364:	20000384 	.word	0x20000384
    3368:	00011170 	.word	0x00011170
    336c:	20000381 	.word	0x20000381
    3370:	000222e0 	.word	0x000222e0
    3374:	00033450 	.word	0x00033450
    3378:	2000038a 	.word	0x2000038a
    337c:	00004ce0 	.word	0x00004ce0
    3380:	00000da9 	.word	0x00000da9
    3384:	00004d54 	.word	0x00004d54
    3388:	00004938 	.word	0x00004938
    338c:	00000dd5 	.word	0x00000dd5

00003390 <pt_controlaComponentes>:
 *  \param pt ponteiro de estrutura pt (pThread)
 */
PT_THREAD(pt_controlaComponentes(struct pt *pt))
{
	//Inicia a protothread.
	PT_BEGIN(pt);
    3390:	8803      	ldrh	r3, [r0, #0]
    3392:	2b00      	cmp	r3, #0
    3394:	d003      	beq.n	339e <pt_controlaComponentes+0xe>
    3396:	22c0      	movs	r2, #192	; 0xc0
    3398:	32ff      	adds	r2, #255	; 0xff
    339a:	4293      	cmp	r3, r2
    339c:	d150      	bne.n	3440 <pt_controlaComponentes+0xb0>

	while(1){
		//***MOTOR***
		//Estado executando, logo verifica se é para o ligar o motor.
		if(ESTADO == EXECUTANDO && ( EXECUTION == BATER || EXECUTION == CENTRIFUGAR || EXECUTION == SECANDO )){
    339e:	4b30      	ldr	r3, [pc, #192]	; (3460 <pt_controlaComponentes+0xd0>)
    33a0:	781b      	ldrb	r3, [r3, #0]
    33a2:	2b01      	cmp	r3, #1
    33a4:	d015      	beq.n	33d2 <pt_controlaComponentes+0x42>
		port_base->OUTCLR.reg = pin_mask;
    33a6:	2180      	movs	r1, #128	; 0x80
    33a8:	0349      	lsls	r1, r1, #13
    33aa:	4a2e      	ldr	r2, [pc, #184]	; (3464 <pt_controlaComponentes+0xd4>)
    33ac:	6151      	str	r1, [r2, #20]
    33ae:	2120      	movs	r1, #32
    33b0:	4a2d      	ldr	r2, [pc, #180]	; (3468 <pt_controlaComponentes+0xd8>)
    33b2:	6151      	str	r1, [r2, #20]
			LED_OFF(l_valvula);
		}

		//***BOMBA***
		//Estado executando, logo verifica se é para o bomba retirar agua.
		if(ESTADO == EXECUTANDO && ( EXECUTION == CENTRIFUGAR || EXECUTION == ESVAZIAR)){
    33b4:	2b01      	cmp	r3, #1
    33b6:	d047      	beq.n	3448 <pt_controlaComponentes+0xb8>
    33b8:	2280      	movs	r2, #128	; 0x80
    33ba:	0212      	lsls	r2, r2, #8
    33bc:	4b2a      	ldr	r3, [pc, #168]	; (3468 <pt_controlaComponentes+0xd8>)
    33be:	615a      	str	r2, [r3, #20]
    33c0:	2280      	movs	r2, #128	; 0x80
    33c2:	0392      	lsls	r2, r2, #14
    33c4:	4b27      	ldr	r3, [pc, #156]	; (3464 <pt_controlaComponentes+0xd4>)
    33c6:	615a      	str	r2, [r3, #20]
		}else{
			LED_OFF(l_secador);
		}

		//Rerorna para da protothread.
		PT_YIELD(pt);
    33c8:	23c0      	movs	r3, #192	; 0xc0
    33ca:	33ff      	adds	r3, #255	; 0xff
    33cc:	8003      	strh	r3, [r0, #0]
    33ce:	2001      	movs	r0, #1
	}

	//Fim da protothread.
	PT_END(pt);
}
    33d0:	4770      	bx	lr
		if(ESTADO == EXECUTANDO && ( EXECUTION == BATER || EXECUTION == CENTRIFUGAR || EXECUTION == SECANDO )){
    33d2:	4a26      	ldr	r2, [pc, #152]	; (346c <pt_controlaComponentes+0xdc>)
    33d4:	7812      	ldrb	r2, [r2, #0]
    33d6:	2a02      	cmp	r2, #2
    33d8:	d007      	beq.n	33ea <pt_controlaComponentes+0x5a>
    33da:	3a05      	subs	r2, #5
    33dc:	2a01      	cmp	r2, #1
    33de:	d904      	bls.n	33ea <pt_controlaComponentes+0x5a>
    33e0:	2180      	movs	r1, #128	; 0x80
    33e2:	0349      	lsls	r1, r1, #13
    33e4:	4a1f      	ldr	r2, [pc, #124]	; (3464 <pt_controlaComponentes+0xd4>)
    33e6:	6151      	str	r1, [r2, #20]
    33e8:	e003      	b.n	33f2 <pt_controlaComponentes+0x62>
		port_base->OUTSET.reg = pin_mask;
    33ea:	2180      	movs	r1, #128	; 0x80
    33ec:	0349      	lsls	r1, r1, #13
    33ee:	4a1d      	ldr	r2, [pc, #116]	; (3464 <pt_controlaComponentes+0xd4>)
    33f0:	6191      	str	r1, [r2, #24]
		if(ESTADO == EXECUTANDO && ( EXECUTION == ENCHER || (EXECUTION == SECANDO && SECAR == VAPOR)) ){
    33f2:	4a1e      	ldr	r2, [pc, #120]	; (346c <pt_controlaComponentes+0xdc>)
    33f4:	7812      	ldrb	r2, [r2, #0]
    33f6:	2a00      	cmp	r2, #0
    33f8:	d005      	beq.n	3406 <pt_controlaComponentes+0x76>
    33fa:	2a06      	cmp	r2, #6
    33fc:	d1d7      	bne.n	33ae <pt_controlaComponentes+0x1e>
    33fe:	4a1c      	ldr	r2, [pc, #112]	; (3470 <pt_controlaComponentes+0xe0>)
    3400:	7812      	ldrb	r2, [r2, #0]
    3402:	2a02      	cmp	r2, #2
    3404:	d1d3      	bne.n	33ae <pt_controlaComponentes+0x1e>
    3406:	2120      	movs	r1, #32
    3408:	4a17      	ldr	r2, [pc, #92]	; (3468 <pt_controlaComponentes+0xd8>)
    340a:	6191      	str	r1, [r2, #24]
		if(ESTADO == EXECUTANDO && ( EXECUTION == CENTRIFUGAR || EXECUTION == ESVAZIAR)){
    340c:	4a17      	ldr	r2, [pc, #92]	; (346c <pt_controlaComponentes+0xdc>)
    340e:	7812      	ldrb	r2, [r2, #0]
    3410:	391c      	subs	r1, #28
    3412:	438a      	bics	r2, r1
    3414:	2a01      	cmp	r2, #1
    3416:	d006      	beq.n	3426 <pt_controlaComponentes+0x96>
		port_base->OUTCLR.reg = pin_mask;
    3418:	2180      	movs	r1, #128	; 0x80
    341a:	0209      	lsls	r1, r1, #8
    341c:	4a12      	ldr	r2, [pc, #72]	; (3468 <pt_controlaComponentes+0xd8>)
    341e:	6151      	str	r1, [r2, #20]
		if(ESTADO == EXECUTANDO && ( EXECUTION == SECANDO) ){
    3420:	2b01      	cmp	r3, #1
    3422:	d004      	beq.n	342e <pt_controlaComponentes+0x9e>
    3424:	e7cc      	b.n	33c0 <pt_controlaComponentes+0x30>
		port_base->OUTSET.reg = pin_mask;
    3426:	2280      	movs	r2, #128	; 0x80
    3428:	0212      	lsls	r2, r2, #8
    342a:	4b0f      	ldr	r3, [pc, #60]	; (3468 <pt_controlaComponentes+0xd8>)
    342c:	619a      	str	r2, [r3, #24]
    342e:	4b0f      	ldr	r3, [pc, #60]	; (346c <pt_controlaComponentes+0xdc>)
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	2b06      	cmp	r3, #6
    3434:	d1c4      	bne.n	33c0 <pt_controlaComponentes+0x30>
    3436:	2280      	movs	r2, #128	; 0x80
    3438:	0392      	lsls	r2, r2, #14
    343a:	4b0a      	ldr	r3, [pc, #40]	; (3464 <pt_controlaComponentes+0xd4>)
    343c:	619a      	str	r2, [r3, #24]
    343e:	e7c3      	b.n	33c8 <pt_controlaComponentes+0x38>
	PT_END(pt);
    3440:	2300      	movs	r3, #0
    3442:	8003      	strh	r3, [r0, #0]
    3444:	2003      	movs	r0, #3
    3446:	e7c3      	b.n	33d0 <pt_controlaComponentes+0x40>
		if(ESTADO == EXECUTANDO && ( EXECUTION == CENTRIFUGAR || EXECUTION == ESVAZIAR)){
    3448:	4b08      	ldr	r3, [pc, #32]	; (346c <pt_controlaComponentes+0xdc>)
    344a:	781b      	ldrb	r3, [r3, #0]
    344c:	2204      	movs	r2, #4
    344e:	4393      	bics	r3, r2
    3450:	2b01      	cmp	r3, #1
    3452:	d0e8      	beq.n	3426 <pt_controlaComponentes+0x96>
		port_base->OUTCLR.reg = pin_mask;
    3454:	2280      	movs	r2, #128	; 0x80
    3456:	0212      	lsls	r2, r2, #8
    3458:	4b03      	ldr	r3, [pc, #12]	; (3468 <pt_controlaComponentes+0xd8>)
    345a:	615a      	str	r2, [r3, #20]
    345c:	e7e7      	b.n	342e <pt_controlaComponentes+0x9e>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	20000380 	.word	0x20000380
    3464:	41004400 	.word	0x41004400
    3468:	41004480 	.word	0x41004480
    346c:	20000049 	.word	0x20000049
    3470:	2000038a 	.word	0x2000038a

00003474 <main>:

/*! \brief Função principal
 *  Inciializa o sistema e o mantém em funcionameno por tempo indeterminado.
 */
int main(void)
{
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	b084      	sub	sp, #16
	//Inicializa
	system_init();
    3478:	4b18      	ldr	r3, [pc, #96]	; (34dc <main+0x68>)
    347a:	4798      	blx	r3

	//Configura o display OLED.
	init_OLED_display(&spinners);
    347c:	4818      	ldr	r0, [pc, #96]	; (34e0 <main+0x6c>)
    347e:	4b19      	ldr	r3, [pc, #100]	; (34e4 <main+0x70>)
    3480:	4798      	blx	r3

	//Configura os btns e os leds do OLED (parte de baixo da placa).
	init_OLED_btnLed();
    3482:	4b19      	ldr	r3, [pc, #100]	; (34e8 <main+0x74>)
    3484:	4798      	blx	r3

	//Configura os btns e os leds externos (lateral)
	init_external_btnLed();
    3486:	4b19      	ldr	r3, [pc, #100]	; (34ec <main+0x78>)
    3488:	4798      	blx	r3

	//Configura o ADC.
	initSensor_NivelAgua();
    348a:	4b19      	ldr	r3, [pc, #100]	; (34f0 <main+0x7c>)
    348c:	4798      	blx	r3

	//Configura
	configure_usart();
    348e:	4b19      	ldr	r3, [pc, #100]	; (34f4 <main+0x80>)
    3490:	4798      	blx	r3
	configure_usart_callbacks();
    3492:	4b19      	ldr	r3, [pc, #100]	; (34f8 <main+0x84>)
    3494:	4798      	blx	r3
	cpu_irq_enable();
    3496:	2201      	movs	r2, #1
    3498:	4b18      	ldr	r3, [pc, #96]	; (34fc <main+0x88>)
    349a:	701a      	strb	r2, [r3, #0]
    349c:	f3bf 8f5f 	dmb	sy
    34a0:	b662      	cpsie	i
    34a2:	4b17      	ldr	r3, [pc, #92]	; (3500 <main+0x8c>)
    34a4:	3b01      	subs	r3, #1

	//Ativa o intr do sistema
	system_interrupt_enable_global();

	//Gasta tempo e Inicial. Tempo para abrir o terminal e poder ver desde o inicio.
	for(int wt = 0; wt<1000000;wt++){}
    34a6:	2b00      	cmp	r3, #0
    34a8:	d1fc      	bne.n	34a4 <main+0x30>
	printf("START....................\n\n");
    34aa:	4816      	ldr	r0, [pc, #88]	; (3504 <main+0x90>)
    34ac:	4b16      	ldr	r3, [pc, #88]	; (3508 <main+0x94>)
    34ae:	4798      	blx	r3

	//Cria as pThread. E Inicializa.
  struct pt pt_gD, pt_pD, pt_cC, pt_cE;
	PT_INIT(&pt_gD); PT_INIT(&pt_pD); PT_INIT(&pt_cC); PT_INIT(&pt_cE);
    34b0:	2300      	movs	r3, #0
    34b2:	aa03      	add	r2, sp, #12
    34b4:	8013      	strh	r3, [r2, #0]
    34b6:	aa02      	add	r2, sp, #8
    34b8:	8013      	strh	r3, [r2, #0]
    34ba:	aa01      	add	r2, sp, #4
    34bc:	8013      	strh	r3, [r2, #0]
    34be:	466a      	mov	r2, sp
    34c0:	8013      	strh	r3, [r2, #0]


	//Fica executado para sempre as protoThreads.
	while(1){
		//Fica trocando entre as protothreads.
		pt_gerenciaDisplay(&pt_gD);
    34c2:	4e12      	ldr	r6, [pc, #72]	; (350c <main+0x98>)
		pt_pegaDados(&pt_pD);
    34c4:	4d12      	ldr	r5, [pc, #72]	; (3510 <main+0x9c>)
		pt_contorlaExecution(&pt_cE);
    34c6:	4c13      	ldr	r4, [pc, #76]	; (3514 <main+0xa0>)
		pt_gerenciaDisplay(&pt_gD);
    34c8:	a803      	add	r0, sp, #12
    34ca:	47b0      	blx	r6
		pt_pegaDados(&pt_pD);
    34cc:	a802      	add	r0, sp, #8
    34ce:	47a8      	blx	r5
		pt_contorlaExecution(&pt_cE);
    34d0:	4668      	mov	r0, sp
    34d2:	47a0      	blx	r4
		pt_controlaComponentes(&pt_cC);
    34d4:	a801      	add	r0, sp, #4
    34d6:	4b10      	ldr	r3, [pc, #64]	; (3518 <main+0xa4>)
    34d8:	4798      	blx	r3
    34da:	e7f5      	b.n	34c8 <main+0x54>
    34dc:	00002c69 	.word	0x00002c69
    34e0:	2000055c 	.word	0x2000055c
    34e4:	00000cd5 	.word	0x00000cd5
    34e8:	00000ef1 	.word	0x00000ef1
    34ec:	00000f79 	.word	0x00000f79
    34f0:	00000115 	.word	0x00000115
    34f4:	00001059 	.word	0x00001059
    34f8:	0000114d 	.word	0x0000114d
    34fc:	20000048 	.word	0x20000048
    3500:	000f4240 	.word	0x000f4240
    3504:	00004cc4 	.word	0x00004cc4
    3508:	000037b5 	.word	0x000037b5
    350c:	00002db9 	.word	0x00002db9
    3510:	00002f7d 	.word	0x00002f7d
    3514:	000030f1 	.word	0x000030f1
    3518:	00003391 	.word	0x00003391

0000351c <__udivsi3>:
    351c:	2200      	movs	r2, #0
    351e:	0843      	lsrs	r3, r0, #1
    3520:	428b      	cmp	r3, r1
    3522:	d374      	bcc.n	360e <__udivsi3+0xf2>
    3524:	0903      	lsrs	r3, r0, #4
    3526:	428b      	cmp	r3, r1
    3528:	d35f      	bcc.n	35ea <__udivsi3+0xce>
    352a:	0a03      	lsrs	r3, r0, #8
    352c:	428b      	cmp	r3, r1
    352e:	d344      	bcc.n	35ba <__udivsi3+0x9e>
    3530:	0b03      	lsrs	r3, r0, #12
    3532:	428b      	cmp	r3, r1
    3534:	d328      	bcc.n	3588 <__udivsi3+0x6c>
    3536:	0c03      	lsrs	r3, r0, #16
    3538:	428b      	cmp	r3, r1
    353a:	d30d      	bcc.n	3558 <__udivsi3+0x3c>
    353c:	22ff      	movs	r2, #255	; 0xff
    353e:	0209      	lsls	r1, r1, #8
    3540:	ba12      	rev	r2, r2
    3542:	0c03      	lsrs	r3, r0, #16
    3544:	428b      	cmp	r3, r1
    3546:	d302      	bcc.n	354e <__udivsi3+0x32>
    3548:	1212      	asrs	r2, r2, #8
    354a:	0209      	lsls	r1, r1, #8
    354c:	d065      	beq.n	361a <__udivsi3+0xfe>
    354e:	0b03      	lsrs	r3, r0, #12
    3550:	428b      	cmp	r3, r1
    3552:	d319      	bcc.n	3588 <__udivsi3+0x6c>
    3554:	e000      	b.n	3558 <__udivsi3+0x3c>
    3556:	0a09      	lsrs	r1, r1, #8
    3558:	0bc3      	lsrs	r3, r0, #15
    355a:	428b      	cmp	r3, r1
    355c:	d301      	bcc.n	3562 <__udivsi3+0x46>
    355e:	03cb      	lsls	r3, r1, #15
    3560:	1ac0      	subs	r0, r0, r3
    3562:	4152      	adcs	r2, r2
    3564:	0b83      	lsrs	r3, r0, #14
    3566:	428b      	cmp	r3, r1
    3568:	d301      	bcc.n	356e <__udivsi3+0x52>
    356a:	038b      	lsls	r3, r1, #14
    356c:	1ac0      	subs	r0, r0, r3
    356e:	4152      	adcs	r2, r2
    3570:	0b43      	lsrs	r3, r0, #13
    3572:	428b      	cmp	r3, r1
    3574:	d301      	bcc.n	357a <__udivsi3+0x5e>
    3576:	034b      	lsls	r3, r1, #13
    3578:	1ac0      	subs	r0, r0, r3
    357a:	4152      	adcs	r2, r2
    357c:	0b03      	lsrs	r3, r0, #12
    357e:	428b      	cmp	r3, r1
    3580:	d301      	bcc.n	3586 <__udivsi3+0x6a>
    3582:	030b      	lsls	r3, r1, #12
    3584:	1ac0      	subs	r0, r0, r3
    3586:	4152      	adcs	r2, r2
    3588:	0ac3      	lsrs	r3, r0, #11
    358a:	428b      	cmp	r3, r1
    358c:	d301      	bcc.n	3592 <__udivsi3+0x76>
    358e:	02cb      	lsls	r3, r1, #11
    3590:	1ac0      	subs	r0, r0, r3
    3592:	4152      	adcs	r2, r2
    3594:	0a83      	lsrs	r3, r0, #10
    3596:	428b      	cmp	r3, r1
    3598:	d301      	bcc.n	359e <__udivsi3+0x82>
    359a:	028b      	lsls	r3, r1, #10
    359c:	1ac0      	subs	r0, r0, r3
    359e:	4152      	adcs	r2, r2
    35a0:	0a43      	lsrs	r3, r0, #9
    35a2:	428b      	cmp	r3, r1
    35a4:	d301      	bcc.n	35aa <__udivsi3+0x8e>
    35a6:	024b      	lsls	r3, r1, #9
    35a8:	1ac0      	subs	r0, r0, r3
    35aa:	4152      	adcs	r2, r2
    35ac:	0a03      	lsrs	r3, r0, #8
    35ae:	428b      	cmp	r3, r1
    35b0:	d301      	bcc.n	35b6 <__udivsi3+0x9a>
    35b2:	020b      	lsls	r3, r1, #8
    35b4:	1ac0      	subs	r0, r0, r3
    35b6:	4152      	adcs	r2, r2
    35b8:	d2cd      	bcs.n	3556 <__udivsi3+0x3a>
    35ba:	09c3      	lsrs	r3, r0, #7
    35bc:	428b      	cmp	r3, r1
    35be:	d301      	bcc.n	35c4 <__udivsi3+0xa8>
    35c0:	01cb      	lsls	r3, r1, #7
    35c2:	1ac0      	subs	r0, r0, r3
    35c4:	4152      	adcs	r2, r2
    35c6:	0983      	lsrs	r3, r0, #6
    35c8:	428b      	cmp	r3, r1
    35ca:	d301      	bcc.n	35d0 <__udivsi3+0xb4>
    35cc:	018b      	lsls	r3, r1, #6
    35ce:	1ac0      	subs	r0, r0, r3
    35d0:	4152      	adcs	r2, r2
    35d2:	0943      	lsrs	r3, r0, #5
    35d4:	428b      	cmp	r3, r1
    35d6:	d301      	bcc.n	35dc <__udivsi3+0xc0>
    35d8:	014b      	lsls	r3, r1, #5
    35da:	1ac0      	subs	r0, r0, r3
    35dc:	4152      	adcs	r2, r2
    35de:	0903      	lsrs	r3, r0, #4
    35e0:	428b      	cmp	r3, r1
    35e2:	d301      	bcc.n	35e8 <__udivsi3+0xcc>
    35e4:	010b      	lsls	r3, r1, #4
    35e6:	1ac0      	subs	r0, r0, r3
    35e8:	4152      	adcs	r2, r2
    35ea:	08c3      	lsrs	r3, r0, #3
    35ec:	428b      	cmp	r3, r1
    35ee:	d301      	bcc.n	35f4 <__udivsi3+0xd8>
    35f0:	00cb      	lsls	r3, r1, #3
    35f2:	1ac0      	subs	r0, r0, r3
    35f4:	4152      	adcs	r2, r2
    35f6:	0883      	lsrs	r3, r0, #2
    35f8:	428b      	cmp	r3, r1
    35fa:	d301      	bcc.n	3600 <__udivsi3+0xe4>
    35fc:	008b      	lsls	r3, r1, #2
    35fe:	1ac0      	subs	r0, r0, r3
    3600:	4152      	adcs	r2, r2
    3602:	0843      	lsrs	r3, r0, #1
    3604:	428b      	cmp	r3, r1
    3606:	d301      	bcc.n	360c <__udivsi3+0xf0>
    3608:	004b      	lsls	r3, r1, #1
    360a:	1ac0      	subs	r0, r0, r3
    360c:	4152      	adcs	r2, r2
    360e:	1a41      	subs	r1, r0, r1
    3610:	d200      	bcs.n	3614 <__udivsi3+0xf8>
    3612:	4601      	mov	r1, r0
    3614:	4152      	adcs	r2, r2
    3616:	4610      	mov	r0, r2
    3618:	4770      	bx	lr
    361a:	e7ff      	b.n	361c <__udivsi3+0x100>
    361c:	b501      	push	{r0, lr}
    361e:	2000      	movs	r0, #0
    3620:	f000 f806 	bl	3630 <__aeabi_idiv0>
    3624:	bd02      	pop	{r1, pc}
    3626:	46c0      	nop			; (mov r8, r8)

00003628 <__aeabi_uidivmod>:
    3628:	2900      	cmp	r1, #0
    362a:	d0f7      	beq.n	361c <__udivsi3+0x100>
    362c:	e776      	b.n	351c <__udivsi3>
    362e:	4770      	bx	lr

00003630 <__aeabi_idiv0>:
    3630:	4770      	bx	lr
    3632:	46c0      	nop			; (mov r8, r8)

00003634 <__aeabi_lmul>:
    3634:	b5f0      	push	{r4, r5, r6, r7, lr}
    3636:	46ce      	mov	lr, r9
    3638:	4647      	mov	r7, r8
    363a:	0415      	lsls	r5, r2, #16
    363c:	0c2d      	lsrs	r5, r5, #16
    363e:	002e      	movs	r6, r5
    3640:	b580      	push	{r7, lr}
    3642:	0407      	lsls	r7, r0, #16
    3644:	0c14      	lsrs	r4, r2, #16
    3646:	0c3f      	lsrs	r7, r7, #16
    3648:	4699      	mov	r9, r3
    364a:	0c03      	lsrs	r3, r0, #16
    364c:	437e      	muls	r6, r7
    364e:	435d      	muls	r5, r3
    3650:	4367      	muls	r7, r4
    3652:	4363      	muls	r3, r4
    3654:	197f      	adds	r7, r7, r5
    3656:	0c34      	lsrs	r4, r6, #16
    3658:	19e4      	adds	r4, r4, r7
    365a:	469c      	mov	ip, r3
    365c:	42a5      	cmp	r5, r4
    365e:	d903      	bls.n	3668 <__aeabi_lmul+0x34>
    3660:	2380      	movs	r3, #128	; 0x80
    3662:	025b      	lsls	r3, r3, #9
    3664:	4698      	mov	r8, r3
    3666:	44c4      	add	ip, r8
    3668:	464b      	mov	r3, r9
    366a:	4351      	muls	r1, r2
    366c:	4343      	muls	r3, r0
    366e:	0436      	lsls	r6, r6, #16
    3670:	0c36      	lsrs	r6, r6, #16
    3672:	0c25      	lsrs	r5, r4, #16
    3674:	0424      	lsls	r4, r4, #16
    3676:	4465      	add	r5, ip
    3678:	19a4      	adds	r4, r4, r6
    367a:	1859      	adds	r1, r3, r1
    367c:	1949      	adds	r1, r1, r5
    367e:	0020      	movs	r0, r4
    3680:	bc0c      	pop	{r2, r3}
    3682:	4690      	mov	r8, r2
    3684:	4699      	mov	r9, r3
    3686:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003688 <__libc_init_array>:
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	2600      	movs	r6, #0
    368c:	4d0c      	ldr	r5, [pc, #48]	; (36c0 <__libc_init_array+0x38>)
    368e:	4c0d      	ldr	r4, [pc, #52]	; (36c4 <__libc_init_array+0x3c>)
    3690:	1b64      	subs	r4, r4, r5
    3692:	10a4      	asrs	r4, r4, #2
    3694:	42a6      	cmp	r6, r4
    3696:	d109      	bne.n	36ac <__libc_init_array+0x24>
    3698:	2600      	movs	r6, #0
    369a:	f001 fbb3 	bl	4e04 <_init>
    369e:	4d0a      	ldr	r5, [pc, #40]	; (36c8 <__libc_init_array+0x40>)
    36a0:	4c0a      	ldr	r4, [pc, #40]	; (36cc <__libc_init_array+0x44>)
    36a2:	1b64      	subs	r4, r4, r5
    36a4:	10a4      	asrs	r4, r4, #2
    36a6:	42a6      	cmp	r6, r4
    36a8:	d105      	bne.n	36b6 <__libc_init_array+0x2e>
    36aa:	bd70      	pop	{r4, r5, r6, pc}
    36ac:	00b3      	lsls	r3, r6, #2
    36ae:	58eb      	ldr	r3, [r5, r3]
    36b0:	4798      	blx	r3
    36b2:	3601      	adds	r6, #1
    36b4:	e7ee      	b.n	3694 <__libc_init_array+0xc>
    36b6:	00b3      	lsls	r3, r6, #2
    36b8:	58eb      	ldr	r3, [r5, r3]
    36ba:	4798      	blx	r3
    36bc:	3601      	adds	r6, #1
    36be:	e7f2      	b.n	36a6 <__libc_init_array+0x1e>
    36c0:	00004e10 	.word	0x00004e10
    36c4:	00004e10 	.word	0x00004e10
    36c8:	00004e10 	.word	0x00004e10
    36cc:	00004e14 	.word	0x00004e14

000036d0 <memcpy>:
    36d0:	2300      	movs	r3, #0
    36d2:	b510      	push	{r4, lr}
    36d4:	429a      	cmp	r2, r3
    36d6:	d100      	bne.n	36da <memcpy+0xa>
    36d8:	bd10      	pop	{r4, pc}
    36da:	5ccc      	ldrb	r4, [r1, r3]
    36dc:	54c4      	strb	r4, [r0, r3]
    36de:	3301      	adds	r3, #1
    36e0:	e7f8      	b.n	36d4 <memcpy+0x4>

000036e2 <memset>:
    36e2:	0003      	movs	r3, r0
    36e4:	1882      	adds	r2, r0, r2
    36e6:	4293      	cmp	r3, r2
    36e8:	d100      	bne.n	36ec <memset+0xa>
    36ea:	4770      	bx	lr
    36ec:	7019      	strb	r1, [r3, #0]
    36ee:	3301      	adds	r3, #1
    36f0:	e7f9      	b.n	36e6 <memset+0x4>
	...

000036f4 <_puts_r>:
    36f4:	b570      	push	{r4, r5, r6, lr}
    36f6:	0005      	movs	r5, r0
    36f8:	000e      	movs	r6, r1
    36fa:	2800      	cmp	r0, #0
    36fc:	d004      	beq.n	3708 <_puts_r+0x14>
    36fe:	6983      	ldr	r3, [r0, #24]
    3700:	2b00      	cmp	r3, #0
    3702:	d101      	bne.n	3708 <_puts_r+0x14>
    3704:	f000 fb0c 	bl	3d20 <__sinit>
    3708:	69ab      	ldr	r3, [r5, #24]
    370a:	68ac      	ldr	r4, [r5, #8]
    370c:	2b00      	cmp	r3, #0
    370e:	d102      	bne.n	3716 <_puts_r+0x22>
    3710:	0028      	movs	r0, r5
    3712:	f000 fb05 	bl	3d20 <__sinit>
    3716:	4b24      	ldr	r3, [pc, #144]	; (37a8 <_puts_r+0xb4>)
    3718:	429c      	cmp	r4, r3
    371a:	d10f      	bne.n	373c <_puts_r+0x48>
    371c:	686c      	ldr	r4, [r5, #4]
    371e:	89a3      	ldrh	r3, [r4, #12]
    3720:	071b      	lsls	r3, r3, #28
    3722:	d502      	bpl.n	372a <_puts_r+0x36>
    3724:	6923      	ldr	r3, [r4, #16]
    3726:	2b00      	cmp	r3, #0
    3728:	d120      	bne.n	376c <_puts_r+0x78>
    372a:	0021      	movs	r1, r4
    372c:	0028      	movs	r0, r5
    372e:	f000 f989 	bl	3a44 <__swsetup_r>
    3732:	2800      	cmp	r0, #0
    3734:	d01a      	beq.n	376c <_puts_r+0x78>
    3736:	2001      	movs	r0, #1
    3738:	4240      	negs	r0, r0
    373a:	bd70      	pop	{r4, r5, r6, pc}
    373c:	4b1b      	ldr	r3, [pc, #108]	; (37ac <_puts_r+0xb8>)
    373e:	429c      	cmp	r4, r3
    3740:	d101      	bne.n	3746 <_puts_r+0x52>
    3742:	68ac      	ldr	r4, [r5, #8]
    3744:	e7eb      	b.n	371e <_puts_r+0x2a>
    3746:	4b1a      	ldr	r3, [pc, #104]	; (37b0 <_puts_r+0xbc>)
    3748:	429c      	cmp	r4, r3
    374a:	d1e8      	bne.n	371e <_puts_r+0x2a>
    374c:	68ec      	ldr	r4, [r5, #12]
    374e:	e7e6      	b.n	371e <_puts_r+0x2a>
    3750:	3b01      	subs	r3, #1
    3752:	3601      	adds	r6, #1
    3754:	60a3      	str	r3, [r4, #8]
    3756:	2b00      	cmp	r3, #0
    3758:	da04      	bge.n	3764 <_puts_r+0x70>
    375a:	69a2      	ldr	r2, [r4, #24]
    375c:	4293      	cmp	r3, r2
    375e:	db16      	blt.n	378e <_puts_r+0x9a>
    3760:	290a      	cmp	r1, #10
    3762:	d014      	beq.n	378e <_puts_r+0x9a>
    3764:	6823      	ldr	r3, [r4, #0]
    3766:	1c5a      	adds	r2, r3, #1
    3768:	6022      	str	r2, [r4, #0]
    376a:	7019      	strb	r1, [r3, #0]
    376c:	7831      	ldrb	r1, [r6, #0]
    376e:	68a3      	ldr	r3, [r4, #8]
    3770:	2900      	cmp	r1, #0
    3772:	d1ed      	bne.n	3750 <_puts_r+0x5c>
    3774:	3b01      	subs	r3, #1
    3776:	60a3      	str	r3, [r4, #8]
    3778:	2b00      	cmp	r3, #0
    377a:	da0f      	bge.n	379c <_puts_r+0xa8>
    377c:	0022      	movs	r2, r4
    377e:	310a      	adds	r1, #10
    3780:	0028      	movs	r0, r5
    3782:	f000 f909 	bl	3998 <__swbuf_r>
    3786:	1c43      	adds	r3, r0, #1
    3788:	d0d5      	beq.n	3736 <_puts_r+0x42>
    378a:	200a      	movs	r0, #10
    378c:	e7d5      	b.n	373a <_puts_r+0x46>
    378e:	0022      	movs	r2, r4
    3790:	0028      	movs	r0, r5
    3792:	f000 f901 	bl	3998 <__swbuf_r>
    3796:	1c43      	adds	r3, r0, #1
    3798:	d1e8      	bne.n	376c <_puts_r+0x78>
    379a:	e7cc      	b.n	3736 <_puts_r+0x42>
    379c:	200a      	movs	r0, #10
    379e:	6823      	ldr	r3, [r4, #0]
    37a0:	1c5a      	adds	r2, r3, #1
    37a2:	6022      	str	r2, [r4, #0]
    37a4:	7018      	strb	r0, [r3, #0]
    37a6:	e7c8      	b.n	373a <_puts_r+0x46>
    37a8:	00004d90 	.word	0x00004d90
    37ac:	00004db0 	.word	0x00004db0
    37b0:	00004d70 	.word	0x00004d70

000037b4 <puts>:
    37b4:	b510      	push	{r4, lr}
    37b6:	4b03      	ldr	r3, [pc, #12]	; (37c4 <puts+0x10>)
    37b8:	0001      	movs	r1, r0
    37ba:	6818      	ldr	r0, [r3, #0]
    37bc:	f7ff ff9a 	bl	36f4 <_puts_r>
    37c0:	bd10      	pop	{r4, pc}
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	2000004c 	.word	0x2000004c

000037c8 <setbuf>:
    37c8:	424a      	negs	r2, r1
    37ca:	414a      	adcs	r2, r1
    37cc:	2380      	movs	r3, #128	; 0x80
    37ce:	b510      	push	{r4, lr}
    37d0:	0052      	lsls	r2, r2, #1
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	f000 f802 	bl	37dc <setvbuf>
    37d8:	bd10      	pop	{r4, pc}
	...

000037dc <setvbuf>:
    37dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    37de:	001d      	movs	r5, r3
    37e0:	4b4f      	ldr	r3, [pc, #316]	; (3920 <setvbuf+0x144>)
    37e2:	b085      	sub	sp, #20
    37e4:	681e      	ldr	r6, [r3, #0]
    37e6:	0004      	movs	r4, r0
    37e8:	000f      	movs	r7, r1
    37ea:	9200      	str	r2, [sp, #0]
    37ec:	2e00      	cmp	r6, #0
    37ee:	d005      	beq.n	37fc <setvbuf+0x20>
    37f0:	69b3      	ldr	r3, [r6, #24]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d102      	bne.n	37fc <setvbuf+0x20>
    37f6:	0030      	movs	r0, r6
    37f8:	f000 fa92 	bl	3d20 <__sinit>
    37fc:	4b49      	ldr	r3, [pc, #292]	; (3924 <setvbuf+0x148>)
    37fe:	429c      	cmp	r4, r3
    3800:	d150      	bne.n	38a4 <setvbuf+0xc8>
    3802:	6874      	ldr	r4, [r6, #4]
    3804:	9b00      	ldr	r3, [sp, #0]
    3806:	2b02      	cmp	r3, #2
    3808:	d005      	beq.n	3816 <setvbuf+0x3a>
    380a:	2b01      	cmp	r3, #1
    380c:	d900      	bls.n	3810 <setvbuf+0x34>
    380e:	e084      	b.n	391a <setvbuf+0x13e>
    3810:	2d00      	cmp	r5, #0
    3812:	da00      	bge.n	3816 <setvbuf+0x3a>
    3814:	e081      	b.n	391a <setvbuf+0x13e>
    3816:	0021      	movs	r1, r4
    3818:	0030      	movs	r0, r6
    381a:	f000 fa13 	bl	3c44 <_fflush_r>
    381e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3820:	2900      	cmp	r1, #0
    3822:	d008      	beq.n	3836 <setvbuf+0x5a>
    3824:	0023      	movs	r3, r4
    3826:	3344      	adds	r3, #68	; 0x44
    3828:	4299      	cmp	r1, r3
    382a:	d002      	beq.n	3832 <setvbuf+0x56>
    382c:	0030      	movs	r0, r6
    382e:	f000 fb83 	bl	3f38 <_free_r>
    3832:	2300      	movs	r3, #0
    3834:	6363      	str	r3, [r4, #52]	; 0x34
    3836:	2300      	movs	r3, #0
    3838:	61a3      	str	r3, [r4, #24]
    383a:	6063      	str	r3, [r4, #4]
    383c:	89a3      	ldrh	r3, [r4, #12]
    383e:	061b      	lsls	r3, r3, #24
    3840:	d503      	bpl.n	384a <setvbuf+0x6e>
    3842:	6921      	ldr	r1, [r4, #16]
    3844:	0030      	movs	r0, r6
    3846:	f000 fb77 	bl	3f38 <_free_r>
    384a:	89a3      	ldrh	r3, [r4, #12]
    384c:	4a36      	ldr	r2, [pc, #216]	; (3928 <setvbuf+0x14c>)
    384e:	4013      	ands	r3, r2
    3850:	81a3      	strh	r3, [r4, #12]
    3852:	9b00      	ldr	r3, [sp, #0]
    3854:	2b02      	cmp	r3, #2
    3856:	d05a      	beq.n	390e <setvbuf+0x132>
    3858:	ab03      	add	r3, sp, #12
    385a:	aa02      	add	r2, sp, #8
    385c:	0021      	movs	r1, r4
    385e:	0030      	movs	r0, r6
    3860:	f000 faf4 	bl	3e4c <__swhatbuf_r>
    3864:	89a3      	ldrh	r3, [r4, #12]
    3866:	4318      	orrs	r0, r3
    3868:	81a0      	strh	r0, [r4, #12]
    386a:	2d00      	cmp	r5, #0
    386c:	d124      	bne.n	38b8 <setvbuf+0xdc>
    386e:	9d02      	ldr	r5, [sp, #8]
    3870:	0028      	movs	r0, r5
    3872:	f000 fb57 	bl	3f24 <malloc>
    3876:	9501      	str	r5, [sp, #4]
    3878:	1e07      	subs	r7, r0, #0
    387a:	d142      	bne.n	3902 <setvbuf+0x126>
    387c:	9b02      	ldr	r3, [sp, #8]
    387e:	9301      	str	r3, [sp, #4]
    3880:	42ab      	cmp	r3, r5
    3882:	d139      	bne.n	38f8 <setvbuf+0x11c>
    3884:	2001      	movs	r0, #1
    3886:	4240      	negs	r0, r0
    3888:	2302      	movs	r3, #2
    388a:	89a2      	ldrh	r2, [r4, #12]
    388c:	4313      	orrs	r3, r2
    388e:	81a3      	strh	r3, [r4, #12]
    3890:	2300      	movs	r3, #0
    3892:	60a3      	str	r3, [r4, #8]
    3894:	0023      	movs	r3, r4
    3896:	3347      	adds	r3, #71	; 0x47
    3898:	6023      	str	r3, [r4, #0]
    389a:	6123      	str	r3, [r4, #16]
    389c:	2301      	movs	r3, #1
    389e:	6163      	str	r3, [r4, #20]
    38a0:	b005      	add	sp, #20
    38a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a4:	4b21      	ldr	r3, [pc, #132]	; (392c <setvbuf+0x150>)
    38a6:	429c      	cmp	r4, r3
    38a8:	d101      	bne.n	38ae <setvbuf+0xd2>
    38aa:	68b4      	ldr	r4, [r6, #8]
    38ac:	e7aa      	b.n	3804 <setvbuf+0x28>
    38ae:	4b20      	ldr	r3, [pc, #128]	; (3930 <setvbuf+0x154>)
    38b0:	429c      	cmp	r4, r3
    38b2:	d1a7      	bne.n	3804 <setvbuf+0x28>
    38b4:	68f4      	ldr	r4, [r6, #12]
    38b6:	e7a5      	b.n	3804 <setvbuf+0x28>
    38b8:	2f00      	cmp	r7, #0
    38ba:	d0d9      	beq.n	3870 <setvbuf+0x94>
    38bc:	69b3      	ldr	r3, [r6, #24]
    38be:	2b00      	cmp	r3, #0
    38c0:	d102      	bne.n	38c8 <setvbuf+0xec>
    38c2:	0030      	movs	r0, r6
    38c4:	f000 fa2c 	bl	3d20 <__sinit>
    38c8:	9b00      	ldr	r3, [sp, #0]
    38ca:	2b01      	cmp	r3, #1
    38cc:	d103      	bne.n	38d6 <setvbuf+0xfa>
    38ce:	89a3      	ldrh	r3, [r4, #12]
    38d0:	9a00      	ldr	r2, [sp, #0]
    38d2:	431a      	orrs	r2, r3
    38d4:	81a2      	strh	r2, [r4, #12]
    38d6:	2008      	movs	r0, #8
    38d8:	89a3      	ldrh	r3, [r4, #12]
    38da:	6027      	str	r7, [r4, #0]
    38dc:	6127      	str	r7, [r4, #16]
    38de:	6165      	str	r5, [r4, #20]
    38e0:	4018      	ands	r0, r3
    38e2:	d018      	beq.n	3916 <setvbuf+0x13a>
    38e4:	2001      	movs	r0, #1
    38e6:	4018      	ands	r0, r3
    38e8:	2300      	movs	r3, #0
    38ea:	4298      	cmp	r0, r3
    38ec:	d011      	beq.n	3912 <setvbuf+0x136>
    38ee:	426d      	negs	r5, r5
    38f0:	60a3      	str	r3, [r4, #8]
    38f2:	61a5      	str	r5, [r4, #24]
    38f4:	0018      	movs	r0, r3
    38f6:	e7d3      	b.n	38a0 <setvbuf+0xc4>
    38f8:	9801      	ldr	r0, [sp, #4]
    38fa:	f000 fb13 	bl	3f24 <malloc>
    38fe:	1e07      	subs	r7, r0, #0
    3900:	d0c0      	beq.n	3884 <setvbuf+0xa8>
    3902:	2380      	movs	r3, #128	; 0x80
    3904:	89a2      	ldrh	r2, [r4, #12]
    3906:	9d01      	ldr	r5, [sp, #4]
    3908:	4313      	orrs	r3, r2
    390a:	81a3      	strh	r3, [r4, #12]
    390c:	e7d6      	b.n	38bc <setvbuf+0xe0>
    390e:	2000      	movs	r0, #0
    3910:	e7ba      	b.n	3888 <setvbuf+0xac>
    3912:	60a5      	str	r5, [r4, #8]
    3914:	e7c4      	b.n	38a0 <setvbuf+0xc4>
    3916:	60a0      	str	r0, [r4, #8]
    3918:	e7c2      	b.n	38a0 <setvbuf+0xc4>
    391a:	2001      	movs	r0, #1
    391c:	4240      	negs	r0, r0
    391e:	e7bf      	b.n	38a0 <setvbuf+0xc4>
    3920:	2000004c 	.word	0x2000004c
    3924:	00004d90 	.word	0x00004d90
    3928:	fffff35c 	.word	0xfffff35c
    392c:	00004db0 	.word	0x00004db0
    3930:	00004d70 	.word	0x00004d70

00003934 <sniprintf>:
    3934:	b40c      	push	{r2, r3}
    3936:	b530      	push	{r4, r5, lr}
    3938:	4b16      	ldr	r3, [pc, #88]	; (3994 <sniprintf+0x60>)
    393a:	b09d      	sub	sp, #116	; 0x74
    393c:	1e0c      	subs	r4, r1, #0
    393e:	681d      	ldr	r5, [r3, #0]
    3940:	da08      	bge.n	3954 <sniprintf+0x20>
    3942:	238b      	movs	r3, #139	; 0x8b
    3944:	2001      	movs	r0, #1
    3946:	602b      	str	r3, [r5, #0]
    3948:	4240      	negs	r0, r0
    394a:	b01d      	add	sp, #116	; 0x74
    394c:	bc30      	pop	{r4, r5}
    394e:	bc08      	pop	{r3}
    3950:	b002      	add	sp, #8
    3952:	4718      	bx	r3
    3954:	2382      	movs	r3, #130	; 0x82
    3956:	a902      	add	r1, sp, #8
    3958:	009b      	lsls	r3, r3, #2
    395a:	818b      	strh	r3, [r1, #12]
    395c:	2300      	movs	r3, #0
    395e:	9002      	str	r0, [sp, #8]
    3960:	6108      	str	r0, [r1, #16]
    3962:	429c      	cmp	r4, r3
    3964:	d000      	beq.n	3968 <sniprintf+0x34>
    3966:	1e63      	subs	r3, r4, #1
    3968:	608b      	str	r3, [r1, #8]
    396a:	614b      	str	r3, [r1, #20]
    396c:	2301      	movs	r3, #1
    396e:	425b      	negs	r3, r3
    3970:	81cb      	strh	r3, [r1, #14]
    3972:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3974:	ab21      	add	r3, sp, #132	; 0x84
    3976:	0028      	movs	r0, r5
    3978:	9301      	str	r3, [sp, #4]
    397a:	f000 fbe7 	bl	414c <_svfiprintf_r>
    397e:	1c43      	adds	r3, r0, #1
    3980:	da01      	bge.n	3986 <sniprintf+0x52>
    3982:	238b      	movs	r3, #139	; 0x8b
    3984:	602b      	str	r3, [r5, #0]
    3986:	2c00      	cmp	r4, #0
    3988:	d0df      	beq.n	394a <sniprintf+0x16>
    398a:	2300      	movs	r3, #0
    398c:	9a02      	ldr	r2, [sp, #8]
    398e:	7013      	strb	r3, [r2, #0]
    3990:	e7db      	b.n	394a <sniprintf+0x16>
    3992:	46c0      	nop			; (mov r8, r8)
    3994:	2000004c 	.word	0x2000004c

00003998 <__swbuf_r>:
    3998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    399a:	0005      	movs	r5, r0
    399c:	000e      	movs	r6, r1
    399e:	0014      	movs	r4, r2
    39a0:	2800      	cmp	r0, #0
    39a2:	d004      	beq.n	39ae <__swbuf_r+0x16>
    39a4:	6983      	ldr	r3, [r0, #24]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d101      	bne.n	39ae <__swbuf_r+0x16>
    39aa:	f000 f9b9 	bl	3d20 <__sinit>
    39ae:	4b22      	ldr	r3, [pc, #136]	; (3a38 <__swbuf_r+0xa0>)
    39b0:	429c      	cmp	r4, r3
    39b2:	d12d      	bne.n	3a10 <__swbuf_r+0x78>
    39b4:	686c      	ldr	r4, [r5, #4]
    39b6:	69a3      	ldr	r3, [r4, #24]
    39b8:	60a3      	str	r3, [r4, #8]
    39ba:	89a3      	ldrh	r3, [r4, #12]
    39bc:	071b      	lsls	r3, r3, #28
    39be:	d531      	bpl.n	3a24 <__swbuf_r+0x8c>
    39c0:	6923      	ldr	r3, [r4, #16]
    39c2:	2b00      	cmp	r3, #0
    39c4:	d02e      	beq.n	3a24 <__swbuf_r+0x8c>
    39c6:	6823      	ldr	r3, [r4, #0]
    39c8:	6922      	ldr	r2, [r4, #16]
    39ca:	b2f7      	uxtb	r7, r6
    39cc:	1a98      	subs	r0, r3, r2
    39ce:	6963      	ldr	r3, [r4, #20]
    39d0:	b2f6      	uxtb	r6, r6
    39d2:	4298      	cmp	r0, r3
    39d4:	db05      	blt.n	39e2 <__swbuf_r+0x4a>
    39d6:	0021      	movs	r1, r4
    39d8:	0028      	movs	r0, r5
    39da:	f000 f933 	bl	3c44 <_fflush_r>
    39de:	2800      	cmp	r0, #0
    39e0:	d126      	bne.n	3a30 <__swbuf_r+0x98>
    39e2:	68a3      	ldr	r3, [r4, #8]
    39e4:	3001      	adds	r0, #1
    39e6:	3b01      	subs	r3, #1
    39e8:	60a3      	str	r3, [r4, #8]
    39ea:	6823      	ldr	r3, [r4, #0]
    39ec:	1c5a      	adds	r2, r3, #1
    39ee:	6022      	str	r2, [r4, #0]
    39f0:	701f      	strb	r7, [r3, #0]
    39f2:	6963      	ldr	r3, [r4, #20]
    39f4:	4298      	cmp	r0, r3
    39f6:	d004      	beq.n	3a02 <__swbuf_r+0x6a>
    39f8:	89a3      	ldrh	r3, [r4, #12]
    39fa:	07db      	lsls	r3, r3, #31
    39fc:	d51a      	bpl.n	3a34 <__swbuf_r+0x9c>
    39fe:	2e0a      	cmp	r6, #10
    3a00:	d118      	bne.n	3a34 <__swbuf_r+0x9c>
    3a02:	0021      	movs	r1, r4
    3a04:	0028      	movs	r0, r5
    3a06:	f000 f91d 	bl	3c44 <_fflush_r>
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d012      	beq.n	3a34 <__swbuf_r+0x9c>
    3a0e:	e00f      	b.n	3a30 <__swbuf_r+0x98>
    3a10:	4b0a      	ldr	r3, [pc, #40]	; (3a3c <__swbuf_r+0xa4>)
    3a12:	429c      	cmp	r4, r3
    3a14:	d101      	bne.n	3a1a <__swbuf_r+0x82>
    3a16:	68ac      	ldr	r4, [r5, #8]
    3a18:	e7cd      	b.n	39b6 <__swbuf_r+0x1e>
    3a1a:	4b09      	ldr	r3, [pc, #36]	; (3a40 <__swbuf_r+0xa8>)
    3a1c:	429c      	cmp	r4, r3
    3a1e:	d1ca      	bne.n	39b6 <__swbuf_r+0x1e>
    3a20:	68ec      	ldr	r4, [r5, #12]
    3a22:	e7c8      	b.n	39b6 <__swbuf_r+0x1e>
    3a24:	0021      	movs	r1, r4
    3a26:	0028      	movs	r0, r5
    3a28:	f000 f80c 	bl	3a44 <__swsetup_r>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d0ca      	beq.n	39c6 <__swbuf_r+0x2e>
    3a30:	2601      	movs	r6, #1
    3a32:	4276      	negs	r6, r6
    3a34:	0030      	movs	r0, r6
    3a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a38:	00004d90 	.word	0x00004d90
    3a3c:	00004db0 	.word	0x00004db0
    3a40:	00004d70 	.word	0x00004d70

00003a44 <__swsetup_r>:
    3a44:	4b36      	ldr	r3, [pc, #216]	; (3b20 <__swsetup_r+0xdc>)
    3a46:	b570      	push	{r4, r5, r6, lr}
    3a48:	681d      	ldr	r5, [r3, #0]
    3a4a:	0006      	movs	r6, r0
    3a4c:	000c      	movs	r4, r1
    3a4e:	2d00      	cmp	r5, #0
    3a50:	d005      	beq.n	3a5e <__swsetup_r+0x1a>
    3a52:	69ab      	ldr	r3, [r5, #24]
    3a54:	2b00      	cmp	r3, #0
    3a56:	d102      	bne.n	3a5e <__swsetup_r+0x1a>
    3a58:	0028      	movs	r0, r5
    3a5a:	f000 f961 	bl	3d20 <__sinit>
    3a5e:	4b31      	ldr	r3, [pc, #196]	; (3b24 <__swsetup_r+0xe0>)
    3a60:	429c      	cmp	r4, r3
    3a62:	d10f      	bne.n	3a84 <__swsetup_r+0x40>
    3a64:	686c      	ldr	r4, [r5, #4]
    3a66:	230c      	movs	r3, #12
    3a68:	5ee2      	ldrsh	r2, [r4, r3]
    3a6a:	b293      	uxth	r3, r2
    3a6c:	0719      	lsls	r1, r3, #28
    3a6e:	d42d      	bmi.n	3acc <__swsetup_r+0x88>
    3a70:	06d9      	lsls	r1, r3, #27
    3a72:	d411      	bmi.n	3a98 <__swsetup_r+0x54>
    3a74:	2309      	movs	r3, #9
    3a76:	2001      	movs	r0, #1
    3a78:	6033      	str	r3, [r6, #0]
    3a7a:	3337      	adds	r3, #55	; 0x37
    3a7c:	4313      	orrs	r3, r2
    3a7e:	81a3      	strh	r3, [r4, #12]
    3a80:	4240      	negs	r0, r0
    3a82:	bd70      	pop	{r4, r5, r6, pc}
    3a84:	4b28      	ldr	r3, [pc, #160]	; (3b28 <__swsetup_r+0xe4>)
    3a86:	429c      	cmp	r4, r3
    3a88:	d101      	bne.n	3a8e <__swsetup_r+0x4a>
    3a8a:	68ac      	ldr	r4, [r5, #8]
    3a8c:	e7eb      	b.n	3a66 <__swsetup_r+0x22>
    3a8e:	4b27      	ldr	r3, [pc, #156]	; (3b2c <__swsetup_r+0xe8>)
    3a90:	429c      	cmp	r4, r3
    3a92:	d1e8      	bne.n	3a66 <__swsetup_r+0x22>
    3a94:	68ec      	ldr	r4, [r5, #12]
    3a96:	e7e6      	b.n	3a66 <__swsetup_r+0x22>
    3a98:	075b      	lsls	r3, r3, #29
    3a9a:	d513      	bpl.n	3ac4 <__swsetup_r+0x80>
    3a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3a9e:	2900      	cmp	r1, #0
    3aa0:	d008      	beq.n	3ab4 <__swsetup_r+0x70>
    3aa2:	0023      	movs	r3, r4
    3aa4:	3344      	adds	r3, #68	; 0x44
    3aa6:	4299      	cmp	r1, r3
    3aa8:	d002      	beq.n	3ab0 <__swsetup_r+0x6c>
    3aaa:	0030      	movs	r0, r6
    3aac:	f000 fa44 	bl	3f38 <_free_r>
    3ab0:	2300      	movs	r3, #0
    3ab2:	6363      	str	r3, [r4, #52]	; 0x34
    3ab4:	2224      	movs	r2, #36	; 0x24
    3ab6:	89a3      	ldrh	r3, [r4, #12]
    3ab8:	4393      	bics	r3, r2
    3aba:	81a3      	strh	r3, [r4, #12]
    3abc:	2300      	movs	r3, #0
    3abe:	6063      	str	r3, [r4, #4]
    3ac0:	6923      	ldr	r3, [r4, #16]
    3ac2:	6023      	str	r3, [r4, #0]
    3ac4:	2308      	movs	r3, #8
    3ac6:	89a2      	ldrh	r2, [r4, #12]
    3ac8:	4313      	orrs	r3, r2
    3aca:	81a3      	strh	r3, [r4, #12]
    3acc:	6923      	ldr	r3, [r4, #16]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d10b      	bne.n	3aea <__swsetup_r+0xa6>
    3ad2:	21a0      	movs	r1, #160	; 0xa0
    3ad4:	2280      	movs	r2, #128	; 0x80
    3ad6:	89a3      	ldrh	r3, [r4, #12]
    3ad8:	0089      	lsls	r1, r1, #2
    3ada:	0092      	lsls	r2, r2, #2
    3adc:	400b      	ands	r3, r1
    3ade:	4293      	cmp	r3, r2
    3ae0:	d003      	beq.n	3aea <__swsetup_r+0xa6>
    3ae2:	0021      	movs	r1, r4
    3ae4:	0030      	movs	r0, r6
    3ae6:	f000 f9d9 	bl	3e9c <__smakebuf_r>
    3aea:	2301      	movs	r3, #1
    3aec:	89a2      	ldrh	r2, [r4, #12]
    3aee:	4013      	ands	r3, r2
    3af0:	d011      	beq.n	3b16 <__swsetup_r+0xd2>
    3af2:	2300      	movs	r3, #0
    3af4:	60a3      	str	r3, [r4, #8]
    3af6:	6963      	ldr	r3, [r4, #20]
    3af8:	425b      	negs	r3, r3
    3afa:	61a3      	str	r3, [r4, #24]
    3afc:	2000      	movs	r0, #0
    3afe:	6923      	ldr	r3, [r4, #16]
    3b00:	4283      	cmp	r3, r0
    3b02:	d1be      	bne.n	3a82 <__swsetup_r+0x3e>
    3b04:	230c      	movs	r3, #12
    3b06:	5ee2      	ldrsh	r2, [r4, r3]
    3b08:	0613      	lsls	r3, r2, #24
    3b0a:	d5ba      	bpl.n	3a82 <__swsetup_r+0x3e>
    3b0c:	2340      	movs	r3, #64	; 0x40
    3b0e:	4313      	orrs	r3, r2
    3b10:	81a3      	strh	r3, [r4, #12]
    3b12:	3801      	subs	r0, #1
    3b14:	e7b5      	b.n	3a82 <__swsetup_r+0x3e>
    3b16:	0792      	lsls	r2, r2, #30
    3b18:	d400      	bmi.n	3b1c <__swsetup_r+0xd8>
    3b1a:	6963      	ldr	r3, [r4, #20]
    3b1c:	60a3      	str	r3, [r4, #8]
    3b1e:	e7ed      	b.n	3afc <__swsetup_r+0xb8>
    3b20:	2000004c 	.word	0x2000004c
    3b24:	00004d90 	.word	0x00004d90
    3b28:	00004db0 	.word	0x00004db0
    3b2c:	00004d70 	.word	0x00004d70

00003b30 <__sflush_r>:
    3b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3b32:	898a      	ldrh	r2, [r1, #12]
    3b34:	0005      	movs	r5, r0
    3b36:	000c      	movs	r4, r1
    3b38:	0713      	lsls	r3, r2, #28
    3b3a:	d460      	bmi.n	3bfe <__sflush_r+0xce>
    3b3c:	684b      	ldr	r3, [r1, #4]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	dc04      	bgt.n	3b4c <__sflush_r+0x1c>
    3b42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b44:	2b00      	cmp	r3, #0
    3b46:	dc01      	bgt.n	3b4c <__sflush_r+0x1c>
    3b48:	2000      	movs	r0, #0
    3b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b4e:	2f00      	cmp	r7, #0
    3b50:	d0fa      	beq.n	3b48 <__sflush_r+0x18>
    3b52:	2300      	movs	r3, #0
    3b54:	682e      	ldr	r6, [r5, #0]
    3b56:	602b      	str	r3, [r5, #0]
    3b58:	2380      	movs	r3, #128	; 0x80
    3b5a:	015b      	lsls	r3, r3, #5
    3b5c:	401a      	ands	r2, r3
    3b5e:	d034      	beq.n	3bca <__sflush_r+0x9a>
    3b60:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3b62:	89a3      	ldrh	r3, [r4, #12]
    3b64:	075b      	lsls	r3, r3, #29
    3b66:	d506      	bpl.n	3b76 <__sflush_r+0x46>
    3b68:	6863      	ldr	r3, [r4, #4]
    3b6a:	1ac0      	subs	r0, r0, r3
    3b6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d001      	beq.n	3b76 <__sflush_r+0x46>
    3b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b74:	1ac0      	subs	r0, r0, r3
    3b76:	0002      	movs	r2, r0
    3b78:	6a21      	ldr	r1, [r4, #32]
    3b7a:	2300      	movs	r3, #0
    3b7c:	0028      	movs	r0, r5
    3b7e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3b80:	47b8      	blx	r7
    3b82:	89a1      	ldrh	r1, [r4, #12]
    3b84:	1c43      	adds	r3, r0, #1
    3b86:	d106      	bne.n	3b96 <__sflush_r+0x66>
    3b88:	682b      	ldr	r3, [r5, #0]
    3b8a:	2b1d      	cmp	r3, #29
    3b8c:	d831      	bhi.n	3bf2 <__sflush_r+0xc2>
    3b8e:	4a2c      	ldr	r2, [pc, #176]	; (3c40 <__sflush_r+0x110>)
    3b90:	40da      	lsrs	r2, r3
    3b92:	07d3      	lsls	r3, r2, #31
    3b94:	d52d      	bpl.n	3bf2 <__sflush_r+0xc2>
    3b96:	2300      	movs	r3, #0
    3b98:	6063      	str	r3, [r4, #4]
    3b9a:	6923      	ldr	r3, [r4, #16]
    3b9c:	6023      	str	r3, [r4, #0]
    3b9e:	04cb      	lsls	r3, r1, #19
    3ba0:	d505      	bpl.n	3bae <__sflush_r+0x7e>
    3ba2:	1c43      	adds	r3, r0, #1
    3ba4:	d102      	bne.n	3bac <__sflush_r+0x7c>
    3ba6:	682b      	ldr	r3, [r5, #0]
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d100      	bne.n	3bae <__sflush_r+0x7e>
    3bac:	6560      	str	r0, [r4, #84]	; 0x54
    3bae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3bb0:	602e      	str	r6, [r5, #0]
    3bb2:	2900      	cmp	r1, #0
    3bb4:	d0c8      	beq.n	3b48 <__sflush_r+0x18>
    3bb6:	0023      	movs	r3, r4
    3bb8:	3344      	adds	r3, #68	; 0x44
    3bba:	4299      	cmp	r1, r3
    3bbc:	d002      	beq.n	3bc4 <__sflush_r+0x94>
    3bbe:	0028      	movs	r0, r5
    3bc0:	f000 f9ba 	bl	3f38 <_free_r>
    3bc4:	2000      	movs	r0, #0
    3bc6:	6360      	str	r0, [r4, #52]	; 0x34
    3bc8:	e7bf      	b.n	3b4a <__sflush_r+0x1a>
    3bca:	2301      	movs	r3, #1
    3bcc:	6a21      	ldr	r1, [r4, #32]
    3bce:	0028      	movs	r0, r5
    3bd0:	47b8      	blx	r7
    3bd2:	1c43      	adds	r3, r0, #1
    3bd4:	d1c5      	bne.n	3b62 <__sflush_r+0x32>
    3bd6:	682b      	ldr	r3, [r5, #0]
    3bd8:	2b00      	cmp	r3, #0
    3bda:	d0c2      	beq.n	3b62 <__sflush_r+0x32>
    3bdc:	2b1d      	cmp	r3, #29
    3bde:	d001      	beq.n	3be4 <__sflush_r+0xb4>
    3be0:	2b16      	cmp	r3, #22
    3be2:	d101      	bne.n	3be8 <__sflush_r+0xb8>
    3be4:	602e      	str	r6, [r5, #0]
    3be6:	e7af      	b.n	3b48 <__sflush_r+0x18>
    3be8:	2340      	movs	r3, #64	; 0x40
    3bea:	89a2      	ldrh	r2, [r4, #12]
    3bec:	4313      	orrs	r3, r2
    3bee:	81a3      	strh	r3, [r4, #12]
    3bf0:	e7ab      	b.n	3b4a <__sflush_r+0x1a>
    3bf2:	2340      	movs	r3, #64	; 0x40
    3bf4:	430b      	orrs	r3, r1
    3bf6:	2001      	movs	r0, #1
    3bf8:	81a3      	strh	r3, [r4, #12]
    3bfa:	4240      	negs	r0, r0
    3bfc:	e7a5      	b.n	3b4a <__sflush_r+0x1a>
    3bfe:	690f      	ldr	r7, [r1, #16]
    3c00:	2f00      	cmp	r7, #0
    3c02:	d0a1      	beq.n	3b48 <__sflush_r+0x18>
    3c04:	680b      	ldr	r3, [r1, #0]
    3c06:	600f      	str	r7, [r1, #0]
    3c08:	1bdb      	subs	r3, r3, r7
    3c0a:	9301      	str	r3, [sp, #4]
    3c0c:	2300      	movs	r3, #0
    3c0e:	0792      	lsls	r2, r2, #30
    3c10:	d100      	bne.n	3c14 <__sflush_r+0xe4>
    3c12:	694b      	ldr	r3, [r1, #20]
    3c14:	60a3      	str	r3, [r4, #8]
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	dc00      	bgt.n	3c1e <__sflush_r+0xee>
    3c1c:	e794      	b.n	3b48 <__sflush_r+0x18>
    3c1e:	9b01      	ldr	r3, [sp, #4]
    3c20:	003a      	movs	r2, r7
    3c22:	6a21      	ldr	r1, [r4, #32]
    3c24:	0028      	movs	r0, r5
    3c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c28:	47b0      	blx	r6
    3c2a:	2800      	cmp	r0, #0
    3c2c:	dc03      	bgt.n	3c36 <__sflush_r+0x106>
    3c2e:	2340      	movs	r3, #64	; 0x40
    3c30:	89a2      	ldrh	r2, [r4, #12]
    3c32:	4313      	orrs	r3, r2
    3c34:	e7df      	b.n	3bf6 <__sflush_r+0xc6>
    3c36:	9b01      	ldr	r3, [sp, #4]
    3c38:	183f      	adds	r7, r7, r0
    3c3a:	1a1b      	subs	r3, r3, r0
    3c3c:	9301      	str	r3, [sp, #4]
    3c3e:	e7ea      	b.n	3c16 <__sflush_r+0xe6>
    3c40:	20400001 	.word	0x20400001

00003c44 <_fflush_r>:
    3c44:	690b      	ldr	r3, [r1, #16]
    3c46:	b570      	push	{r4, r5, r6, lr}
    3c48:	0005      	movs	r5, r0
    3c4a:	000c      	movs	r4, r1
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d101      	bne.n	3c54 <_fflush_r+0x10>
    3c50:	2000      	movs	r0, #0
    3c52:	bd70      	pop	{r4, r5, r6, pc}
    3c54:	2800      	cmp	r0, #0
    3c56:	d004      	beq.n	3c62 <_fflush_r+0x1e>
    3c58:	6983      	ldr	r3, [r0, #24]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d101      	bne.n	3c62 <_fflush_r+0x1e>
    3c5e:	f000 f85f 	bl	3d20 <__sinit>
    3c62:	4b0b      	ldr	r3, [pc, #44]	; (3c90 <_fflush_r+0x4c>)
    3c64:	429c      	cmp	r4, r3
    3c66:	d109      	bne.n	3c7c <_fflush_r+0x38>
    3c68:	686c      	ldr	r4, [r5, #4]
    3c6a:	220c      	movs	r2, #12
    3c6c:	5ea3      	ldrsh	r3, [r4, r2]
    3c6e:	2b00      	cmp	r3, #0
    3c70:	d0ee      	beq.n	3c50 <_fflush_r+0xc>
    3c72:	0021      	movs	r1, r4
    3c74:	0028      	movs	r0, r5
    3c76:	f7ff ff5b 	bl	3b30 <__sflush_r>
    3c7a:	e7ea      	b.n	3c52 <_fflush_r+0xe>
    3c7c:	4b05      	ldr	r3, [pc, #20]	; (3c94 <_fflush_r+0x50>)
    3c7e:	429c      	cmp	r4, r3
    3c80:	d101      	bne.n	3c86 <_fflush_r+0x42>
    3c82:	68ac      	ldr	r4, [r5, #8]
    3c84:	e7f1      	b.n	3c6a <_fflush_r+0x26>
    3c86:	4b04      	ldr	r3, [pc, #16]	; (3c98 <_fflush_r+0x54>)
    3c88:	429c      	cmp	r4, r3
    3c8a:	d1ee      	bne.n	3c6a <_fflush_r+0x26>
    3c8c:	68ec      	ldr	r4, [r5, #12]
    3c8e:	e7ec      	b.n	3c6a <_fflush_r+0x26>
    3c90:	00004d90 	.word	0x00004d90
    3c94:	00004db0 	.word	0x00004db0
    3c98:	00004d70 	.word	0x00004d70

00003c9c <_cleanup_r>:
    3c9c:	b510      	push	{r4, lr}
    3c9e:	4902      	ldr	r1, [pc, #8]	; (3ca8 <_cleanup_r+0xc>)
    3ca0:	f000 f8b2 	bl	3e08 <_fwalk_reent>
    3ca4:	bd10      	pop	{r4, pc}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	00003c45 	.word	0x00003c45

00003cac <std.isra.0>:
    3cac:	2300      	movs	r3, #0
    3cae:	b510      	push	{r4, lr}
    3cb0:	0004      	movs	r4, r0
    3cb2:	6003      	str	r3, [r0, #0]
    3cb4:	6043      	str	r3, [r0, #4]
    3cb6:	6083      	str	r3, [r0, #8]
    3cb8:	8181      	strh	r1, [r0, #12]
    3cba:	6643      	str	r3, [r0, #100]	; 0x64
    3cbc:	81c2      	strh	r2, [r0, #14]
    3cbe:	6103      	str	r3, [r0, #16]
    3cc0:	6143      	str	r3, [r0, #20]
    3cc2:	6183      	str	r3, [r0, #24]
    3cc4:	0019      	movs	r1, r3
    3cc6:	2208      	movs	r2, #8
    3cc8:	305c      	adds	r0, #92	; 0x5c
    3cca:	f7ff fd0a 	bl	36e2 <memset>
    3cce:	4b05      	ldr	r3, [pc, #20]	; (3ce4 <std.isra.0+0x38>)
    3cd0:	6224      	str	r4, [r4, #32]
    3cd2:	6263      	str	r3, [r4, #36]	; 0x24
    3cd4:	4b04      	ldr	r3, [pc, #16]	; (3ce8 <std.isra.0+0x3c>)
    3cd6:	62a3      	str	r3, [r4, #40]	; 0x28
    3cd8:	4b04      	ldr	r3, [pc, #16]	; (3cec <std.isra.0+0x40>)
    3cda:	62e3      	str	r3, [r4, #44]	; 0x2c
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <std.isra.0+0x44>)
    3cde:	6323      	str	r3, [r4, #48]	; 0x30
    3ce0:	bd10      	pop	{r4, pc}
    3ce2:	46c0      	nop			; (mov r8, r8)
    3ce4:	00004689 	.word	0x00004689
    3ce8:	000046b1 	.word	0x000046b1
    3cec:	000046e9 	.word	0x000046e9
    3cf0:	00004715 	.word	0x00004715

00003cf4 <__sfmoreglue>:
    3cf4:	b570      	push	{r4, r5, r6, lr}
    3cf6:	2568      	movs	r5, #104	; 0x68
    3cf8:	1e4a      	subs	r2, r1, #1
    3cfa:	4355      	muls	r5, r2
    3cfc:	000e      	movs	r6, r1
    3cfe:	0029      	movs	r1, r5
    3d00:	3174      	adds	r1, #116	; 0x74
    3d02:	f000 f963 	bl	3fcc <_malloc_r>
    3d06:	1e04      	subs	r4, r0, #0
    3d08:	d008      	beq.n	3d1c <__sfmoreglue+0x28>
    3d0a:	2100      	movs	r1, #0
    3d0c:	002a      	movs	r2, r5
    3d0e:	6001      	str	r1, [r0, #0]
    3d10:	6046      	str	r6, [r0, #4]
    3d12:	300c      	adds	r0, #12
    3d14:	60a0      	str	r0, [r4, #8]
    3d16:	3268      	adds	r2, #104	; 0x68
    3d18:	f7ff fce3 	bl	36e2 <memset>
    3d1c:	0020      	movs	r0, r4
    3d1e:	bd70      	pop	{r4, r5, r6, pc}

00003d20 <__sinit>:
    3d20:	6983      	ldr	r3, [r0, #24]
    3d22:	b513      	push	{r0, r1, r4, lr}
    3d24:	0004      	movs	r4, r0
    3d26:	2b00      	cmp	r3, #0
    3d28:	d128      	bne.n	3d7c <__sinit+0x5c>
    3d2a:	6483      	str	r3, [r0, #72]	; 0x48
    3d2c:	64c3      	str	r3, [r0, #76]	; 0x4c
    3d2e:	6503      	str	r3, [r0, #80]	; 0x50
    3d30:	4b13      	ldr	r3, [pc, #76]	; (3d80 <__sinit+0x60>)
    3d32:	4a14      	ldr	r2, [pc, #80]	; (3d84 <__sinit+0x64>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	6282      	str	r2, [r0, #40]	; 0x28
    3d38:	9301      	str	r3, [sp, #4]
    3d3a:	4298      	cmp	r0, r3
    3d3c:	d101      	bne.n	3d42 <__sinit+0x22>
    3d3e:	2301      	movs	r3, #1
    3d40:	6183      	str	r3, [r0, #24]
    3d42:	0020      	movs	r0, r4
    3d44:	f000 f820 	bl	3d88 <__sfp>
    3d48:	6060      	str	r0, [r4, #4]
    3d4a:	0020      	movs	r0, r4
    3d4c:	f000 f81c 	bl	3d88 <__sfp>
    3d50:	60a0      	str	r0, [r4, #8]
    3d52:	0020      	movs	r0, r4
    3d54:	f000 f818 	bl	3d88 <__sfp>
    3d58:	2200      	movs	r2, #0
    3d5a:	60e0      	str	r0, [r4, #12]
    3d5c:	2104      	movs	r1, #4
    3d5e:	6860      	ldr	r0, [r4, #4]
    3d60:	f7ff ffa4 	bl	3cac <std.isra.0>
    3d64:	2201      	movs	r2, #1
    3d66:	2109      	movs	r1, #9
    3d68:	68a0      	ldr	r0, [r4, #8]
    3d6a:	f7ff ff9f 	bl	3cac <std.isra.0>
    3d6e:	2202      	movs	r2, #2
    3d70:	2112      	movs	r1, #18
    3d72:	68e0      	ldr	r0, [r4, #12]
    3d74:	f7ff ff9a 	bl	3cac <std.isra.0>
    3d78:	2301      	movs	r3, #1
    3d7a:	61a3      	str	r3, [r4, #24]
    3d7c:	bd13      	pop	{r0, r1, r4, pc}
    3d7e:	46c0      	nop			; (mov r8, r8)
    3d80:	00004d6c 	.word	0x00004d6c
    3d84:	00003c9d 	.word	0x00003c9d

00003d88 <__sfp>:
    3d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d8a:	4b1e      	ldr	r3, [pc, #120]	; (3e04 <__sfp+0x7c>)
    3d8c:	0007      	movs	r7, r0
    3d8e:	681e      	ldr	r6, [r3, #0]
    3d90:	69b3      	ldr	r3, [r6, #24]
    3d92:	2b00      	cmp	r3, #0
    3d94:	d102      	bne.n	3d9c <__sfp+0x14>
    3d96:	0030      	movs	r0, r6
    3d98:	f7ff ffc2 	bl	3d20 <__sinit>
    3d9c:	3648      	adds	r6, #72	; 0x48
    3d9e:	68b4      	ldr	r4, [r6, #8]
    3da0:	6873      	ldr	r3, [r6, #4]
    3da2:	3b01      	subs	r3, #1
    3da4:	d504      	bpl.n	3db0 <__sfp+0x28>
    3da6:	6833      	ldr	r3, [r6, #0]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d007      	beq.n	3dbc <__sfp+0x34>
    3dac:	6836      	ldr	r6, [r6, #0]
    3dae:	e7f6      	b.n	3d9e <__sfp+0x16>
    3db0:	220c      	movs	r2, #12
    3db2:	5ea5      	ldrsh	r5, [r4, r2]
    3db4:	2d00      	cmp	r5, #0
    3db6:	d00d      	beq.n	3dd4 <__sfp+0x4c>
    3db8:	3468      	adds	r4, #104	; 0x68
    3dba:	e7f2      	b.n	3da2 <__sfp+0x1a>
    3dbc:	2104      	movs	r1, #4
    3dbe:	0038      	movs	r0, r7
    3dc0:	f7ff ff98 	bl	3cf4 <__sfmoreglue>
    3dc4:	6030      	str	r0, [r6, #0]
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d1f0      	bne.n	3dac <__sfp+0x24>
    3dca:	230c      	movs	r3, #12
    3dcc:	0004      	movs	r4, r0
    3dce:	603b      	str	r3, [r7, #0]
    3dd0:	0020      	movs	r0, r4
    3dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dd4:	2301      	movs	r3, #1
    3dd6:	0020      	movs	r0, r4
    3dd8:	425b      	negs	r3, r3
    3dda:	81e3      	strh	r3, [r4, #14]
    3ddc:	3302      	adds	r3, #2
    3dde:	81a3      	strh	r3, [r4, #12]
    3de0:	6665      	str	r5, [r4, #100]	; 0x64
    3de2:	6025      	str	r5, [r4, #0]
    3de4:	60a5      	str	r5, [r4, #8]
    3de6:	6065      	str	r5, [r4, #4]
    3de8:	6125      	str	r5, [r4, #16]
    3dea:	6165      	str	r5, [r4, #20]
    3dec:	61a5      	str	r5, [r4, #24]
    3dee:	2208      	movs	r2, #8
    3df0:	0029      	movs	r1, r5
    3df2:	305c      	adds	r0, #92	; 0x5c
    3df4:	f7ff fc75 	bl	36e2 <memset>
    3df8:	6365      	str	r5, [r4, #52]	; 0x34
    3dfa:	63a5      	str	r5, [r4, #56]	; 0x38
    3dfc:	64a5      	str	r5, [r4, #72]	; 0x48
    3dfe:	64e5      	str	r5, [r4, #76]	; 0x4c
    3e00:	e7e6      	b.n	3dd0 <__sfp+0x48>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	00004d6c 	.word	0x00004d6c

00003e08 <_fwalk_reent>:
    3e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e0a:	0004      	movs	r4, r0
    3e0c:	0007      	movs	r7, r0
    3e0e:	2600      	movs	r6, #0
    3e10:	9101      	str	r1, [sp, #4]
    3e12:	3448      	adds	r4, #72	; 0x48
    3e14:	2c00      	cmp	r4, #0
    3e16:	d101      	bne.n	3e1c <_fwalk_reent+0x14>
    3e18:	0030      	movs	r0, r6
    3e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3e1c:	6863      	ldr	r3, [r4, #4]
    3e1e:	68a5      	ldr	r5, [r4, #8]
    3e20:	9300      	str	r3, [sp, #0]
    3e22:	9b00      	ldr	r3, [sp, #0]
    3e24:	3b01      	subs	r3, #1
    3e26:	9300      	str	r3, [sp, #0]
    3e28:	d501      	bpl.n	3e2e <_fwalk_reent+0x26>
    3e2a:	6824      	ldr	r4, [r4, #0]
    3e2c:	e7f2      	b.n	3e14 <_fwalk_reent+0xc>
    3e2e:	89ab      	ldrh	r3, [r5, #12]
    3e30:	2b01      	cmp	r3, #1
    3e32:	d908      	bls.n	3e46 <_fwalk_reent+0x3e>
    3e34:	220e      	movs	r2, #14
    3e36:	5eab      	ldrsh	r3, [r5, r2]
    3e38:	3301      	adds	r3, #1
    3e3a:	d004      	beq.n	3e46 <_fwalk_reent+0x3e>
    3e3c:	0029      	movs	r1, r5
    3e3e:	0038      	movs	r0, r7
    3e40:	9b01      	ldr	r3, [sp, #4]
    3e42:	4798      	blx	r3
    3e44:	4306      	orrs	r6, r0
    3e46:	3568      	adds	r5, #104	; 0x68
    3e48:	e7eb      	b.n	3e22 <_fwalk_reent+0x1a>
	...

00003e4c <__swhatbuf_r>:
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	000e      	movs	r6, r1
    3e50:	001d      	movs	r5, r3
    3e52:	230e      	movs	r3, #14
    3e54:	5ec9      	ldrsh	r1, [r1, r3]
    3e56:	b090      	sub	sp, #64	; 0x40
    3e58:	0014      	movs	r4, r2
    3e5a:	2900      	cmp	r1, #0
    3e5c:	da07      	bge.n	3e6e <__swhatbuf_r+0x22>
    3e5e:	2300      	movs	r3, #0
    3e60:	602b      	str	r3, [r5, #0]
    3e62:	89b3      	ldrh	r3, [r6, #12]
    3e64:	061b      	lsls	r3, r3, #24
    3e66:	d411      	bmi.n	3e8c <__swhatbuf_r+0x40>
    3e68:	2380      	movs	r3, #128	; 0x80
    3e6a:	00db      	lsls	r3, r3, #3
    3e6c:	e00f      	b.n	3e8e <__swhatbuf_r+0x42>
    3e6e:	aa01      	add	r2, sp, #4
    3e70:	f000 fc7c 	bl	476c <_fstat_r>
    3e74:	2800      	cmp	r0, #0
    3e76:	dbf2      	blt.n	3e5e <__swhatbuf_r+0x12>
    3e78:	22f0      	movs	r2, #240	; 0xf0
    3e7a:	9b02      	ldr	r3, [sp, #8]
    3e7c:	0212      	lsls	r2, r2, #8
    3e7e:	4013      	ands	r3, r2
    3e80:	4a05      	ldr	r2, [pc, #20]	; (3e98 <__swhatbuf_r+0x4c>)
    3e82:	189b      	adds	r3, r3, r2
    3e84:	425a      	negs	r2, r3
    3e86:	4153      	adcs	r3, r2
    3e88:	602b      	str	r3, [r5, #0]
    3e8a:	e7ed      	b.n	3e68 <__swhatbuf_r+0x1c>
    3e8c:	2340      	movs	r3, #64	; 0x40
    3e8e:	2000      	movs	r0, #0
    3e90:	6023      	str	r3, [r4, #0]
    3e92:	b010      	add	sp, #64	; 0x40
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	ffffe000 	.word	0xffffe000

00003e9c <__smakebuf_r>:
    3e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e9e:	2602      	movs	r6, #2
    3ea0:	898b      	ldrh	r3, [r1, #12]
    3ea2:	0005      	movs	r5, r0
    3ea4:	000c      	movs	r4, r1
    3ea6:	4233      	tst	r3, r6
    3ea8:	d006      	beq.n	3eb8 <__smakebuf_r+0x1c>
    3eaa:	0023      	movs	r3, r4
    3eac:	3347      	adds	r3, #71	; 0x47
    3eae:	6023      	str	r3, [r4, #0]
    3eb0:	6123      	str	r3, [r4, #16]
    3eb2:	2301      	movs	r3, #1
    3eb4:	6163      	str	r3, [r4, #20]
    3eb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3eb8:	ab01      	add	r3, sp, #4
    3eba:	466a      	mov	r2, sp
    3ebc:	f7ff ffc6 	bl	3e4c <__swhatbuf_r>
    3ec0:	9900      	ldr	r1, [sp, #0]
    3ec2:	0007      	movs	r7, r0
    3ec4:	0028      	movs	r0, r5
    3ec6:	f000 f881 	bl	3fcc <_malloc_r>
    3eca:	2800      	cmp	r0, #0
    3ecc:	d108      	bne.n	3ee0 <__smakebuf_r+0x44>
    3ece:	220c      	movs	r2, #12
    3ed0:	5ea3      	ldrsh	r3, [r4, r2]
    3ed2:	059a      	lsls	r2, r3, #22
    3ed4:	d4ef      	bmi.n	3eb6 <__smakebuf_r+0x1a>
    3ed6:	2203      	movs	r2, #3
    3ed8:	4393      	bics	r3, r2
    3eda:	431e      	orrs	r6, r3
    3edc:	81a6      	strh	r6, [r4, #12]
    3ede:	e7e4      	b.n	3eaa <__smakebuf_r+0xe>
    3ee0:	4b0f      	ldr	r3, [pc, #60]	; (3f20 <__smakebuf_r+0x84>)
    3ee2:	62ab      	str	r3, [r5, #40]	; 0x28
    3ee4:	2380      	movs	r3, #128	; 0x80
    3ee6:	89a2      	ldrh	r2, [r4, #12]
    3ee8:	6020      	str	r0, [r4, #0]
    3eea:	4313      	orrs	r3, r2
    3eec:	81a3      	strh	r3, [r4, #12]
    3eee:	9b00      	ldr	r3, [sp, #0]
    3ef0:	6120      	str	r0, [r4, #16]
    3ef2:	6163      	str	r3, [r4, #20]
    3ef4:	9b01      	ldr	r3, [sp, #4]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d00d      	beq.n	3f16 <__smakebuf_r+0x7a>
    3efa:	230e      	movs	r3, #14
    3efc:	5ee1      	ldrsh	r1, [r4, r3]
    3efe:	0028      	movs	r0, r5
    3f00:	f000 fc46 	bl	4790 <_isatty_r>
    3f04:	2800      	cmp	r0, #0
    3f06:	d006      	beq.n	3f16 <__smakebuf_r+0x7a>
    3f08:	2203      	movs	r2, #3
    3f0a:	89a3      	ldrh	r3, [r4, #12]
    3f0c:	4393      	bics	r3, r2
    3f0e:	001a      	movs	r2, r3
    3f10:	2301      	movs	r3, #1
    3f12:	4313      	orrs	r3, r2
    3f14:	81a3      	strh	r3, [r4, #12]
    3f16:	89a0      	ldrh	r0, [r4, #12]
    3f18:	4338      	orrs	r0, r7
    3f1a:	81a0      	strh	r0, [r4, #12]
    3f1c:	e7cb      	b.n	3eb6 <__smakebuf_r+0x1a>
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	00003c9d 	.word	0x00003c9d

00003f24 <malloc>:
    3f24:	b510      	push	{r4, lr}
    3f26:	4b03      	ldr	r3, [pc, #12]	; (3f34 <malloc+0x10>)
    3f28:	0001      	movs	r1, r0
    3f2a:	6818      	ldr	r0, [r3, #0]
    3f2c:	f000 f84e 	bl	3fcc <_malloc_r>
    3f30:	bd10      	pop	{r4, pc}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	2000004c 	.word	0x2000004c

00003f38 <_free_r>:
    3f38:	b570      	push	{r4, r5, r6, lr}
    3f3a:	0005      	movs	r5, r0
    3f3c:	2900      	cmp	r1, #0
    3f3e:	d010      	beq.n	3f62 <_free_r+0x2a>
    3f40:	1f0c      	subs	r4, r1, #4
    3f42:	6823      	ldr	r3, [r4, #0]
    3f44:	2b00      	cmp	r3, #0
    3f46:	da00      	bge.n	3f4a <_free_r+0x12>
    3f48:	18e4      	adds	r4, r4, r3
    3f4a:	0028      	movs	r0, r5
    3f4c:	f000 fc63 	bl	4816 <__malloc_lock>
    3f50:	4a1d      	ldr	r2, [pc, #116]	; (3fc8 <_free_r+0x90>)
    3f52:	6813      	ldr	r3, [r2, #0]
    3f54:	2b00      	cmp	r3, #0
    3f56:	d105      	bne.n	3f64 <_free_r+0x2c>
    3f58:	6063      	str	r3, [r4, #4]
    3f5a:	6014      	str	r4, [r2, #0]
    3f5c:	0028      	movs	r0, r5
    3f5e:	f000 fc5b 	bl	4818 <__malloc_unlock>
    3f62:	bd70      	pop	{r4, r5, r6, pc}
    3f64:	42a3      	cmp	r3, r4
    3f66:	d909      	bls.n	3f7c <_free_r+0x44>
    3f68:	6821      	ldr	r1, [r4, #0]
    3f6a:	1860      	adds	r0, r4, r1
    3f6c:	4283      	cmp	r3, r0
    3f6e:	d1f3      	bne.n	3f58 <_free_r+0x20>
    3f70:	6818      	ldr	r0, [r3, #0]
    3f72:	685b      	ldr	r3, [r3, #4]
    3f74:	1841      	adds	r1, r0, r1
    3f76:	6021      	str	r1, [r4, #0]
    3f78:	e7ee      	b.n	3f58 <_free_r+0x20>
    3f7a:	0013      	movs	r3, r2
    3f7c:	685a      	ldr	r2, [r3, #4]
    3f7e:	2a00      	cmp	r2, #0
    3f80:	d001      	beq.n	3f86 <_free_r+0x4e>
    3f82:	42a2      	cmp	r2, r4
    3f84:	d9f9      	bls.n	3f7a <_free_r+0x42>
    3f86:	6819      	ldr	r1, [r3, #0]
    3f88:	1858      	adds	r0, r3, r1
    3f8a:	42a0      	cmp	r0, r4
    3f8c:	d10b      	bne.n	3fa6 <_free_r+0x6e>
    3f8e:	6820      	ldr	r0, [r4, #0]
    3f90:	1809      	adds	r1, r1, r0
    3f92:	1858      	adds	r0, r3, r1
    3f94:	6019      	str	r1, [r3, #0]
    3f96:	4282      	cmp	r2, r0
    3f98:	d1e0      	bne.n	3f5c <_free_r+0x24>
    3f9a:	6810      	ldr	r0, [r2, #0]
    3f9c:	6852      	ldr	r2, [r2, #4]
    3f9e:	1841      	adds	r1, r0, r1
    3fa0:	6019      	str	r1, [r3, #0]
    3fa2:	605a      	str	r2, [r3, #4]
    3fa4:	e7da      	b.n	3f5c <_free_r+0x24>
    3fa6:	42a0      	cmp	r0, r4
    3fa8:	d902      	bls.n	3fb0 <_free_r+0x78>
    3faa:	230c      	movs	r3, #12
    3fac:	602b      	str	r3, [r5, #0]
    3fae:	e7d5      	b.n	3f5c <_free_r+0x24>
    3fb0:	6821      	ldr	r1, [r4, #0]
    3fb2:	1860      	adds	r0, r4, r1
    3fb4:	4282      	cmp	r2, r0
    3fb6:	d103      	bne.n	3fc0 <_free_r+0x88>
    3fb8:	6810      	ldr	r0, [r2, #0]
    3fba:	6852      	ldr	r2, [r2, #4]
    3fbc:	1841      	adds	r1, r0, r1
    3fbe:	6021      	str	r1, [r4, #0]
    3fc0:	6062      	str	r2, [r4, #4]
    3fc2:	605c      	str	r4, [r3, #4]
    3fc4:	e7ca      	b.n	3f5c <_free_r+0x24>
    3fc6:	46c0      	nop			; (mov r8, r8)
    3fc8:	20000390 	.word	0x20000390

00003fcc <_malloc_r>:
    3fcc:	2303      	movs	r3, #3
    3fce:	b570      	push	{r4, r5, r6, lr}
    3fd0:	1ccd      	adds	r5, r1, #3
    3fd2:	439d      	bics	r5, r3
    3fd4:	3508      	adds	r5, #8
    3fd6:	0006      	movs	r6, r0
    3fd8:	2d0c      	cmp	r5, #12
    3fda:	d21e      	bcs.n	401a <_malloc_r+0x4e>
    3fdc:	250c      	movs	r5, #12
    3fde:	42a9      	cmp	r1, r5
    3fe0:	d81d      	bhi.n	401e <_malloc_r+0x52>
    3fe2:	0030      	movs	r0, r6
    3fe4:	f000 fc17 	bl	4816 <__malloc_lock>
    3fe8:	4a25      	ldr	r2, [pc, #148]	; (4080 <_malloc_r+0xb4>)
    3fea:	6814      	ldr	r4, [r2, #0]
    3fec:	0021      	movs	r1, r4
    3fee:	2900      	cmp	r1, #0
    3ff0:	d119      	bne.n	4026 <_malloc_r+0x5a>
    3ff2:	4c24      	ldr	r4, [pc, #144]	; (4084 <_malloc_r+0xb8>)
    3ff4:	6823      	ldr	r3, [r4, #0]
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	d103      	bne.n	4002 <_malloc_r+0x36>
    3ffa:	0030      	movs	r0, r6
    3ffc:	f000 fb32 	bl	4664 <_sbrk_r>
    4000:	6020      	str	r0, [r4, #0]
    4002:	0029      	movs	r1, r5
    4004:	0030      	movs	r0, r6
    4006:	f000 fb2d 	bl	4664 <_sbrk_r>
    400a:	1c43      	adds	r3, r0, #1
    400c:	d12c      	bne.n	4068 <_malloc_r+0x9c>
    400e:	230c      	movs	r3, #12
    4010:	0030      	movs	r0, r6
    4012:	6033      	str	r3, [r6, #0]
    4014:	f000 fc00 	bl	4818 <__malloc_unlock>
    4018:	e003      	b.n	4022 <_malloc_r+0x56>
    401a:	2d00      	cmp	r5, #0
    401c:	dadf      	bge.n	3fde <_malloc_r+0x12>
    401e:	230c      	movs	r3, #12
    4020:	6033      	str	r3, [r6, #0]
    4022:	2000      	movs	r0, #0
    4024:	bd70      	pop	{r4, r5, r6, pc}
    4026:	680b      	ldr	r3, [r1, #0]
    4028:	1b5b      	subs	r3, r3, r5
    402a:	d41a      	bmi.n	4062 <_malloc_r+0x96>
    402c:	2b0b      	cmp	r3, #11
    402e:	d903      	bls.n	4038 <_malloc_r+0x6c>
    4030:	600b      	str	r3, [r1, #0]
    4032:	18cc      	adds	r4, r1, r3
    4034:	6025      	str	r5, [r4, #0]
    4036:	e003      	b.n	4040 <_malloc_r+0x74>
    4038:	428c      	cmp	r4, r1
    403a:	d10e      	bne.n	405a <_malloc_r+0x8e>
    403c:	6863      	ldr	r3, [r4, #4]
    403e:	6013      	str	r3, [r2, #0]
    4040:	0030      	movs	r0, r6
    4042:	f000 fbe9 	bl	4818 <__malloc_unlock>
    4046:	0020      	movs	r0, r4
    4048:	2207      	movs	r2, #7
    404a:	300b      	adds	r0, #11
    404c:	1d23      	adds	r3, r4, #4
    404e:	4390      	bics	r0, r2
    4050:	1ac3      	subs	r3, r0, r3
    4052:	d0e7      	beq.n	4024 <_malloc_r+0x58>
    4054:	425a      	negs	r2, r3
    4056:	50e2      	str	r2, [r4, r3]
    4058:	e7e4      	b.n	4024 <_malloc_r+0x58>
    405a:	684b      	ldr	r3, [r1, #4]
    405c:	6063      	str	r3, [r4, #4]
    405e:	000c      	movs	r4, r1
    4060:	e7ee      	b.n	4040 <_malloc_r+0x74>
    4062:	000c      	movs	r4, r1
    4064:	6849      	ldr	r1, [r1, #4]
    4066:	e7c2      	b.n	3fee <_malloc_r+0x22>
    4068:	2303      	movs	r3, #3
    406a:	1cc4      	adds	r4, r0, #3
    406c:	439c      	bics	r4, r3
    406e:	42a0      	cmp	r0, r4
    4070:	d0e0      	beq.n	4034 <_malloc_r+0x68>
    4072:	1a21      	subs	r1, r4, r0
    4074:	0030      	movs	r0, r6
    4076:	f000 faf5 	bl	4664 <_sbrk_r>
    407a:	1c43      	adds	r3, r0, #1
    407c:	d1da      	bne.n	4034 <_malloc_r+0x68>
    407e:	e7c6      	b.n	400e <_malloc_r+0x42>
    4080:	20000390 	.word	0x20000390
    4084:	20000394 	.word	0x20000394

00004088 <__ssputs_r>:
    4088:	b5f0      	push	{r4, r5, r6, r7, lr}
    408a:	688e      	ldr	r6, [r1, #8]
    408c:	b085      	sub	sp, #20
    408e:	0007      	movs	r7, r0
    4090:	000c      	movs	r4, r1
    4092:	9203      	str	r2, [sp, #12]
    4094:	9301      	str	r3, [sp, #4]
    4096:	429e      	cmp	r6, r3
    4098:	d839      	bhi.n	410e <__ssputs_r+0x86>
    409a:	2390      	movs	r3, #144	; 0x90
    409c:	898a      	ldrh	r2, [r1, #12]
    409e:	00db      	lsls	r3, r3, #3
    40a0:	421a      	tst	r2, r3
    40a2:	d034      	beq.n	410e <__ssputs_r+0x86>
    40a4:	2503      	movs	r5, #3
    40a6:	6909      	ldr	r1, [r1, #16]
    40a8:	6823      	ldr	r3, [r4, #0]
    40aa:	1a5b      	subs	r3, r3, r1
    40ac:	9302      	str	r3, [sp, #8]
    40ae:	6963      	ldr	r3, [r4, #20]
    40b0:	9802      	ldr	r0, [sp, #8]
    40b2:	435d      	muls	r5, r3
    40b4:	0feb      	lsrs	r3, r5, #31
    40b6:	195d      	adds	r5, r3, r5
    40b8:	9b01      	ldr	r3, [sp, #4]
    40ba:	106d      	asrs	r5, r5, #1
    40bc:	3301      	adds	r3, #1
    40be:	181b      	adds	r3, r3, r0
    40c0:	42ab      	cmp	r3, r5
    40c2:	d900      	bls.n	40c6 <__ssputs_r+0x3e>
    40c4:	001d      	movs	r5, r3
    40c6:	0553      	lsls	r3, r2, #21
    40c8:	d532      	bpl.n	4130 <__ssputs_r+0xa8>
    40ca:	0029      	movs	r1, r5
    40cc:	0038      	movs	r0, r7
    40ce:	f7ff ff7d 	bl	3fcc <_malloc_r>
    40d2:	1e06      	subs	r6, r0, #0
    40d4:	d109      	bne.n	40ea <__ssputs_r+0x62>
    40d6:	230c      	movs	r3, #12
    40d8:	603b      	str	r3, [r7, #0]
    40da:	2340      	movs	r3, #64	; 0x40
    40dc:	2001      	movs	r0, #1
    40de:	89a2      	ldrh	r2, [r4, #12]
    40e0:	4240      	negs	r0, r0
    40e2:	4313      	orrs	r3, r2
    40e4:	81a3      	strh	r3, [r4, #12]
    40e6:	b005      	add	sp, #20
    40e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40ea:	9a02      	ldr	r2, [sp, #8]
    40ec:	6921      	ldr	r1, [r4, #16]
    40ee:	f7ff faef 	bl	36d0 <memcpy>
    40f2:	89a3      	ldrh	r3, [r4, #12]
    40f4:	4a14      	ldr	r2, [pc, #80]	; (4148 <__ssputs_r+0xc0>)
    40f6:	401a      	ands	r2, r3
    40f8:	2380      	movs	r3, #128	; 0x80
    40fa:	4313      	orrs	r3, r2
    40fc:	81a3      	strh	r3, [r4, #12]
    40fe:	9b02      	ldr	r3, [sp, #8]
    4100:	6126      	str	r6, [r4, #16]
    4102:	18f6      	adds	r6, r6, r3
    4104:	6026      	str	r6, [r4, #0]
    4106:	6165      	str	r5, [r4, #20]
    4108:	9e01      	ldr	r6, [sp, #4]
    410a:	1aed      	subs	r5, r5, r3
    410c:	60a5      	str	r5, [r4, #8]
    410e:	9b01      	ldr	r3, [sp, #4]
    4110:	42b3      	cmp	r3, r6
    4112:	d200      	bcs.n	4116 <__ssputs_r+0x8e>
    4114:	001e      	movs	r6, r3
    4116:	0032      	movs	r2, r6
    4118:	9903      	ldr	r1, [sp, #12]
    411a:	6820      	ldr	r0, [r4, #0]
    411c:	f000 fb69 	bl	47f2 <memmove>
    4120:	68a3      	ldr	r3, [r4, #8]
    4122:	2000      	movs	r0, #0
    4124:	1b9b      	subs	r3, r3, r6
    4126:	60a3      	str	r3, [r4, #8]
    4128:	6823      	ldr	r3, [r4, #0]
    412a:	199e      	adds	r6, r3, r6
    412c:	6026      	str	r6, [r4, #0]
    412e:	e7da      	b.n	40e6 <__ssputs_r+0x5e>
    4130:	002a      	movs	r2, r5
    4132:	0038      	movs	r0, r7
    4134:	f000 fb71 	bl	481a <_realloc_r>
    4138:	1e06      	subs	r6, r0, #0
    413a:	d1e0      	bne.n	40fe <__ssputs_r+0x76>
    413c:	6921      	ldr	r1, [r4, #16]
    413e:	0038      	movs	r0, r7
    4140:	f7ff fefa 	bl	3f38 <_free_r>
    4144:	e7c7      	b.n	40d6 <__ssputs_r+0x4e>
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	fffffb7f 	.word	0xfffffb7f

0000414c <_svfiprintf_r>:
    414c:	b5f0      	push	{r4, r5, r6, r7, lr}
    414e:	b09f      	sub	sp, #124	; 0x7c
    4150:	9002      	str	r0, [sp, #8]
    4152:	9305      	str	r3, [sp, #20]
    4154:	898b      	ldrh	r3, [r1, #12]
    4156:	000f      	movs	r7, r1
    4158:	0016      	movs	r6, r2
    415a:	061b      	lsls	r3, r3, #24
    415c:	d511      	bpl.n	4182 <_svfiprintf_r+0x36>
    415e:	690b      	ldr	r3, [r1, #16]
    4160:	2b00      	cmp	r3, #0
    4162:	d10e      	bne.n	4182 <_svfiprintf_r+0x36>
    4164:	2140      	movs	r1, #64	; 0x40
    4166:	f7ff ff31 	bl	3fcc <_malloc_r>
    416a:	6038      	str	r0, [r7, #0]
    416c:	6138      	str	r0, [r7, #16]
    416e:	2800      	cmp	r0, #0
    4170:	d105      	bne.n	417e <_svfiprintf_r+0x32>
    4172:	230c      	movs	r3, #12
    4174:	9a02      	ldr	r2, [sp, #8]
    4176:	3801      	subs	r0, #1
    4178:	6013      	str	r3, [r2, #0]
    417a:	b01f      	add	sp, #124	; 0x7c
    417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    417e:	2340      	movs	r3, #64	; 0x40
    4180:	617b      	str	r3, [r7, #20]
    4182:	2300      	movs	r3, #0
    4184:	ad06      	add	r5, sp, #24
    4186:	616b      	str	r3, [r5, #20]
    4188:	3320      	adds	r3, #32
    418a:	766b      	strb	r3, [r5, #25]
    418c:	3310      	adds	r3, #16
    418e:	76ab      	strb	r3, [r5, #26]
    4190:	0034      	movs	r4, r6
    4192:	7823      	ldrb	r3, [r4, #0]
    4194:	2b00      	cmp	r3, #0
    4196:	d147      	bne.n	4228 <_svfiprintf_r+0xdc>
    4198:	1ba3      	subs	r3, r4, r6
    419a:	9304      	str	r3, [sp, #16]
    419c:	d00d      	beq.n	41ba <_svfiprintf_r+0x6e>
    419e:	1ba3      	subs	r3, r4, r6
    41a0:	0032      	movs	r2, r6
    41a2:	0039      	movs	r1, r7
    41a4:	9802      	ldr	r0, [sp, #8]
    41a6:	f7ff ff6f 	bl	4088 <__ssputs_r>
    41aa:	1c43      	adds	r3, r0, #1
    41ac:	d100      	bne.n	41b0 <_svfiprintf_r+0x64>
    41ae:	e0b5      	b.n	431c <_svfiprintf_r+0x1d0>
    41b0:	696a      	ldr	r2, [r5, #20]
    41b2:	9b04      	ldr	r3, [sp, #16]
    41b4:	4694      	mov	ip, r2
    41b6:	4463      	add	r3, ip
    41b8:	616b      	str	r3, [r5, #20]
    41ba:	7823      	ldrb	r3, [r4, #0]
    41bc:	2b00      	cmp	r3, #0
    41be:	d100      	bne.n	41c2 <_svfiprintf_r+0x76>
    41c0:	e0ac      	b.n	431c <_svfiprintf_r+0x1d0>
    41c2:	2201      	movs	r2, #1
    41c4:	2300      	movs	r3, #0
    41c6:	4252      	negs	r2, r2
    41c8:	606a      	str	r2, [r5, #4]
    41ca:	a902      	add	r1, sp, #8
    41cc:	3254      	adds	r2, #84	; 0x54
    41ce:	1852      	adds	r2, r2, r1
    41d0:	3401      	adds	r4, #1
    41d2:	602b      	str	r3, [r5, #0]
    41d4:	60eb      	str	r3, [r5, #12]
    41d6:	60ab      	str	r3, [r5, #8]
    41d8:	7013      	strb	r3, [r2, #0]
    41da:	65ab      	str	r3, [r5, #88]	; 0x58
    41dc:	4e58      	ldr	r6, [pc, #352]	; (4340 <_svfiprintf_r+0x1f4>)
    41de:	2205      	movs	r2, #5
    41e0:	7821      	ldrb	r1, [r4, #0]
    41e2:	0030      	movs	r0, r6
    41e4:	f000 fafa 	bl	47dc <memchr>
    41e8:	1c62      	adds	r2, r4, #1
    41ea:	2800      	cmp	r0, #0
    41ec:	d120      	bne.n	4230 <_svfiprintf_r+0xe4>
    41ee:	6829      	ldr	r1, [r5, #0]
    41f0:	06cb      	lsls	r3, r1, #27
    41f2:	d504      	bpl.n	41fe <_svfiprintf_r+0xb2>
    41f4:	2353      	movs	r3, #83	; 0x53
    41f6:	ae02      	add	r6, sp, #8
    41f8:	3020      	adds	r0, #32
    41fa:	199b      	adds	r3, r3, r6
    41fc:	7018      	strb	r0, [r3, #0]
    41fe:	070b      	lsls	r3, r1, #28
    4200:	d504      	bpl.n	420c <_svfiprintf_r+0xc0>
    4202:	2353      	movs	r3, #83	; 0x53
    4204:	202b      	movs	r0, #43	; 0x2b
    4206:	ae02      	add	r6, sp, #8
    4208:	199b      	adds	r3, r3, r6
    420a:	7018      	strb	r0, [r3, #0]
    420c:	7823      	ldrb	r3, [r4, #0]
    420e:	2b2a      	cmp	r3, #42	; 0x2a
    4210:	d016      	beq.n	4240 <_svfiprintf_r+0xf4>
    4212:	2000      	movs	r0, #0
    4214:	210a      	movs	r1, #10
    4216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4218:	7822      	ldrb	r2, [r4, #0]
    421a:	3a30      	subs	r2, #48	; 0x30
    421c:	2a09      	cmp	r2, #9
    421e:	d955      	bls.n	42cc <_svfiprintf_r+0x180>
    4220:	2800      	cmp	r0, #0
    4222:	d015      	beq.n	4250 <_svfiprintf_r+0x104>
    4224:	9309      	str	r3, [sp, #36]	; 0x24
    4226:	e013      	b.n	4250 <_svfiprintf_r+0x104>
    4228:	2b25      	cmp	r3, #37	; 0x25
    422a:	d0b5      	beq.n	4198 <_svfiprintf_r+0x4c>
    422c:	3401      	adds	r4, #1
    422e:	e7b0      	b.n	4192 <_svfiprintf_r+0x46>
    4230:	2301      	movs	r3, #1
    4232:	1b80      	subs	r0, r0, r6
    4234:	4083      	lsls	r3, r0
    4236:	6829      	ldr	r1, [r5, #0]
    4238:	0014      	movs	r4, r2
    423a:	430b      	orrs	r3, r1
    423c:	602b      	str	r3, [r5, #0]
    423e:	e7cd      	b.n	41dc <_svfiprintf_r+0x90>
    4240:	9b05      	ldr	r3, [sp, #20]
    4242:	1d18      	adds	r0, r3, #4
    4244:	681b      	ldr	r3, [r3, #0]
    4246:	9005      	str	r0, [sp, #20]
    4248:	2b00      	cmp	r3, #0
    424a:	db39      	blt.n	42c0 <_svfiprintf_r+0x174>
    424c:	9309      	str	r3, [sp, #36]	; 0x24
    424e:	0014      	movs	r4, r2
    4250:	7823      	ldrb	r3, [r4, #0]
    4252:	2b2e      	cmp	r3, #46	; 0x2e
    4254:	d10b      	bne.n	426e <_svfiprintf_r+0x122>
    4256:	7863      	ldrb	r3, [r4, #1]
    4258:	1c62      	adds	r2, r4, #1
    425a:	2b2a      	cmp	r3, #42	; 0x2a
    425c:	d13e      	bne.n	42dc <_svfiprintf_r+0x190>
    425e:	9b05      	ldr	r3, [sp, #20]
    4260:	3402      	adds	r4, #2
    4262:	1d1a      	adds	r2, r3, #4
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	9205      	str	r2, [sp, #20]
    4268:	2b00      	cmp	r3, #0
    426a:	db34      	blt.n	42d6 <_svfiprintf_r+0x18a>
    426c:	9307      	str	r3, [sp, #28]
    426e:	4e35      	ldr	r6, [pc, #212]	; (4344 <_svfiprintf_r+0x1f8>)
    4270:	7821      	ldrb	r1, [r4, #0]
    4272:	2203      	movs	r2, #3
    4274:	0030      	movs	r0, r6
    4276:	f000 fab1 	bl	47dc <memchr>
    427a:	2800      	cmp	r0, #0
    427c:	d006      	beq.n	428c <_svfiprintf_r+0x140>
    427e:	2340      	movs	r3, #64	; 0x40
    4280:	1b80      	subs	r0, r0, r6
    4282:	4083      	lsls	r3, r0
    4284:	682a      	ldr	r2, [r5, #0]
    4286:	3401      	adds	r4, #1
    4288:	4313      	orrs	r3, r2
    428a:	602b      	str	r3, [r5, #0]
    428c:	7821      	ldrb	r1, [r4, #0]
    428e:	2206      	movs	r2, #6
    4290:	482d      	ldr	r0, [pc, #180]	; (4348 <_svfiprintf_r+0x1fc>)
    4292:	1c66      	adds	r6, r4, #1
    4294:	7629      	strb	r1, [r5, #24]
    4296:	f000 faa1 	bl	47dc <memchr>
    429a:	2800      	cmp	r0, #0
    429c:	d046      	beq.n	432c <_svfiprintf_r+0x1e0>
    429e:	4b2b      	ldr	r3, [pc, #172]	; (434c <_svfiprintf_r+0x200>)
    42a0:	2b00      	cmp	r3, #0
    42a2:	d12f      	bne.n	4304 <_svfiprintf_r+0x1b8>
    42a4:	6829      	ldr	r1, [r5, #0]
    42a6:	9b05      	ldr	r3, [sp, #20]
    42a8:	2207      	movs	r2, #7
    42aa:	05c9      	lsls	r1, r1, #23
    42ac:	d528      	bpl.n	4300 <_svfiprintf_r+0x1b4>
    42ae:	189b      	adds	r3, r3, r2
    42b0:	4393      	bics	r3, r2
    42b2:	3308      	adds	r3, #8
    42b4:	9305      	str	r3, [sp, #20]
    42b6:	696b      	ldr	r3, [r5, #20]
    42b8:	9a03      	ldr	r2, [sp, #12]
    42ba:	189b      	adds	r3, r3, r2
    42bc:	616b      	str	r3, [r5, #20]
    42be:	e767      	b.n	4190 <_svfiprintf_r+0x44>
    42c0:	425b      	negs	r3, r3
    42c2:	60eb      	str	r3, [r5, #12]
    42c4:	2302      	movs	r3, #2
    42c6:	430b      	orrs	r3, r1
    42c8:	602b      	str	r3, [r5, #0]
    42ca:	e7c0      	b.n	424e <_svfiprintf_r+0x102>
    42cc:	434b      	muls	r3, r1
    42ce:	3401      	adds	r4, #1
    42d0:	189b      	adds	r3, r3, r2
    42d2:	2001      	movs	r0, #1
    42d4:	e7a0      	b.n	4218 <_svfiprintf_r+0xcc>
    42d6:	2301      	movs	r3, #1
    42d8:	425b      	negs	r3, r3
    42da:	e7c7      	b.n	426c <_svfiprintf_r+0x120>
    42dc:	2300      	movs	r3, #0
    42de:	0014      	movs	r4, r2
    42e0:	200a      	movs	r0, #10
    42e2:	001a      	movs	r2, r3
    42e4:	606b      	str	r3, [r5, #4]
    42e6:	7821      	ldrb	r1, [r4, #0]
    42e8:	3930      	subs	r1, #48	; 0x30
    42ea:	2909      	cmp	r1, #9
    42ec:	d903      	bls.n	42f6 <_svfiprintf_r+0x1aa>
    42ee:	2b00      	cmp	r3, #0
    42f0:	d0bd      	beq.n	426e <_svfiprintf_r+0x122>
    42f2:	9207      	str	r2, [sp, #28]
    42f4:	e7bb      	b.n	426e <_svfiprintf_r+0x122>
    42f6:	4342      	muls	r2, r0
    42f8:	3401      	adds	r4, #1
    42fa:	1852      	adds	r2, r2, r1
    42fc:	2301      	movs	r3, #1
    42fe:	e7f2      	b.n	42e6 <_svfiprintf_r+0x19a>
    4300:	3307      	adds	r3, #7
    4302:	e7d5      	b.n	42b0 <_svfiprintf_r+0x164>
    4304:	ab05      	add	r3, sp, #20
    4306:	9300      	str	r3, [sp, #0]
    4308:	003a      	movs	r2, r7
    430a:	4b11      	ldr	r3, [pc, #68]	; (4350 <_svfiprintf_r+0x204>)
    430c:	0029      	movs	r1, r5
    430e:	9802      	ldr	r0, [sp, #8]
    4310:	e000      	b.n	4314 <_svfiprintf_r+0x1c8>
    4312:	bf00      	nop
    4314:	9003      	str	r0, [sp, #12]
    4316:	9b03      	ldr	r3, [sp, #12]
    4318:	3301      	adds	r3, #1
    431a:	d1cc      	bne.n	42b6 <_svfiprintf_r+0x16a>
    431c:	89bb      	ldrh	r3, [r7, #12]
    431e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4320:	065b      	lsls	r3, r3, #25
    4322:	d400      	bmi.n	4326 <_svfiprintf_r+0x1da>
    4324:	e729      	b.n	417a <_svfiprintf_r+0x2e>
    4326:	2001      	movs	r0, #1
    4328:	4240      	negs	r0, r0
    432a:	e726      	b.n	417a <_svfiprintf_r+0x2e>
    432c:	ab05      	add	r3, sp, #20
    432e:	9300      	str	r3, [sp, #0]
    4330:	003a      	movs	r2, r7
    4332:	4b07      	ldr	r3, [pc, #28]	; (4350 <_svfiprintf_r+0x204>)
    4334:	0029      	movs	r1, r5
    4336:	9802      	ldr	r0, [sp, #8]
    4338:	f000 f87a 	bl	4430 <_printf_i>
    433c:	e7ea      	b.n	4314 <_svfiprintf_r+0x1c8>
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	00004dd0 	.word	0x00004dd0
    4344:	00004dd6 	.word	0x00004dd6
    4348:	00004dda 	.word	0x00004dda
    434c:	00000000 	.word	0x00000000
    4350:	00004089 	.word	0x00004089

00004354 <_printf_common>:
    4354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4356:	0015      	movs	r5, r2
    4358:	9301      	str	r3, [sp, #4]
    435a:	688a      	ldr	r2, [r1, #8]
    435c:	690b      	ldr	r3, [r1, #16]
    435e:	9000      	str	r0, [sp, #0]
    4360:	000c      	movs	r4, r1
    4362:	4293      	cmp	r3, r2
    4364:	da00      	bge.n	4368 <_printf_common+0x14>
    4366:	0013      	movs	r3, r2
    4368:	0022      	movs	r2, r4
    436a:	602b      	str	r3, [r5, #0]
    436c:	3243      	adds	r2, #67	; 0x43
    436e:	7812      	ldrb	r2, [r2, #0]
    4370:	2a00      	cmp	r2, #0
    4372:	d001      	beq.n	4378 <_printf_common+0x24>
    4374:	3301      	adds	r3, #1
    4376:	602b      	str	r3, [r5, #0]
    4378:	6823      	ldr	r3, [r4, #0]
    437a:	069b      	lsls	r3, r3, #26
    437c:	d502      	bpl.n	4384 <_printf_common+0x30>
    437e:	682b      	ldr	r3, [r5, #0]
    4380:	3302      	adds	r3, #2
    4382:	602b      	str	r3, [r5, #0]
    4384:	2706      	movs	r7, #6
    4386:	6823      	ldr	r3, [r4, #0]
    4388:	401f      	ands	r7, r3
    438a:	d027      	beq.n	43dc <_printf_common+0x88>
    438c:	0023      	movs	r3, r4
    438e:	3343      	adds	r3, #67	; 0x43
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	1e5a      	subs	r2, r3, #1
    4394:	4193      	sbcs	r3, r2
    4396:	6822      	ldr	r2, [r4, #0]
    4398:	0692      	lsls	r2, r2, #26
    439a:	d430      	bmi.n	43fe <_printf_common+0xaa>
    439c:	0022      	movs	r2, r4
    439e:	9901      	ldr	r1, [sp, #4]
    43a0:	3243      	adds	r2, #67	; 0x43
    43a2:	9800      	ldr	r0, [sp, #0]
    43a4:	9e08      	ldr	r6, [sp, #32]
    43a6:	47b0      	blx	r6
    43a8:	1c43      	adds	r3, r0, #1
    43aa:	d025      	beq.n	43f8 <_printf_common+0xa4>
    43ac:	2306      	movs	r3, #6
    43ae:	6820      	ldr	r0, [r4, #0]
    43b0:	682a      	ldr	r2, [r5, #0]
    43b2:	68e1      	ldr	r1, [r4, #12]
    43b4:	4003      	ands	r3, r0
    43b6:	2500      	movs	r5, #0
    43b8:	2b04      	cmp	r3, #4
    43ba:	d103      	bne.n	43c4 <_printf_common+0x70>
    43bc:	1a8d      	subs	r5, r1, r2
    43be:	43eb      	mvns	r3, r5
    43c0:	17db      	asrs	r3, r3, #31
    43c2:	401d      	ands	r5, r3
    43c4:	68a3      	ldr	r3, [r4, #8]
    43c6:	6922      	ldr	r2, [r4, #16]
    43c8:	4293      	cmp	r3, r2
    43ca:	dd01      	ble.n	43d0 <_printf_common+0x7c>
    43cc:	1a9b      	subs	r3, r3, r2
    43ce:	18ed      	adds	r5, r5, r3
    43d0:	2700      	movs	r7, #0
    43d2:	42bd      	cmp	r5, r7
    43d4:	d120      	bne.n	4418 <_printf_common+0xc4>
    43d6:	2000      	movs	r0, #0
    43d8:	e010      	b.n	43fc <_printf_common+0xa8>
    43da:	3701      	adds	r7, #1
    43dc:	68e3      	ldr	r3, [r4, #12]
    43de:	682a      	ldr	r2, [r5, #0]
    43e0:	1a9b      	subs	r3, r3, r2
    43e2:	429f      	cmp	r7, r3
    43e4:	dad2      	bge.n	438c <_printf_common+0x38>
    43e6:	0022      	movs	r2, r4
    43e8:	2301      	movs	r3, #1
    43ea:	3219      	adds	r2, #25
    43ec:	9901      	ldr	r1, [sp, #4]
    43ee:	9800      	ldr	r0, [sp, #0]
    43f0:	9e08      	ldr	r6, [sp, #32]
    43f2:	47b0      	blx	r6
    43f4:	1c43      	adds	r3, r0, #1
    43f6:	d1f0      	bne.n	43da <_printf_common+0x86>
    43f8:	2001      	movs	r0, #1
    43fa:	4240      	negs	r0, r0
    43fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43fe:	2030      	movs	r0, #48	; 0x30
    4400:	18e1      	adds	r1, r4, r3
    4402:	3143      	adds	r1, #67	; 0x43
    4404:	7008      	strb	r0, [r1, #0]
    4406:	0021      	movs	r1, r4
    4408:	1c5a      	adds	r2, r3, #1
    440a:	3145      	adds	r1, #69	; 0x45
    440c:	7809      	ldrb	r1, [r1, #0]
    440e:	18a2      	adds	r2, r4, r2
    4410:	3243      	adds	r2, #67	; 0x43
    4412:	3302      	adds	r3, #2
    4414:	7011      	strb	r1, [r2, #0]
    4416:	e7c1      	b.n	439c <_printf_common+0x48>
    4418:	0022      	movs	r2, r4
    441a:	2301      	movs	r3, #1
    441c:	321a      	adds	r2, #26
    441e:	9901      	ldr	r1, [sp, #4]
    4420:	9800      	ldr	r0, [sp, #0]
    4422:	9e08      	ldr	r6, [sp, #32]
    4424:	47b0      	blx	r6
    4426:	1c43      	adds	r3, r0, #1
    4428:	d0e6      	beq.n	43f8 <_printf_common+0xa4>
    442a:	3701      	adds	r7, #1
    442c:	e7d1      	b.n	43d2 <_printf_common+0x7e>
	...

00004430 <_printf_i>:
    4430:	b5f0      	push	{r4, r5, r6, r7, lr}
    4432:	b08b      	sub	sp, #44	; 0x2c
    4434:	9206      	str	r2, [sp, #24]
    4436:	000a      	movs	r2, r1
    4438:	3243      	adds	r2, #67	; 0x43
    443a:	9307      	str	r3, [sp, #28]
    443c:	9005      	str	r0, [sp, #20]
    443e:	9204      	str	r2, [sp, #16]
    4440:	7e0a      	ldrb	r2, [r1, #24]
    4442:	000c      	movs	r4, r1
    4444:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4446:	2a6e      	cmp	r2, #110	; 0x6e
    4448:	d100      	bne.n	444c <_printf_i+0x1c>
    444a:	e08f      	b.n	456c <_printf_i+0x13c>
    444c:	d817      	bhi.n	447e <_printf_i+0x4e>
    444e:	2a63      	cmp	r2, #99	; 0x63
    4450:	d02c      	beq.n	44ac <_printf_i+0x7c>
    4452:	d808      	bhi.n	4466 <_printf_i+0x36>
    4454:	2a00      	cmp	r2, #0
    4456:	d100      	bne.n	445a <_printf_i+0x2a>
    4458:	e099      	b.n	458e <_printf_i+0x15e>
    445a:	2a58      	cmp	r2, #88	; 0x58
    445c:	d054      	beq.n	4508 <_printf_i+0xd8>
    445e:	0026      	movs	r6, r4
    4460:	3642      	adds	r6, #66	; 0x42
    4462:	7032      	strb	r2, [r6, #0]
    4464:	e029      	b.n	44ba <_printf_i+0x8a>
    4466:	2a64      	cmp	r2, #100	; 0x64
    4468:	d001      	beq.n	446e <_printf_i+0x3e>
    446a:	2a69      	cmp	r2, #105	; 0x69
    446c:	d1f7      	bne.n	445e <_printf_i+0x2e>
    446e:	6821      	ldr	r1, [r4, #0]
    4470:	681a      	ldr	r2, [r3, #0]
    4472:	0608      	lsls	r0, r1, #24
    4474:	d523      	bpl.n	44be <_printf_i+0x8e>
    4476:	1d11      	adds	r1, r2, #4
    4478:	6019      	str	r1, [r3, #0]
    447a:	6815      	ldr	r5, [r2, #0]
    447c:	e025      	b.n	44ca <_printf_i+0x9a>
    447e:	2a73      	cmp	r2, #115	; 0x73
    4480:	d100      	bne.n	4484 <_printf_i+0x54>
    4482:	e088      	b.n	4596 <_printf_i+0x166>
    4484:	d808      	bhi.n	4498 <_printf_i+0x68>
    4486:	2a6f      	cmp	r2, #111	; 0x6f
    4488:	d029      	beq.n	44de <_printf_i+0xae>
    448a:	2a70      	cmp	r2, #112	; 0x70
    448c:	d1e7      	bne.n	445e <_printf_i+0x2e>
    448e:	2220      	movs	r2, #32
    4490:	6809      	ldr	r1, [r1, #0]
    4492:	430a      	orrs	r2, r1
    4494:	6022      	str	r2, [r4, #0]
    4496:	e003      	b.n	44a0 <_printf_i+0x70>
    4498:	2a75      	cmp	r2, #117	; 0x75
    449a:	d020      	beq.n	44de <_printf_i+0xae>
    449c:	2a78      	cmp	r2, #120	; 0x78
    449e:	d1de      	bne.n	445e <_printf_i+0x2e>
    44a0:	0022      	movs	r2, r4
    44a2:	2178      	movs	r1, #120	; 0x78
    44a4:	3245      	adds	r2, #69	; 0x45
    44a6:	7011      	strb	r1, [r2, #0]
    44a8:	4a6c      	ldr	r2, [pc, #432]	; (465c <_printf_i+0x22c>)
    44aa:	e030      	b.n	450e <_printf_i+0xde>
    44ac:	000e      	movs	r6, r1
    44ae:	681a      	ldr	r2, [r3, #0]
    44b0:	3642      	adds	r6, #66	; 0x42
    44b2:	1d11      	adds	r1, r2, #4
    44b4:	6019      	str	r1, [r3, #0]
    44b6:	6813      	ldr	r3, [r2, #0]
    44b8:	7033      	strb	r3, [r6, #0]
    44ba:	2301      	movs	r3, #1
    44bc:	e079      	b.n	45b2 <_printf_i+0x182>
    44be:	0649      	lsls	r1, r1, #25
    44c0:	d5d9      	bpl.n	4476 <_printf_i+0x46>
    44c2:	1d11      	adds	r1, r2, #4
    44c4:	6019      	str	r1, [r3, #0]
    44c6:	2300      	movs	r3, #0
    44c8:	5ed5      	ldrsh	r5, [r2, r3]
    44ca:	2d00      	cmp	r5, #0
    44cc:	da03      	bge.n	44d6 <_printf_i+0xa6>
    44ce:	232d      	movs	r3, #45	; 0x2d
    44d0:	9a04      	ldr	r2, [sp, #16]
    44d2:	426d      	negs	r5, r5
    44d4:	7013      	strb	r3, [r2, #0]
    44d6:	4b62      	ldr	r3, [pc, #392]	; (4660 <_printf_i+0x230>)
    44d8:	270a      	movs	r7, #10
    44da:	9303      	str	r3, [sp, #12]
    44dc:	e02f      	b.n	453e <_printf_i+0x10e>
    44de:	6820      	ldr	r0, [r4, #0]
    44e0:	6819      	ldr	r1, [r3, #0]
    44e2:	0605      	lsls	r5, r0, #24
    44e4:	d503      	bpl.n	44ee <_printf_i+0xbe>
    44e6:	1d08      	adds	r0, r1, #4
    44e8:	6018      	str	r0, [r3, #0]
    44ea:	680d      	ldr	r5, [r1, #0]
    44ec:	e005      	b.n	44fa <_printf_i+0xca>
    44ee:	0640      	lsls	r0, r0, #25
    44f0:	d5f9      	bpl.n	44e6 <_printf_i+0xb6>
    44f2:	680d      	ldr	r5, [r1, #0]
    44f4:	1d08      	adds	r0, r1, #4
    44f6:	6018      	str	r0, [r3, #0]
    44f8:	b2ad      	uxth	r5, r5
    44fa:	4b59      	ldr	r3, [pc, #356]	; (4660 <_printf_i+0x230>)
    44fc:	2708      	movs	r7, #8
    44fe:	9303      	str	r3, [sp, #12]
    4500:	2a6f      	cmp	r2, #111	; 0x6f
    4502:	d018      	beq.n	4536 <_printf_i+0x106>
    4504:	270a      	movs	r7, #10
    4506:	e016      	b.n	4536 <_printf_i+0x106>
    4508:	3145      	adds	r1, #69	; 0x45
    450a:	700a      	strb	r2, [r1, #0]
    450c:	4a54      	ldr	r2, [pc, #336]	; (4660 <_printf_i+0x230>)
    450e:	9203      	str	r2, [sp, #12]
    4510:	681a      	ldr	r2, [r3, #0]
    4512:	6821      	ldr	r1, [r4, #0]
    4514:	1d10      	adds	r0, r2, #4
    4516:	6018      	str	r0, [r3, #0]
    4518:	6815      	ldr	r5, [r2, #0]
    451a:	0608      	lsls	r0, r1, #24
    451c:	d522      	bpl.n	4564 <_printf_i+0x134>
    451e:	07cb      	lsls	r3, r1, #31
    4520:	d502      	bpl.n	4528 <_printf_i+0xf8>
    4522:	2320      	movs	r3, #32
    4524:	4319      	orrs	r1, r3
    4526:	6021      	str	r1, [r4, #0]
    4528:	2710      	movs	r7, #16
    452a:	2d00      	cmp	r5, #0
    452c:	d103      	bne.n	4536 <_printf_i+0x106>
    452e:	2320      	movs	r3, #32
    4530:	6822      	ldr	r2, [r4, #0]
    4532:	439a      	bics	r2, r3
    4534:	6022      	str	r2, [r4, #0]
    4536:	0023      	movs	r3, r4
    4538:	2200      	movs	r2, #0
    453a:	3343      	adds	r3, #67	; 0x43
    453c:	701a      	strb	r2, [r3, #0]
    453e:	6863      	ldr	r3, [r4, #4]
    4540:	60a3      	str	r3, [r4, #8]
    4542:	2b00      	cmp	r3, #0
    4544:	db5c      	blt.n	4600 <_printf_i+0x1d0>
    4546:	2204      	movs	r2, #4
    4548:	6821      	ldr	r1, [r4, #0]
    454a:	4391      	bics	r1, r2
    454c:	6021      	str	r1, [r4, #0]
    454e:	2d00      	cmp	r5, #0
    4550:	d158      	bne.n	4604 <_printf_i+0x1d4>
    4552:	9e04      	ldr	r6, [sp, #16]
    4554:	2b00      	cmp	r3, #0
    4556:	d064      	beq.n	4622 <_printf_i+0x1f2>
    4558:	0026      	movs	r6, r4
    455a:	9b03      	ldr	r3, [sp, #12]
    455c:	3642      	adds	r6, #66	; 0x42
    455e:	781b      	ldrb	r3, [r3, #0]
    4560:	7033      	strb	r3, [r6, #0]
    4562:	e05e      	b.n	4622 <_printf_i+0x1f2>
    4564:	0648      	lsls	r0, r1, #25
    4566:	d5da      	bpl.n	451e <_printf_i+0xee>
    4568:	b2ad      	uxth	r5, r5
    456a:	e7d8      	b.n	451e <_printf_i+0xee>
    456c:	6809      	ldr	r1, [r1, #0]
    456e:	681a      	ldr	r2, [r3, #0]
    4570:	0608      	lsls	r0, r1, #24
    4572:	d505      	bpl.n	4580 <_printf_i+0x150>
    4574:	1d11      	adds	r1, r2, #4
    4576:	6019      	str	r1, [r3, #0]
    4578:	6813      	ldr	r3, [r2, #0]
    457a:	6962      	ldr	r2, [r4, #20]
    457c:	601a      	str	r2, [r3, #0]
    457e:	e006      	b.n	458e <_printf_i+0x15e>
    4580:	0649      	lsls	r1, r1, #25
    4582:	d5f7      	bpl.n	4574 <_printf_i+0x144>
    4584:	1d11      	adds	r1, r2, #4
    4586:	6019      	str	r1, [r3, #0]
    4588:	6813      	ldr	r3, [r2, #0]
    458a:	8aa2      	ldrh	r2, [r4, #20]
    458c:	801a      	strh	r2, [r3, #0]
    458e:	2300      	movs	r3, #0
    4590:	9e04      	ldr	r6, [sp, #16]
    4592:	6123      	str	r3, [r4, #16]
    4594:	e054      	b.n	4640 <_printf_i+0x210>
    4596:	681a      	ldr	r2, [r3, #0]
    4598:	1d11      	adds	r1, r2, #4
    459a:	6019      	str	r1, [r3, #0]
    459c:	6816      	ldr	r6, [r2, #0]
    459e:	2100      	movs	r1, #0
    45a0:	6862      	ldr	r2, [r4, #4]
    45a2:	0030      	movs	r0, r6
    45a4:	f000 f91a 	bl	47dc <memchr>
    45a8:	2800      	cmp	r0, #0
    45aa:	d001      	beq.n	45b0 <_printf_i+0x180>
    45ac:	1b80      	subs	r0, r0, r6
    45ae:	6060      	str	r0, [r4, #4]
    45b0:	6863      	ldr	r3, [r4, #4]
    45b2:	6123      	str	r3, [r4, #16]
    45b4:	2300      	movs	r3, #0
    45b6:	9a04      	ldr	r2, [sp, #16]
    45b8:	7013      	strb	r3, [r2, #0]
    45ba:	e041      	b.n	4640 <_printf_i+0x210>
    45bc:	6923      	ldr	r3, [r4, #16]
    45be:	0032      	movs	r2, r6
    45c0:	9906      	ldr	r1, [sp, #24]
    45c2:	9805      	ldr	r0, [sp, #20]
    45c4:	9d07      	ldr	r5, [sp, #28]
    45c6:	47a8      	blx	r5
    45c8:	1c43      	adds	r3, r0, #1
    45ca:	d043      	beq.n	4654 <_printf_i+0x224>
    45cc:	6823      	ldr	r3, [r4, #0]
    45ce:	2500      	movs	r5, #0
    45d0:	079b      	lsls	r3, r3, #30
    45d2:	d40f      	bmi.n	45f4 <_printf_i+0x1c4>
    45d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45d6:	68e0      	ldr	r0, [r4, #12]
    45d8:	4298      	cmp	r0, r3
    45da:	da3d      	bge.n	4658 <_printf_i+0x228>
    45dc:	0018      	movs	r0, r3
    45de:	e03b      	b.n	4658 <_printf_i+0x228>
    45e0:	0022      	movs	r2, r4
    45e2:	2301      	movs	r3, #1
    45e4:	3219      	adds	r2, #25
    45e6:	9906      	ldr	r1, [sp, #24]
    45e8:	9805      	ldr	r0, [sp, #20]
    45ea:	9e07      	ldr	r6, [sp, #28]
    45ec:	47b0      	blx	r6
    45ee:	1c43      	adds	r3, r0, #1
    45f0:	d030      	beq.n	4654 <_printf_i+0x224>
    45f2:	3501      	adds	r5, #1
    45f4:	68e3      	ldr	r3, [r4, #12]
    45f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    45f8:	1a9b      	subs	r3, r3, r2
    45fa:	429d      	cmp	r5, r3
    45fc:	dbf0      	blt.n	45e0 <_printf_i+0x1b0>
    45fe:	e7e9      	b.n	45d4 <_printf_i+0x1a4>
    4600:	2d00      	cmp	r5, #0
    4602:	d0a9      	beq.n	4558 <_printf_i+0x128>
    4604:	9e04      	ldr	r6, [sp, #16]
    4606:	0028      	movs	r0, r5
    4608:	0039      	movs	r1, r7
    460a:	f7ff f80d 	bl	3628 <__aeabi_uidivmod>
    460e:	9b03      	ldr	r3, [sp, #12]
    4610:	3e01      	subs	r6, #1
    4612:	5c5b      	ldrb	r3, [r3, r1]
    4614:	0028      	movs	r0, r5
    4616:	7033      	strb	r3, [r6, #0]
    4618:	0039      	movs	r1, r7
    461a:	f7fe ff7f 	bl	351c <__udivsi3>
    461e:	1e05      	subs	r5, r0, #0
    4620:	d1f1      	bne.n	4606 <_printf_i+0x1d6>
    4622:	2f08      	cmp	r7, #8
    4624:	d109      	bne.n	463a <_printf_i+0x20a>
    4626:	6823      	ldr	r3, [r4, #0]
    4628:	07db      	lsls	r3, r3, #31
    462a:	d506      	bpl.n	463a <_printf_i+0x20a>
    462c:	6863      	ldr	r3, [r4, #4]
    462e:	6922      	ldr	r2, [r4, #16]
    4630:	4293      	cmp	r3, r2
    4632:	dc02      	bgt.n	463a <_printf_i+0x20a>
    4634:	2330      	movs	r3, #48	; 0x30
    4636:	3e01      	subs	r6, #1
    4638:	7033      	strb	r3, [r6, #0]
    463a:	9b04      	ldr	r3, [sp, #16]
    463c:	1b9b      	subs	r3, r3, r6
    463e:	6123      	str	r3, [r4, #16]
    4640:	9b07      	ldr	r3, [sp, #28]
    4642:	aa09      	add	r2, sp, #36	; 0x24
    4644:	9300      	str	r3, [sp, #0]
    4646:	0021      	movs	r1, r4
    4648:	9b06      	ldr	r3, [sp, #24]
    464a:	9805      	ldr	r0, [sp, #20]
    464c:	f7ff fe82 	bl	4354 <_printf_common>
    4650:	1c43      	adds	r3, r0, #1
    4652:	d1b3      	bne.n	45bc <_printf_i+0x18c>
    4654:	2001      	movs	r0, #1
    4656:	4240      	negs	r0, r0
    4658:	b00b      	add	sp, #44	; 0x2c
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    465c:	00004df2 	.word	0x00004df2
    4660:	00004de1 	.word	0x00004de1

00004664 <_sbrk_r>:
    4664:	2300      	movs	r3, #0
    4666:	b570      	push	{r4, r5, r6, lr}
    4668:	4c06      	ldr	r4, [pc, #24]	; (4684 <_sbrk_r+0x20>)
    466a:	0005      	movs	r5, r0
    466c:	0008      	movs	r0, r1
    466e:	6023      	str	r3, [r4, #0]
    4670:	f7fe fb84 	bl	2d7c <_sbrk>
    4674:	1c43      	adds	r3, r0, #1
    4676:	d103      	bne.n	4680 <_sbrk_r+0x1c>
    4678:	6823      	ldr	r3, [r4, #0]
    467a:	2b00      	cmp	r3, #0
    467c:	d000      	beq.n	4680 <_sbrk_r+0x1c>
    467e:	602b      	str	r3, [r5, #0]
    4680:	bd70      	pop	{r4, r5, r6, pc}
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	2000056c 	.word	0x2000056c

00004688 <__sread>:
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	000c      	movs	r4, r1
    468c:	250e      	movs	r5, #14
    468e:	5f49      	ldrsh	r1, [r1, r5]
    4690:	f000 f8ea 	bl	4868 <_read_r>
    4694:	2800      	cmp	r0, #0
    4696:	db03      	blt.n	46a0 <__sread+0x18>
    4698:	6d63      	ldr	r3, [r4, #84]	; 0x54
    469a:	181b      	adds	r3, r3, r0
    469c:	6563      	str	r3, [r4, #84]	; 0x54
    469e:	bd70      	pop	{r4, r5, r6, pc}
    46a0:	89a3      	ldrh	r3, [r4, #12]
    46a2:	4a02      	ldr	r2, [pc, #8]	; (46ac <__sread+0x24>)
    46a4:	4013      	ands	r3, r2
    46a6:	81a3      	strh	r3, [r4, #12]
    46a8:	e7f9      	b.n	469e <__sread+0x16>
    46aa:	46c0      	nop			; (mov r8, r8)
    46ac:	ffffefff 	.word	0xffffefff

000046b0 <__swrite>:
    46b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46b2:	001f      	movs	r7, r3
    46b4:	898b      	ldrh	r3, [r1, #12]
    46b6:	0005      	movs	r5, r0
    46b8:	000c      	movs	r4, r1
    46ba:	0016      	movs	r6, r2
    46bc:	05db      	lsls	r3, r3, #23
    46be:	d505      	bpl.n	46cc <__swrite+0x1c>
    46c0:	230e      	movs	r3, #14
    46c2:	5ec9      	ldrsh	r1, [r1, r3]
    46c4:	2200      	movs	r2, #0
    46c6:	2302      	movs	r3, #2
    46c8:	f000 f874 	bl	47b4 <_lseek_r>
    46cc:	89a3      	ldrh	r3, [r4, #12]
    46ce:	4a05      	ldr	r2, [pc, #20]	; (46e4 <__swrite+0x34>)
    46d0:	0028      	movs	r0, r5
    46d2:	4013      	ands	r3, r2
    46d4:	81a3      	strh	r3, [r4, #12]
    46d6:	0032      	movs	r2, r6
    46d8:	230e      	movs	r3, #14
    46da:	5ee1      	ldrsh	r1, [r4, r3]
    46dc:	003b      	movs	r3, r7
    46de:	f000 f81f 	bl	4720 <_write_r>
    46e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46e4:	ffffefff 	.word	0xffffefff

000046e8 <__sseek>:
    46e8:	b570      	push	{r4, r5, r6, lr}
    46ea:	000c      	movs	r4, r1
    46ec:	250e      	movs	r5, #14
    46ee:	5f49      	ldrsh	r1, [r1, r5]
    46f0:	f000 f860 	bl	47b4 <_lseek_r>
    46f4:	89a3      	ldrh	r3, [r4, #12]
    46f6:	1c42      	adds	r2, r0, #1
    46f8:	d103      	bne.n	4702 <__sseek+0x1a>
    46fa:	4a05      	ldr	r2, [pc, #20]	; (4710 <__sseek+0x28>)
    46fc:	4013      	ands	r3, r2
    46fe:	81a3      	strh	r3, [r4, #12]
    4700:	bd70      	pop	{r4, r5, r6, pc}
    4702:	2280      	movs	r2, #128	; 0x80
    4704:	0152      	lsls	r2, r2, #5
    4706:	4313      	orrs	r3, r2
    4708:	81a3      	strh	r3, [r4, #12]
    470a:	6560      	str	r0, [r4, #84]	; 0x54
    470c:	e7f8      	b.n	4700 <__sseek+0x18>
    470e:	46c0      	nop			; (mov r8, r8)
    4710:	ffffefff 	.word	0xffffefff

00004714 <__sclose>:
    4714:	b510      	push	{r4, lr}
    4716:	230e      	movs	r3, #14
    4718:	5ec9      	ldrsh	r1, [r1, r3]
    471a:	f000 f815 	bl	4748 <_close_r>
    471e:	bd10      	pop	{r4, pc}

00004720 <_write_r>:
    4720:	b570      	push	{r4, r5, r6, lr}
    4722:	0005      	movs	r5, r0
    4724:	0008      	movs	r0, r1
    4726:	0011      	movs	r1, r2
    4728:	2200      	movs	r2, #0
    472a:	4c06      	ldr	r4, [pc, #24]	; (4744 <_write_r+0x24>)
    472c:	6022      	str	r2, [r4, #0]
    472e:	001a      	movs	r2, r3
    4730:	f7fd fa06 	bl	1b40 <_write>
    4734:	1c43      	adds	r3, r0, #1
    4736:	d103      	bne.n	4740 <_write_r+0x20>
    4738:	6823      	ldr	r3, [r4, #0]
    473a:	2b00      	cmp	r3, #0
    473c:	d000      	beq.n	4740 <_write_r+0x20>
    473e:	602b      	str	r3, [r5, #0]
    4740:	bd70      	pop	{r4, r5, r6, pc}
    4742:	46c0      	nop			; (mov r8, r8)
    4744:	2000056c 	.word	0x2000056c

00004748 <_close_r>:
    4748:	2300      	movs	r3, #0
    474a:	b570      	push	{r4, r5, r6, lr}
    474c:	4c06      	ldr	r4, [pc, #24]	; (4768 <_close_r+0x20>)
    474e:	0005      	movs	r5, r0
    4750:	0008      	movs	r0, r1
    4752:	6023      	str	r3, [r4, #0]
    4754:	f7fe fb24 	bl	2da0 <_close>
    4758:	1c43      	adds	r3, r0, #1
    475a:	d103      	bne.n	4764 <_close_r+0x1c>
    475c:	6823      	ldr	r3, [r4, #0]
    475e:	2b00      	cmp	r3, #0
    4760:	d000      	beq.n	4764 <_close_r+0x1c>
    4762:	602b      	str	r3, [r5, #0]
    4764:	bd70      	pop	{r4, r5, r6, pc}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	2000056c 	.word	0x2000056c

0000476c <_fstat_r>:
    476c:	2300      	movs	r3, #0
    476e:	b570      	push	{r4, r5, r6, lr}
    4770:	4c06      	ldr	r4, [pc, #24]	; (478c <_fstat_r+0x20>)
    4772:	0005      	movs	r5, r0
    4774:	0008      	movs	r0, r1
    4776:	0011      	movs	r1, r2
    4778:	6023      	str	r3, [r4, #0]
    477a:	f7fe fb14 	bl	2da6 <_fstat>
    477e:	1c43      	adds	r3, r0, #1
    4780:	d103      	bne.n	478a <_fstat_r+0x1e>
    4782:	6823      	ldr	r3, [r4, #0]
    4784:	2b00      	cmp	r3, #0
    4786:	d000      	beq.n	478a <_fstat_r+0x1e>
    4788:	602b      	str	r3, [r5, #0]
    478a:	bd70      	pop	{r4, r5, r6, pc}
    478c:	2000056c 	.word	0x2000056c

00004790 <_isatty_r>:
    4790:	2300      	movs	r3, #0
    4792:	b570      	push	{r4, r5, r6, lr}
    4794:	4c06      	ldr	r4, [pc, #24]	; (47b0 <_isatty_r+0x20>)
    4796:	0005      	movs	r5, r0
    4798:	0008      	movs	r0, r1
    479a:	6023      	str	r3, [r4, #0]
    479c:	f7fe fb08 	bl	2db0 <_isatty>
    47a0:	1c43      	adds	r3, r0, #1
    47a2:	d103      	bne.n	47ac <_isatty_r+0x1c>
    47a4:	6823      	ldr	r3, [r4, #0]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d000      	beq.n	47ac <_isatty_r+0x1c>
    47aa:	602b      	str	r3, [r5, #0]
    47ac:	bd70      	pop	{r4, r5, r6, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	2000056c 	.word	0x2000056c

000047b4 <_lseek_r>:
    47b4:	b570      	push	{r4, r5, r6, lr}
    47b6:	0005      	movs	r5, r0
    47b8:	0008      	movs	r0, r1
    47ba:	0011      	movs	r1, r2
    47bc:	2200      	movs	r2, #0
    47be:	4c06      	ldr	r4, [pc, #24]	; (47d8 <_lseek_r+0x24>)
    47c0:	6022      	str	r2, [r4, #0]
    47c2:	001a      	movs	r2, r3
    47c4:	f7fe faf6 	bl	2db4 <_lseek>
    47c8:	1c43      	adds	r3, r0, #1
    47ca:	d103      	bne.n	47d4 <_lseek_r+0x20>
    47cc:	6823      	ldr	r3, [r4, #0]
    47ce:	2b00      	cmp	r3, #0
    47d0:	d000      	beq.n	47d4 <_lseek_r+0x20>
    47d2:	602b      	str	r3, [r5, #0]
    47d4:	bd70      	pop	{r4, r5, r6, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	2000056c 	.word	0x2000056c

000047dc <memchr>:
    47dc:	b2c9      	uxtb	r1, r1
    47de:	1882      	adds	r2, r0, r2
    47e0:	4290      	cmp	r0, r2
    47e2:	d101      	bne.n	47e8 <memchr+0xc>
    47e4:	2000      	movs	r0, #0
    47e6:	4770      	bx	lr
    47e8:	7803      	ldrb	r3, [r0, #0]
    47ea:	428b      	cmp	r3, r1
    47ec:	d0fb      	beq.n	47e6 <memchr+0xa>
    47ee:	3001      	adds	r0, #1
    47f0:	e7f6      	b.n	47e0 <memchr+0x4>

000047f2 <memmove>:
    47f2:	b510      	push	{r4, lr}
    47f4:	4288      	cmp	r0, r1
    47f6:	d902      	bls.n	47fe <memmove+0xc>
    47f8:	188b      	adds	r3, r1, r2
    47fa:	4298      	cmp	r0, r3
    47fc:	d308      	bcc.n	4810 <memmove+0x1e>
    47fe:	2300      	movs	r3, #0
    4800:	429a      	cmp	r2, r3
    4802:	d007      	beq.n	4814 <memmove+0x22>
    4804:	5ccc      	ldrb	r4, [r1, r3]
    4806:	54c4      	strb	r4, [r0, r3]
    4808:	3301      	adds	r3, #1
    480a:	e7f9      	b.n	4800 <memmove+0xe>
    480c:	5c8b      	ldrb	r3, [r1, r2]
    480e:	5483      	strb	r3, [r0, r2]
    4810:	3a01      	subs	r2, #1
    4812:	d2fb      	bcs.n	480c <memmove+0x1a>
    4814:	bd10      	pop	{r4, pc}

00004816 <__malloc_lock>:
    4816:	4770      	bx	lr

00004818 <__malloc_unlock>:
    4818:	4770      	bx	lr

0000481a <_realloc_r>:
    481a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    481c:	0007      	movs	r7, r0
    481e:	000d      	movs	r5, r1
    4820:	0016      	movs	r6, r2
    4822:	2900      	cmp	r1, #0
    4824:	d105      	bne.n	4832 <_realloc_r+0x18>
    4826:	0011      	movs	r1, r2
    4828:	f7ff fbd0 	bl	3fcc <_malloc_r>
    482c:	0004      	movs	r4, r0
    482e:	0020      	movs	r0, r4
    4830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4832:	2a00      	cmp	r2, #0
    4834:	d103      	bne.n	483e <_realloc_r+0x24>
    4836:	f7ff fb7f 	bl	3f38 <_free_r>
    483a:	0034      	movs	r4, r6
    483c:	e7f7      	b.n	482e <_realloc_r+0x14>
    483e:	f000 f827 	bl	4890 <_malloc_usable_size_r>
    4842:	002c      	movs	r4, r5
    4844:	4286      	cmp	r6, r0
    4846:	d9f2      	bls.n	482e <_realloc_r+0x14>
    4848:	0031      	movs	r1, r6
    484a:	0038      	movs	r0, r7
    484c:	f7ff fbbe 	bl	3fcc <_malloc_r>
    4850:	1e04      	subs	r4, r0, #0
    4852:	d0ec      	beq.n	482e <_realloc_r+0x14>
    4854:	0029      	movs	r1, r5
    4856:	0032      	movs	r2, r6
    4858:	f7fe ff3a 	bl	36d0 <memcpy>
    485c:	0029      	movs	r1, r5
    485e:	0038      	movs	r0, r7
    4860:	f7ff fb6a 	bl	3f38 <_free_r>
    4864:	e7e3      	b.n	482e <_realloc_r+0x14>
	...

00004868 <_read_r>:
    4868:	b570      	push	{r4, r5, r6, lr}
    486a:	0005      	movs	r5, r0
    486c:	0008      	movs	r0, r1
    486e:	0011      	movs	r1, r2
    4870:	2200      	movs	r2, #0
    4872:	4c06      	ldr	r4, [pc, #24]	; (488c <_read_r+0x24>)
    4874:	6022      	str	r2, [r4, #0]
    4876:	001a      	movs	r2, r3
    4878:	f7fd f940 	bl	1afc <_read>
    487c:	1c43      	adds	r3, r0, #1
    487e:	d103      	bne.n	4888 <_read_r+0x20>
    4880:	6823      	ldr	r3, [r4, #0]
    4882:	2b00      	cmp	r3, #0
    4884:	d000      	beq.n	4888 <_read_r+0x20>
    4886:	602b      	str	r3, [r5, #0]
    4888:	bd70      	pop	{r4, r5, r6, pc}
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	2000056c 	.word	0x2000056c

00004890 <_malloc_usable_size_r>:
    4890:	1f0b      	subs	r3, r1, #4
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	1f18      	subs	r0, r3, #4
    4896:	2b00      	cmp	r3, #0
    4898:	da01      	bge.n	489e <_malloc_usable_size_r+0xe>
    489a:	580b      	ldr	r3, [r1, r0]
    489c:	18c0      	adds	r0, r0, r3
    489e:	4770      	bx	lr
    48a0:	00000e02 	.word	0x00000e02
    48a4:	00000e32 	.word	0x00000e32
    48a8:	00000e0e 	.word	0x00000e0e
    48ac:	00000e1a 	.word	0x00000e1a
    48b0:	00000e26 	.word	0x00000e26
    48b4:	00000e3e 	.word	0x00000e3e
    48b8:	00000e4a 	.word	0x00000e4a
    48bc:	00000df6 	.word	0x00000df6
    48c0:	20202020 	.word	0x20202020
    48c4:	20202020 	.word	0x20202020
    48c8:	20202020 	.word	0x20202020
    48cc:	20202020 	.word	0x20202020
    48d0:	20202020 	.word	0x20202020
    48d4:	00002020 	.word	0x00002020
    48d8:	20202020 	.word	0x20202020
    48dc:	20202020 	.word	0x20202020
    48e0:	00000000 	.word	0x00000000
    48e4:	48434e45 	.word	0x48434e45
    48e8:	20205245 	.word	0x20205245
    48ec:	00000020 	.word	0x00000020
    48f0:	45544142 	.word	0x45544142
    48f4:	20202052 	.word	0x20202052
    48f8:	00000000 	.word	0x00000000
    48fc:	484c4f4d 	.word	0x484c4f4d
    4900:	2020204f 	.word	0x2020204f
    4904:	00000000 	.word	0x00000000
    4908:	41584e45 	.word	0x41584e45
    490c:	20455547 	.word	0x20455547
    4910:	00000000 	.word	0x00000000
    4914:	41565345 	.word	0x41565345
    4918:	5241495a 	.word	0x5241495a
    491c:	00000000 	.word	0x00000000
    4920:	544e4543 	.word	0x544e4543
    4924:	47554652 	.word	0x47554652
    4928:	00000000 	.word	0x00000000
    492c:	41434553 	.word	0x41434553
    4930:	204f444e 	.word	0x204f444e
    4934:	00000000 	.word	0x00000000
    4938:	4f525245 	.word	0x4f525245
    493c:	00000000 	.word	0x00000000

00004940 <spinCHC_agua_alto>:
    4940:	6f746c41 00000000                       Alto....

00004948 <spinCHC_agua_baixo>:
    4948:	78696142 0000006f                       Baixo...

00004950 <spinCHC_agua_medio>:
    4950:	6964654d 0000006f                       Medio...

00004958 <spinCHC_modo_normal>:
    4958:	6d726f4e 00006c61                       Normal..

00004960 <spinCHC_modo_pesado>:
    4960:	61736550 00006f64                       Pesado..

00004968 <spinCHC_modo_rapido>:
    4968:	69706152 00006f64                       Rapido..

00004970 <spinCHC_secar_morno>:
    4970:	6e726f4d 0000006f                       Morno...

00004978 <spinCHC_secar_quente>:
    4978:	6e657551 00006574                       Quente..

00004980 <spinCHC_secar_vapor>:
    4980:	6f706156 00000072                       Vapor...

00004988 <spinner_agua>:
    4988:	6576694e 00003a6c                       Nivel:..

00004990 <spinner_modo>:
    4990:	6f646f4d 0000003a                       Modo:...

00004998 <spinner_secar>:
    4998:	61636553 00003a72 00006425 00004b4f     Secar:..%d..OK..

000049a8 <indicator_data>:
    49a8:	183c7eff                                .~<.

000049ac <spin_indicator_data>:
    49ac:	ff7e3c18                                .<~.

000049b0 <sysfont_glyphs>:
    49b0:	00000000 20000000 20202020 50502000     .......     . PP
    49c0:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
    49d0:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
    49e0:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
    49f0:	10101020 50004020 5020f820 20200000      ... @.P . P..  
    4a00:	002020f8 00000000 00402060 00f80000     .  .....` @.....
    4a10:	00000000 60000000 10080060 00804020     .......``... @..
    4a20:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
    4a30:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
    4a40:	f81010f8 0808f080 40307088 8888f080     .........p0@....
    4a50:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
    4a60:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
    4a70:	40206000 40201008 00081020 f800f800     .` @.. @ .......
    4a80:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
    4a90:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
    4aa0:	8888f088 808870f0 70888080 888890e0     .....p.....p....
    4ab0:	f8e09088 80f08080 80f8f880 8080e080     ................
    4ac0:	80887080 70889880 f8888888 70888888     .p.....p.......p
    4ad0:	20202020 10387020 90101010 a0908860          p8.....`...
    4ae0:	8890a0c0 80808080 88f88080 8888a8d8     ................
    4af0:	88888888 8898a8c8 88887088 70888888     .........p.....p
    4b00:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
    4b10:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
    4b20:	88202020 88888888 88887088 50888888        ......p.....P
    4b30:	88888820 88d8a8a8 20508888 88888850      .........P P...
    4b40:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
    4b50:	38202020 20408000 e0000810 20202020        8..@ ....    
    4b60:	5020e020 00000088 00000000 f8000000      . P............
    4b70:	00102040 00000000 78087000 80807888     @ .......p.x.x..
    4b80:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
    4b90:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
    4ba0:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
    4bb0:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
    4bc0:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
    4bd0:	00008888 8888c8b0 70000088 70888888     ...........p...p
    4be0:	88f00000 008080f0 78986800 00000808     .........h.x....
    4bf0:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
    4c00:	00304840 88888800 00006898 50888888     @H0......h.....P
    4c10:	88000020 50a8a888 50880000 00885020      ......P...P P..
    4c20:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
    4c30:	10202040 20202020 40202020 20102020     @  .       @  . 
    4c40:	00004020 42000800 42000c00 42001000      @.....B...B...B
    4c50:	42001400 42001800 42001c00 0000270a     ...B...B...B.'..
    4c60:	00002706 00002706 00002768 00002768     .'...'..h'..h'..
    4c70:	0000271e 00002710 00002724 00002756     .'...'..$'..V'..
    4c80:	000027f0 000027d0 000027d0 0000285c     .'...'...'..\(..
    4c90:	000027e2 000027fe 000027d4 0000280c     .'...'...'...(..
    4ca0:	0000284c 00003152 000031a6 000031e2     L(..R1...1...1..
    4cb0:	0000321e 0000325c 0000329c 000032e2     .2..\2...2...2..
    4cc0:	00003132 52415453 2e2e2e54 2e2e2e2e     21..START.......
    4cd0:	2e2e2e2e 2e2e2e2e 2e2e2e2e 00000a2e     ................
    4ce0:	462d2d2d 4c414e49 44415a49 2d2d2d4f     ---FINALIZADO---
    4cf0:	00000000 43455845 4e415455 003a4f44     ....EXECUTANDO:.
    4d00:	53554150 20205241 20202020 50202020     PAUSAR         P
    4d10:	52415241 00000000 502d2d2d 41535541     ARAR....---PAUSA
    4d20:	2d2d4f44 0000002d 544e4f43 41554e49     DO---...CONTINUA
    4d30:	20202052 50202020 52415241 00000000     R      PARAR....
    4d40:	542d2d2d 41504d41 45424120 2d415452     ---TAMPA ABERTA-
    4d50:	00002d2d 2d2d2d2d 20202d2d 20202020     --..------      
    4d60:	50202020 52415241 00000000                 PARAR....

00004d6c <_global_impure_ptr>:
    4d6c:	20000050                                P.. 

00004d70 <__sf_fake_stderr>:
	...

00004d90 <__sf_fake_stdin>:
	...

00004db0 <__sf_fake_stdout>:
	...
    4dd0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4de0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4df0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4e00:	00006665                                ef..

00004e04 <_init>:
    4e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e06:	46c0      	nop			; (mov r8, r8)
    4e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e0a:	bc08      	pop	{r3}
    4e0c:	469e      	mov	lr, r3
    4e0e:	4770      	bx	lr

00004e10 <__init_array_start>:
    4e10:	000000dd 	.word	0x000000dd

00004e14 <_fini>:
    4e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e16:	46c0      	nop			; (mov r8, r8)
    4e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e1a:	bc08      	pop	{r3}
    4e1c:	469e      	mov	lr, r3
    4e1e:	4770      	bx	lr

00004e20 <__fini_array_start>:
    4e20:	000000b5 	.word	0x000000b5
